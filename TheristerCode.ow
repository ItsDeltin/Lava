variables
{
	global:
		4: gamemode
		5: arenaEffects
		19: blueScore
		20: redScore
		52: beamId
		53: cliffBlue
		54: cliffRed
		55: towerBlue
		56: towerRed
		57: rowFraction
		58: columnFraction
		59: x
		60: a
		61: b
		62: z
		63: a_0
		64: b_0
		90: dodgeball_huds
		91: dodgeball_blue_kills
		92: dodgeball_red_kills
		93: dodgeball_scoring
		94: dodgeball_score_buffer
		95: dodgeball_static_check
		96: dodgeball_static_timer

	player:
		10: isBall
		20: dodgeball_charge
		21: dodgeball_holder
		22: dodgeball_pos
		23: dodgeball_velocity
		24: sigma_pos
		25: sigma_pickup_buffer
		26: is_charging
		27: dodgeball_thrown
		28: dodgeball_held
		29: dodgeball_effect
		30: dodgeball_bounce_normal
		31: dodgeball_victim
		32: dodgeball_bounce
		33: dodgeball_catcher
		34: dodgeball_in_motion
		35: sigma_x_comp
		36: sigma_z_comp
		37: dodgeball_x_comp
		38: is_holding
		39: dodgeball_z_comp
		40: dodgeball_y_comp
		41: dodgeball_in_world_text
		42: sigma_normal
		43: dodgeball_activate
}

subroutines
{
	3: dodgeball_drop
	4: dodgeball_reset
	5: dodgeball_clamp_in_range
}

rule("Dodgeball: Team1 Boundary")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.gamemode == 6;
		Team Of(Event Player) == Team 1;
		X Component Of(Position Of(Event Player)) < 0;
		Y Component Of(Position Of(Event Player)) < 200;
	}

	actions
	{
		Wait(0.016, Ignore Condition);
		Abort If Condition Is False;
		Apply Impulse(Event Player, Left, 5 + Distance Between(Vector(Empty Array, Empty Array, Empty Array), Velocity Of(Event Player)),
			To World, Cancel Contrary Motion);
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
		disabled Play Effect(Event Player, Debuff Impact Sound, Color(White), Event Player, 100);
	}
}

rule("Dodgeball: Team2 Boundary")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.gamemode == 6;
		Team Of(Event Player) == Team 2;
		X Component Of(Position Of(Event Player)) > 0;
		Y Component Of(Position Of(Event Player)) < 200;
	}

	actions
	{
		Wait(0.016, Ignore Condition);
		Abort If Condition Is False;
		Apply Impulse(Event Player, Right, 5 + Distance Between(Vector(Empty Array, Empty Array, Empty Array), Velocity Of(Event Player)),
			To World, Cancel Contrary Motion);
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
		disabled Play Effect(Event Player, Debuff Impact Sound, Color(White), Event Player, 100);
	}
}

rule("Dodgeball: Draw Boundary")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.gamemode == 6;
	}

	actions
	{
		Create Beam Effect(All Players(All Teams), Bad Beam, Vector(Empty Array, 154.880, 150) - Vector(Empty Array, Empty Array, 20),
			Vector(Empty Array, 154.880, 150) + Vector(Empty Array, Empty Array, 20), Color(Aqua), Visible To);
		Modify Global Variable(beamId, Append To Array, Last Created Entity);
		Create Beam Effect(All Players(All Teams), Bad Beam, Vector(0, 154.880, 130), Vector(0, 171, 130.001), Color(Aqua), Visible To);
		Modify Global Variable(beamId, Append To Array, Last Created Entity);
		Create Beam Effect(All Players(All Teams), Bad Beam, Vector(0, 154.880, 170), Vector(0, 171, 170.001), Color(Aqua), Visible To);
		Modify Global Variable(beamId, Append To Array, Last Created Entity);
		Create Beam Effect(All Players(All Teams), Bad Beam, Vector(0, 171, 130), Vector(0, 171, 170), Color(Aqua), Visible To);
		Modify Global Variable(beamId, Append To Array, Last Created Entity);
	}
}

rule("Dodgeball: Destroy Boundary")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.gamemode != 6;
	}

	actions
	{
		While(Global.beamId != Empty Array);
			Destroy Effect(First Of(Global.beamId));
			Modify Global Variable(beamId, Remove From Array By Index, 0);
		End;
	}
}

rule("dodgeball global init")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.gamemode == 6;
	}

	actions
	{
		Call Subroutine(DestroyTutorialText);
		Create HUD Text(All Players(All Teams), Ability Icon String(Hero(Reinhardt), Button(Primary Fire)), Null, Custom String(
			"Dodgeball by Therister and Protowalker\r\nA collaborative effort of Grandeur Hammers\r\nhttps://bit.ly/ghgames"),
			Right, 1, Color(Yellow), Color(Red), Color(Yellow), Visible To and String, Visible Always);
		Modify Global Variable(dodgeball_huds, Append To Array, Last Text ID);
		Create HUD Text(All Players(All Teams), Hero Icon String(Hero(Sigma)), Null, Custom String("Controls:"), Right, 2, Color(Aqua), Color(White),
			Color(Aqua), Visible To and String, Default Visibility);
		Modify Global Variable(dodgeball_huds, Append To Array, Last Text ID);
		Create HUD Text(All Players(All Teams), Null, Null, Custom String("Press and hold {0} (right click) to pick up a ball.", String(
			"Secondary Fire")), Right, 3, Color(Aqua), Color(White), Color(Aqua), Visible To and String, Default Visibility);
		Modify Global Variable(dodgeball_huds, Append To Array, Last Text ID);
		Create HUD Text(All Players(All Teams), Null, Null, Custom String("Press and hold {0} (left click) to charge up your throw.",
			String("Primary Fire")), Right, 4, Color(Aqua), Color(White), Color(Aqua), Visible To and String, Default Visibility);
		Modify Global Variable(dodgeball_huds, Append To Array, Last Text ID);
		Create HUD Text(All Players(All Teams), Null, Null, Custom String("Release {0} (left click) to throw.", String("Primary Fire")),
			Right, 5, Color(Aqua), Color(White), Color(Aqua), Visible To and String, Default Visibility);
		Modify Global Variable(dodgeball_huds, Append To Array, Last Text ID);
		Create HUD Text(All Players(All Teams), Null, Null, Custom String("Use {0} Kinetic Grasp to catch an enemy's ball and kill them.",
			Ability Icon String(Hero(Sigma), Button(Ability 1))), Right, 6, Color(Aqua), Color(White), Color(Aqua), Visible To and String,
			Default Visibility);
		Modify Global Variable(dodgeball_huds, Append To Array, Last Text ID);
		Global.dodgeball_blue_kills = 0;
		Global.dodgeball_red_kills = 0;
		Create HUD Text(All Players(Team 1), Ability Icon String(Hero(Sigma), Button(Ability 2)), Custom String("Enemy kills: {0}/{1}",
			Global.dodgeball_red_kills, Count Of(Filtered Array(All Players(Team 2), Has Spawned(Current Array Element)))), Custom String("Your team's kills: {0}/{1}", Global.dodgeball_blue_kills, Count Of(Filtered Array(All Players(Team 1), Has Spawned(Current Array Element)))), Top, 2, Color(Aqua), Color(Red), Color(Aqua),
			Visible To and String, Visible Always);
		Modify Global Variable(dodgeball_huds, Append To Array, Last Text ID);
		Create HUD Text(All Players(Team 2), Ability Icon String(Hero(Sigma), Button(Ability 2)), Custom String("Enemy kills: {0}/{1}",
			Global.dodgeball_blue_kills, Count Of(Filtered Array(All Players(Team 1), Has Spawned(Current Array Element)))), Custom String("Your team's kills: {0}/{1}", Global.dodgeball_red_kills, Count Of(Filtered Array(All Players(Team 2), Has Spawned(Current Array Element)))), Top, 2, Color(Aqua), Color(Red), Color(Aqua),
			Visible To and String, Visible Always);
		Modify Global Variable(dodgeball_huds, Append To Array, Last Text ID);
		Global.dodgeball_scoring = False;
		Wait(0.250, Ignore Condition);
		Global.dodgeball_score_buffer = True;
		Wait(1, Ignore Condition);
		Global.dodgeball_score_buffer = False;
	}
}

rule("dodgeball player init")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.gamemode == 6;
		Hero Of(Event Player) != Hero(Sigma);
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Set Status(Event Player, Null, Phased Out, 9999);
		Disallow Button(Event Player, Button(Secondary Fire));
		Start Forcing Player To Be Hero(Event Player, Hero(Sigma));
		Teleport(Event Player, Vector(Team Of(Event Player) == Team 1 ? 28 : -28, 154.880, 150 + (Slot Of(Event Player) % 2 == 0 ? 4 : -4)
			* Slot Of(Event Player)));
		Set Facing(Event Player, Team Of(Event Player) == Team 1 ? Right : Left, To World);
		Set Move Speed(Event Player, 200);
		Disallow Button(Event Player, Button(Ability 2));
		Stop Accelerating(Event Player);
		Wait(0.100, Ignore Condition);
		If(Index Of Array Value(All Players(Team Of(Event Player)), Event Player) <= 3);
			disabled Event Player.dodgeball_pos = World Vector Of(Vector(0, 1.500, 5), Event Player, Rotation And Translation);
			disabled Event Player.dodgeball_velocity = Vector(0, -0.001, 0);
			disabled Event Player.dodgeball_in_motion = True;
			Create In-World Text(Filtered Array(Players Within Radius(Event Player.dodgeball_pos, 8, All Teams, Off),
				!Event Player.dodgeball_holder), Custom String("hold {0} (right click) to pick up", String("Secondary Fire")),
				Event Player.dodgeball_pos, 1, Do Not Clip, Visible To Position and String, Color(White), Default Visibility);
			Event Player.dodgeball_in_world_text = Last Text ID;
			disabled Create Effect(All Players(All Teams), Sphere, Color(White), Event Player.dodgeball_pos, 1, Visible To Position and Radius);
			disabled Create In-World Text(All Players(All Teams), Custom String("holder: {0}, pos: {1}, vel: {2}", Event Player.dodgeball_holder,
				Event Player.dodgeball_pos, Event Player.dodgeball_velocity), Event Player.dodgeball_pos, 1, Do Not Clip,
				Visible To Position and String, Color(White), Default Visibility);
			disabled Teleport(Event Player, Vector(0, 154.880, 150 + Index Of Array Value(All Players(Team Of(Event Player)), Event Player) * (!(
				Index Of Array Value(All Players(Team Of(Event Player)), Event Player) % 2) ? 1 : -1)));
			Create Effect(Filtered Array(All Players(All Teams), !Event Player.dodgeball_holder), Sphere, Color(White), Event Player.dodgeball_pos,
				1.250, Visible To Position and Radius);
			Modify Player Variable(Event Player, dodgeball_effect, Append To Array, Last Created Entity);
			Create Effect(Filtered Array(All Players(All Teams), !Event Player.dodgeball_holder), Bad Aura, Color(White), Event Player.dodgeball_pos,
				1, Visible To Position and Radius);
			Modify Player Variable(Event Player, dodgeball_effect, Append To Array, Last Created Entity);
			Create Icon(Filtered Array(All Players(All Teams), !Event Player.dodgeball_holder), Event Player.dodgeball_pos, Circle,
				Visible To and Position, Color(White), True);
			Modify Player Variable(Event Player, dodgeball_effect, Append To Array, Last Created Entity);
			Create Effect(Filtered Array(All Players(All Teams), Team Of(Event Player.dodgeball_holder) == Team 1), Sphere, Team 1,
				Event Player.dodgeball_pos, 1.250, Visible To Position and Radius);
			Modify Player Variable(Event Player, dodgeball_effect, Append To Array, Last Created Entity);
			Create Effect(Filtered Array(All Players(All Teams), Team Of(Event Player.dodgeball_holder) == Team 1), Bad Aura, Team 1,
				Event Player.dodgeball_pos, 1, Visible To Position and Radius);
			Modify Player Variable(Event Player, dodgeball_effect, Append To Array, Last Created Entity);
			Create Icon(Filtered Array(All Players(All Teams), Team Of(Event Player.dodgeball_holder) == Team 1), Event Player.dodgeball_pos,
				Warning, Visible To and Position, Team 1, True);
			Modify Player Variable(Event Player, dodgeball_effect, Append To Array, Last Created Entity);
			Create Effect(Filtered Array(All Players(All Teams), Team Of(Event Player.dodgeball_holder) == Team 2), Sphere, Team 2,
				Event Player.dodgeball_pos, 1.250, Visible To Position and Radius);
			Modify Player Variable(Event Player, dodgeball_effect, Append To Array, Last Created Entity);
			Create Effect(Filtered Array(All Players(All Teams), Team Of(Event Player.dodgeball_holder) == Team 2), Bad Aura, Team 2,
				Event Player.dodgeball_pos, 1, Visible To Position and Radius);
			Modify Player Variable(Event Player, dodgeball_effect, Append To Array, Last Created Entity);
			Create Icon(Filtered Array(All Players(All Teams), Team Of(Event Player.dodgeball_holder) == Team 2), Event Player.dodgeball_pos,
				Warning, Visible To and Position, Team 2, True);
			Modify Player Variable(Event Player, dodgeball_effect, Append To Array, Last Created Entity);
			Wait(0.100, Ignore Condition);
			Event Player.dodgeball_activate = True;
		Else;
			Event Player.dodgeball_pos = Custom String("Have you ever heard the Tragedy of Darth Plagueis the Wise?");
			Event Player.dodgeball_in_motion = False;
			Event Player.dodgeball_activate = False;
	}
}

rule("Setup Arena dogg balllll")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Current Game Mode == Game Mode(Skirmish);
		Global.gamemode == 6;
	}

	actions
	{
		While(Global.arenaEffects != Empty Array);
			Destroy Effect(First Of(Global.arenaEffects));
			Modify Global Variable(arenaEffects, Remove From Array By Index, 0);
		End;
		Global.cliffBlue = Vector(30, 154.880, 130);
		Global.cliffRed = Vector(-30, 154.880, 130);
		Global.towerBlue = Vector(30, 154.880, 170);
		Global.towerRed = Vector(-30, 154.880, 170);
		Global.rowFraction = 0.066;
		Global.columnFraction = 0.100;
		Global.x = 0;
		While(Global.x <= 15);
			Global.a = Global.cliffBlue * (1 - Global.x * Global.rowFraction) + Global.cliffRed * Global.x * Global.rowFraction;
			Global.b = Global.towerBlue * (1 - Global.x * Global.rowFraction) + Global.towerRed * Global.x * Global.rowFraction;
			Create Beam Effect(All Players(All Teams), Good Beam, Global.a, Global.b, Color(Purple), Visible To);
			Modify Global Variable(arenaEffects, Append To Array, Last Created Entity);
			Global.x += 1;
		End;
		Global.z = 0;
		While(Global.z <= 10);
			Global.a_0 = Global.cliffBlue * (1 - Global.z * Global.columnFraction) + Global.towerBlue * Global.z * Global.columnFraction;
			Global.b_0 = Global.cliffRed * (1 - Global.z * Global.columnFraction) + Global.towerRed * Global.z * Global.columnFraction;
			Create Beam Effect(All Players(All Teams), Good Beam, Global.a_0, Global.b_0, Color(Purple), Visible To);
			Modify Global Variable(arenaEffects, Append To Array, Last Created Entity);
			Global.z += 1;
		End;
		Create Effect(All Players(All Teams), Orb, Color(Orange), Vector(Empty Array, 161.500, 150), 0.250, Visible To);
		Create Beam Effect(All Players(All Teams), Bad Beam, Global.cliffBlue + Left * 0.001, Global.cliffBlue + Up * 16.120, Color(Aqua),
			Visible To);
		Modify Global Variable(arenaEffects, Append To Array, Last Created Entity);
		Create Beam Effect(All Players(All Teams), Bad Beam, Global.cliffRed + Left * 0.001, Global.cliffRed + Up * 16.120, Color(Aqua),
			Visible To);
		Modify Global Variable(arenaEffects, Append To Array, Last Created Entity);
		Create Beam Effect(All Players(All Teams), Bad Beam, Global.towerBlue + Left * 0.001, Global.towerBlue + Up * 16.120, Color(Aqua),
			Visible To);
		Modify Global Variable(arenaEffects, Append To Array, Last Created Entity);
		Create Beam Effect(All Players(All Teams), Bad Beam, Global.towerRed + Left * 0.001, Global.towerRed + Up * 16.120, Color(Aqua),
			Visible To);
		Modify Global Variable(arenaEffects, Append To Array, Last Created Entity);
		Create Beam Effect(All Players(All Teams), Good Beam, Global.cliffRed + Up * 16.120, Global.cliffBlue + Up * 16.120, Color(Purple),
			Visible To);
		Modify Global Variable(arenaEffects, Append To Array, Last Created Entity);
		Create Beam Effect(All Players(All Teams), Bad Beam, Global.cliffRed + Up * 16.120, Global.towerRed + Up * 16.120, Team 2,
			Visible To);
		Modify Global Variable(arenaEffects, Append To Array, Last Created Entity);
		Create Beam Effect(All Players(All Teams), Bad Beam, Global.towerBlue + Up * 16.120, Global.cliffBlue + Up * 16.120, Team 1,
			Visible To);
		Modify Global Variable(arenaEffects, Append To Array, Last Created Entity);
		Create Beam Effect(All Players(All Teams), Good Beam, Global.towerBlue + Up * 16.120, Global.towerRed + Up * 16.120, Color(Purple),
			Visible To);
		Modify Global Variable(arenaEffects, Append To Array, Last Created Entity);
	}
}

rule("dodgeball pickup")
{
	event
	{
		Ongoing - Each Player;
		All;
		Sigma;
	}

	conditions
	{
		Event Player.dodgeball_holder == False;
		Is True For Any(Players Within Radius(Event Player.dodgeball_pos, 8, All Teams, Off), Is Button Held(Current Array Element,
			Button(Secondary Fire)) && !Current Array Element.sigma_pickup_buffer && !Current Array Element.is_holding && Is In View Angle(
			Current Array Element, Event Player.dodgeball_pos, 45)) == True;
		Global.dodgeball_scoring == False;
	}

	actions
	{
		Event Player.dodgeball_holder = First Of(Sorted Array(Filtered Array(All Players(All Teams), Is Button Held(Current Array Element,
			Button(Secondary Fire)) && !Current Array Element.sigma_pickup_buffer && !Current Array Element.is_holding), Distance Between(
			Current Array Element, Event Player.dodgeball_pos)));
		Abort If(Event Player.dodgeball_holder == Null);
		Chase Player Variable At Rate(Event Player, dodgeball_pos, World Vector Of(Vector(0, 1.500, 0), Event Player.dodgeball_holder,
			Rotation And Translation) + Facing Direction Of(Event Player.dodgeball_holder) * 2, 1000, Destination and Rate);
		Event Player.dodgeball_held = True;
		Event Player.dodgeball_in_motion = False;
		Event Player.dodgeball_holder.is_holding = True;
	}
}

rule("dodgeball drop - release")
{
	event
	{
		Ongoing - Each Player;
		All;
		Sigma;
	}

	conditions
	{
		Is Button Held(Event Player.dodgeball_holder, Button(Secondary Fire)) == False;
		Event Player.dodgeball_holder != False;
		Event Player.dodgeball_holder.is_charging == False;
		Event Player.dodgeball_thrown == False;
	}

	actions
	{
		Call Subroutine(dodgeball_drop);
	}
}

rule("dodgeball bounce")
{
	event
	{
		Ongoing - Each Player;
		All;
		Sigma;
	}

	conditions
	{
		Event Player.dodgeball_held == False;
		(X Component Of(Event Player.dodgeball_pos) < -30 || X Component Of(Event Player.dodgeball_pos) > 30 || Y Component Of(
			Event Player.dodgeball_pos) < 156 || Y Component Of(Event Player.dodgeball_pos) > 171 || Z Component Of(
			Event Player.dodgeball_pos) < 130 || Z Component Of(Event Player.dodgeball_pos) > 170) == True;
	}

	actions
	{
		If(Distance Between(Vector(0, 0, 0), Event Player.dodgeball_velocity) > 10);
			Play Effect(All Players(All Teams), Good Explosion, Color(Purple), Event Player.dodgeball_pos, 2);
			Play Effect(All Players(All Teams), Ring Explosion Sound, Color(White), Event Player.dodgeball_pos, 100);
		End;
		If(X Component Of(Event Player.dodgeball_pos) <= -29.900);
			Event Player.dodgeball_bounce_normal = Left;
		Else If(X Component Of(Event Player.dodgeball_pos) >= 29.900);
			Event Player.dodgeball_bounce_normal = Right;
		Else If(Y Component Of(Event Player.dodgeball_pos) <= 156.100);
			Event Player.dodgeball_bounce_normal = Up;
		Else If(Y Component Of(Event Player.dodgeball_pos) >= 170.900);
			Event Player.dodgeball_bounce_normal = Down;
		Else If(Z Component Of(Event Player.dodgeball_pos) <= 130.100);
			Event Player.dodgeball_bounce_normal = Forward;
		Else If(Z Component Of(Event Player.dodgeball_pos) >= 169.900);
			Event Player.dodgeball_bounce_normal = Backward;
		End;
		Event Player.dodgeball_bounce += 1;
		If(Distance Between(Vector(0, 0, 0), Event Player.dodgeball_velocity) > 2);
			If(Event Player.dodgeball_bounce_normal == Up);
				Event Player.dodgeball_holder = False;
				Event Player.dodgeball_thrown = False;
			End;
			Event Player.dodgeball_velocity = Vector Towards(Event Player.dodgeball_pos,
				Event Player.dodgeball_pos + Event Player.dodgeball_velocity + Event Player.dodgeball_bounce_normal * Cosine From Degrees(
				Angle Between Vectors(Event Player.dodgeball_bounce_normal, Event Player.dodgeball_velocity * -1)) * Distance Between(Vector(0,
				0, 0), Event Player.dodgeball_velocity) * 2) * 0.700;
		Else;
			disabled Event Player.dodgeball_in_motion = False;
			Event Player.dodgeball_holder = False;
			Event Player.dodgeball_thrown = False;
			disabled Event Player.dodgeball_velocity = Vector(0, 0, 0);
		End;
		disabled If(Event Player.dodgeball_bounce > 0);
		disabled End;
		Wait(0.250, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("dodgeball charge")
{
	event
	{
		Ongoing - Each Player;
		All;
		Sigma;
	}

	conditions
	{
		Is Button Held(Event Player.dodgeball_holder, Button(Primary Fire)) == True;
		Event Player.dodgeball_held == True;
	}

	actions
	{
		Set Move Speed(Event Player.dodgeball_holder, 100);
		Event Player.dodgeball_charge = 10;
		Chase Player Variable At Rate(Event Player, dodgeball_charge, 50, 65, Destination and Rate);
		Cancel Primary Action(Event Player.dodgeball_holder);
		Allow Button(Event Player.dodgeball_holder, Button(Ability 2));
		Press Button(Event Player.dodgeball_holder, Button(Ability 2));
		Event Player.dodgeball_holder.is_charging = True;
		Wait(0.250, Ignore Condition);
		Disallow Button(Event Player.dodgeball_holder, Button(Ability 2));
	}
}

rule("dodgeball launch")
{
	event
	{
		Ongoing - Each Player;
		All;
		Sigma;
	}

	conditions
	{
		(!Is Button Held(Event Player.dodgeball_holder, Button(Primary Fire)) || Event Player.dodgeball_charge >= 50) == True;
		Event Player.dodgeball_charge != 0;
		Event Player.dodgeball_holder.is_charging == True;
	}

	actions
	{
		Stop Chasing Player Variable(Event Player, dodgeball_pos);
		Cancel Primary Action(Event Player.dodgeball_holder);
		Event Player.dodgeball_velocity = Normalize(Facing Direction Of(Event Player.dodgeball_holder) + Up * 0.150)
			* Event Player.dodgeball_charge;
		Event Player.dodgeball_held = False;
		Event Player.dodgeball_in_motion = True;
		Event Player.dodgeball_bounce = 0;
		Event Player.dodgeball_charge = 0;
		Event Player.dodgeball_thrown = True;
		Set Move Speed(Event Player.dodgeball_holder, 200);
		disabled Wait(0.500, Ignore Condition);
		Event Player.dodgeball_holder.is_charging = False;
		Event Player.dodgeball_holder.is_holding = False;
		Stop Holding Button(Event Player, Button(Secondary Fire));
		Disallow Button(Event Player, Button(Secondary Fire));
		Set Status(Event Player.dodgeball_holder, Null, Hacked, 1);
		Event Player.dodgeball_holder.sigma_pickup_buffer = 1;
		Chase Player Variable At Rate(Event Player.dodgeball_holder, sigma_pickup_buffer, 0, 1, Destination and Rate);
		If(Is Dead(Event Player.dodgeball_holder));
			Event Player.dodgeball_velocity = Down;
	}
}

rule("dodgeball motion")
{
	event
	{
		Ongoing - Each Player;
		All;
		Sigma;
	}

	conditions
	{
		Event Player.dodgeball_in_motion == True;
	}

	actions
	{
		Event Player.dodgeball_velocity += Down * 20 * 0.016;
		Event Player.dodgeball_pos += Event Player.dodgeball_velocity * 0.016;
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("sigma hand stretch start")
{
	event
	{
		Ongoing - Each Player;
		All;
		Sigma;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Secondary Fire)) == True;
		Event Player.is_charging == False;
		Event Player.sigma_pickup_buffer <= 0;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Set Invisible(Event Player, All);
		Start Camera(Event Player, Event Player.sigma_pos + Vector Towards(Position Of(Event Player), Eye Position(Event Player)),
			Event Player.sigma_pos + Vector Towards(Position Of(Event Player), Eye Position(Event Player)) + Facing Direction Of(
			Event Player), 0);
		Set Ability Cooldown(Event Player, Button(Secondary Fire), 0);
		Wait(0.016, Ignore Condition);
		Allow Button(Event Player, Button(Secondary Fire));
		Start Holding Button(Event Player, Button(Secondary Fire));
		Event Player.sigma_pos = Position Of(Event Player);
		Teleport(Event Player, Vector(10000, 10000, 10000));
		Wait(0.084, Ignore Condition);
		Teleport(Event Player, Event Player.sigma_pos);
		Stop Camera(Event Player);
		Set Invisible(Event Player, None);
	}
}

rule("sigma hand stretch end")
{
	event
	{
		Ongoing - Each Player;
		All;
		Sigma;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Secondary Fire)) == False;
		Event Player.is_charging == False;
	}

	actions
	{
		Stop Holding Button(Event Player, Button(Secondary Fire));
		Disallow Button(Event Player, Button(Secondary Fire));
		Set Status(Event Player, Null, Hacked, 1);
		Event Player.sigma_pickup_buffer = 1;
		Chase Player Variable At Rate(Event Player, sigma_pickup_buffer, 0, 1, Destination and Rate);
	}
}

rule("sigma shorter succ")
{
	event
	{
		Ongoing - Each Player;
		All;
		Sigma;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Wait(0.400, Ignore Condition);
		Cancel Primary Action(Event Player);
	}
}

rule("dodgeball player collide")
{
	event
	{
		Ongoing - Each Player;
		All;
		Sigma;
	}

	conditions
	{
		Event Player.dodgeball_holder != False;
		Event Player.dodgeball_held == False;
		Is True For Any(All Living Players(Opposite Team Of(Team Of(Event Player.dodgeball_holder))), Distance Between(
			Event Player.dodgeball_pos, Eye Position(Current Array Element)) <= 1.250 || Distance Between(Event Player.dodgeball_pos,
			World Vector Of(Vector(0, 1.300, 0), Current Array Element, Rotation And Translation)) <= 2 || Distance Between(
			Event Player.dodgeball_pos, Position Of(Current Array Element)) <= 1.250) == True;
	}

	actions
	{
		Event Player.dodgeball_victim = First Of(Sorted Array(All Living Players(Opposite Team Of(Team Of(Event Player.dodgeball_holder))),
			Distance Between(Current Array Element, Event Player.dodgeball_pos)));
		Abort If(!Array Contains(All Living Players(All Teams), Event Player.dodgeball_victim));
		Event Player.dodgeball_velocity = ((Team Of(Event Player.dodgeball_holder) == Team 1 ? Left : Right) + Up * 0.250) * 30;
		Kill(Event Player.dodgeball_victim, Event Player.dodgeball_holder);
		Small Message(All Players(All Teams), Custom String("{0} took out {1} {2}", Event Player.dodgeball_holder,
			Event Player.dodgeball_victim, Event Player.dodgeball_bounce > 0 ? Custom String("with a bounced trick shot!!")
			: Custom String("with a dodgeball!")));
		Play Effect(All Players(All Teams), Bad Explosion, Color(Orange), Event Player.dodgeball_victim, 5);
		Play Effect(All Players(All Teams), Explosion Sound, Color(Orange), Event Player.dodgeball_victim, 200);
		Play Effect(All Players(All Teams), Ring Explosion, Color(Orange), Event Player.dodgeball_holder, 10);
		Play Effect(All Players(All Teams), Buff Explosion Sound, Color(Orange), Event Player.dodgeball_holder, 200);
		Wait(0.100, Ignore Condition);
		Event Player.dodgeball_bounce = 0;
	}
}

rule("dodgeball catch")
{
	event
	{
		Ongoing - Each Player;
		All;
		Sigma;
	}

	conditions
	{
		Event Player.dodgeball_holder != False;
		Event Player.dodgeball_holder.dodgeball_held == False;
		Is True For Any(Filtered Array(Players Within Radius(Event Player.dodgeball_pos, 5, Opposite Team Of(Team Of(
			Event Player.dodgeball_holder)), Off), Is In View Angle(Current Array Element, Event Player.dodgeball_pos, 45)),
			Is Using Ability 1(Current Array Element)) == True;
	}

	actions
	{
		Event Player.dodgeball_catcher = First Of(Sorted Array(Filtered Array(Players Within Radius(Event Player.dodgeball_pos, 6,
			Opposite Team Of(Team Of(Event Player.dodgeball_holder)), Off), Is In View Angle(Current Array Element,
			Event Player.dodgeball_pos, 45) && Is Using Ability 1(Current Array Element)), Distance Between(Event Player.dodgeball_pos,
			Current Array Element)));
		Kill(Event Player.dodgeball_holder, Event Player.dodgeball_catcher);
		Event Player.dodgeball_velocity = Up * 15;
		Small Message(All Players(All Teams), Custom String("{0} caught {1}'s dodgeball in the air!", Event Player.dodgeball_catcher,
			Event Player.dodgeball_holder));
		Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Aqua), Event Player.dodgeball_holder, 5);
		Play Effect(All Players(All Teams), Debuff Impact Sound, Color(Orange), Event Player.dodgeball_holder, 200);
		Play Effect(All Players(All Teams), Ring Explosion, Color(Aqua), Event Player.dodgeball_catcher, 10);
		Play Effect(All Players(All Teams), Buff Impact Sound, Color(Orange), Event Player.dodgeball_catcher, 200);
		Event Player.dodgeball_thrown = False;
		Wait(0.100, Ignore Condition);
		Event Player.dodgeball_holder = False;
	}
}

rule("dodgeball out of bounds")
{
	event
	{
		Ongoing - Each Player;
		All;
		Sigma;
	}

	conditions
	{
		Event Player.dodgeball_holder.dodgeball_held == False;
		(X Component Of(Event Player.dodgeball_pos) < -30 || X Component Of(Event Player.dodgeball_pos) > 30 || Y Component Of(
			Event Player.dodgeball_pos) < 155.900 || Y Component Of(Event Player.dodgeball_pos) > 171 || Z Component Of(
			Event Player.dodgeball_pos) < 130 || Z Component Of(Event Player.dodgeball_pos) > 170) == True;
		Event Player.dodgeball_activate == True;
	}

	actions
	{
		Wait(0.016, Ignore Condition);
		Abort If Condition Is False;
		Call Subroutine(dodgeball_clamp_in_range);
		Loop If Condition Is True;
	}
}

rule("sigma fake walls")
{
	event
	{
		Ongoing - Each Player;
		All;
		Sigma;
	}

	conditions
	{
		(X Component Of(Position Of(Event Player)) < -30 || X Component Of(Position Of(Event Player)) > 30 || Z Component Of(Position Of(
			Event Player)) < 130 || Z Component Of(Position Of(Event Player)) > 170) == True;
		Y Component Of(Position Of(Event Player)) < 200;
	}

	actions
	{
		Event Player.sigma_normal = Vector(0, 0, 0);
		disabled Event Player.sigma_x_comp = X Component Of(Position Of(Event Player));
		disabled Event Player.sigma_z_comp = Z Component Of(Position Of(Event Player));
		disabled If(X Component Of(Position Of(Event Player)) <= -29.900);
		disabled Event Player.sigma_x_comp = -29.900;
		disabled Else If(X Component Of(Position Of(Event Player)) >= 29.900);
		disabled Event Player.sigma_x_comp = 29.900;
		disabled End;
		disabled If(Z Component Of(Position Of(Event Player)) <= 130.100);
		disabled Event Player.sigma_z_comp = 130.100;
		disabled Else If(Z Component Of(Position Of(Event Player)) >= 169.900);
		disabled Event Player.sigma_z_comp = 169.900;
		disabled End;
		disabled Teleport(Event Player, Vector(Event Player.sigma_x_comp, Y Component Of(Position Of(Event Player)), Event Player.sigma_z_comp));
		disabled Wait(0.100, Ignore Condition);
		disabled Loop If Condition Is True;
		If(X Component Of(Position Of(Event Player)) <= -29.900);
			Event Player.sigma_normal += Left;
		Else If(X Component Of(Position Of(Event Player)) >= 29.900);
			Event Player.sigma_normal += Right;
		End;
		If(Z Component Of(Position Of(Event Player)) <= 130.100);
			Event Player.sigma_normal += Forward;
		Else If(Z Component Of(Position Of(Event Player)) >= 169.900);
			Event Player.sigma_normal += Backward;
		End;
		Apply Impulse(Event Player, Event Player.sigma_normal, Speed Of(Event Player), To World, Cancel Contrary Motion);
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
		Apply Impulse(Event Player, Event Player.sigma_normal * -1, 0.001, To World, Cancel Contrary Motion);
	}
}

rule("dodgeball rest")
{
	event
	{
		Ongoing - Each Player;
		All;
		Sigma;
	}

	conditions
	{
		Distance Between(Vector(0, 0, 0), Event Player.dodgeball_velocity) < 2;
		Y Component Of(Event Player.dodgeball_pos) < 156.100;
		Event Player.dodgeball_in_motion == True;
	}

	actions
	{
		Event Player.dodgeball_in_motion = False;
		Event Player.dodgeball_velocity = Vector(0, 0, 0);
	}
}

rule("dodgeball drop subr")
{
	event
	{
		Subroutine;
		dodgeball_drop;
	}

	actions
	{
		Event Player.dodgeball_holder.is_holding = False;
		Stop Chasing Player Variable(Event Player, dodgeball_pos);
		Event Player.dodgeball_held = False;
		Event Player.dodgeball_velocity = Vector(0, -0.100, 0);
		Event Player.dodgeball_in_motion = True;
		Event Player.dodgeball_bounce = 0;
		Event Player.dodgeball_holder = False;
	}
}

rule("dodgeball drop - on death")
{
	event
	{
		Ongoing - Each Player;
		All;
		Sigma;
	}

	conditions
	{
		Is Dead(Event Player.dodgeball_holder) == True;
		Event Player.is_holding == True;
	}

	actions
	{
		Call Subroutine(dodgeball_drop);
	}
}

rule("sigma too high")
{
	event
	{
		Ongoing - Each Player;
		All;
		Sigma;
	}

	conditions
	{
		Y Component Of(Position Of(Event Player)) > 200;
	}

	actions
	{
		Wait(0.250, Abort When False);
		Teleport(Event Player, Vector(0, 154.880, 150));
		Loop If Condition Is True;
	}
}

rule("dodgeball kill count")
{
	event
	{
		Player Died;
		All;
		All;
	}

	conditions
	{
		Global.gamemode == 6;
	}

	actions
	{
		If(Team Of(Event Player) == Team 1);
			Global.dodgeball_red_kills += 1;
		Else;
			Global.dodgeball_blue_kills += 1;
	}
}

rule("dodgeball clean up -- per player")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.gamemode != 6;
		Hero Of(Event Player) != Hero(Reinhardt);
		Has Spawned(Event Player) == True;
		!Event Player.isBall == True;
	}

	actions
	{
		Clear Status(Event Player, Phased Out);
		Start Forcing Player To Be Hero(Event Player, Hero(Reinhardt));
		Allow Button(Event Player, Button(Secondary Fire));
		Allow Button(Event Player, Button(Ability 2));
		Destroy In-World Text(Event Player.dodgeball_in_world_text);
		While(Event Player.dodgeball_effect != Empty Array);
			Destroy Icon(First Of(Event Player.dodgeball_effect));
			Destroy Effect(First Of(Event Player.dodgeball_effect));
			Modify Player Variable(Event Player, dodgeball_effect, Remove From Array By Index, 0);
		End;
		Set Invisible(Event Player, None);
	}
}

rule("dodgeball clean up -- global")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.gamemode != 6;
	}

	actions
	{
		While(Global.dodgeball_huds != Empty Array);
			Destroy HUD Text(First Of(Global.dodgeball_huds));
			Modify Global Variable(dodgeball_huds, Remove From Array By Index, 0);
		End;
	}
}

rule("dodgeball score increase - team 1")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.dodgeball_blue_kills >= 1 * Count Of(Filtered Array(All Players(Team 1), Has Spawned(Current Array Element)));
		Global.dodgeball_blue_kills != 0;
		Global.dodgeball_scoring == False;
		Global.gamemode == 6;
	}

	actions
	{
		Global.dodgeball_scoring = True;
		Global.blueScore += 1;
		Big Message(All Players(All Teams), Custom String("Team 1 wins!"));
		Play Effect(All Players(Team 1), Buff Impact Sound, Team 1, Vector(0, 161.500, 150), 200);
		Play Effect(All Players(Team 2), Debuff Impact Sound, Team 2, Vector(0, 161.500, 150), 200);
		Play Effect(All Players(All Teams), Good Explosion, Team 1, Vector(0, 161.500, 150), 30);
		Play Effect(All Players(All Teams), Ring Explosion, Team 1, Vector(0, 161.500, 150), 60);
		Call Subroutine(dodgeball_reset);
	}
}

rule("dodgeball score increase - team 2")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.dodgeball_red_kills >= 1 * Count Of(Filtered Array(All Players(Team 2), Has Spawned(Current Array Element)));
		Global.dodgeball_red_kills != 0;
		Global.dodgeball_scoring == False;
		Global.gamemode == 6;
	}

	actions
	{
		Global.dodgeball_scoring = True;
		Global.redScore += 1;
		Big Message(All Players(All Teams), Custom String("Team 2 wins!"));
		Play Effect(All Players(Team 2), Buff Impact Sound, Team 2, Vector(0, 161.500, 150), 200);
		Play Effect(All Players(Team 1), Debuff Impact Sound, Team 2, Vector(0, 161.500, 150), 200);
		Play Effect(All Players(All Teams), Good Explosion, Team 2, Vector(0, 161.500, 150), 30);
		Play Effect(All Players(All Teams), Ring Explosion, Team 2, Vector(0, 161.500, 150), 60);
		Call Subroutine(dodgeball_reset);
	}
}

rule("dodgeball reset subr")
{
	event
	{
		Subroutine;
		dodgeball_reset;
	}

	actions
	{
		Global.dodgeball_static_timer = 15;
		Stop Chasing Global Variable(dodgeball_static_timer);
		Set Slow Motion(25);
		Wait(1, Ignore Condition);
		Set Slow Motion(100);
		Global.dodgeball_score_buffer = True;
		Wait(3, Ignore Condition);
		Global.dodgeball_blue_kills = 0;
		Global.dodgeball_red_kills = 0;
		Big Message(All Players(All Teams), Custom String("New round: Start!"));
		Chase Global Variable At Rate(dodgeball_static_timer, 0, 1, Destination and Rate);
		Global.dodgeball_scoring = False;
		Wait(1, Ignore Condition);
		Global.dodgeball_score_buffer = False;
	}
}

rule("dodgeball positions reset")
{
	event
	{
		Ongoing - Each Player;
		All;
		Sigma;
	}

	conditions
	{
		Event Player.dodgeball_activate == True;
		Global.dodgeball_scoring == False;
		Global.gamemode == 6;
		Global.dodgeball_score_buffer == True;
		Y Component Of(Position Of(Event Player)) > 154.800;
	}

	actions
	{
		Call Subroutine(dodgeball_drop);
		Event Player.dodgeball_pos = Vector(Team Of(Event Player) == Team 1 ? 10 : -10, 156, 150 + (Slot Of(Event Player)
			% 2 == 0 ? 4 : -4) * Slot Of(Event Player));
		Event Player.dodgeball_velocity = Vector(0, -0.001, 0);
		Event Player.dodgeball_in_motion = True;
		Play Effect(All Players(All Teams), Good Explosion, Color(Purple), Event Player.dodgeball_pos, 2);
		Play Effect(All Players(All Teams), Buff Impact Sound, Color(White), Event Player.dodgeball_pos, 100);
	}
}

rule("dodgeball clamp in range subr")
{
	event
	{
		Subroutine;
		dodgeball_clamp_in_range;
	}

	actions
	{
		Event Player.dodgeball_x_comp = X Component Of(Event Player.dodgeball_pos);
		Event Player.dodgeball_y_comp = Y Component Of(Event Player.dodgeball_pos);
		Event Player.dodgeball_z_comp = Z Component Of(Event Player.dodgeball_pos);
		If(X Component Of(Event Player.dodgeball_pos) <= -29.900);
			Event Player.dodgeball_x_comp = -29;
		Else If(X Component Of(Event Player.dodgeball_pos) >= 29.900);
			Event Player.dodgeball_x_comp = 29;
		End;
		If(Y Component Of(Event Player.dodgeball_pos) <= 155.900);
			Event Player.dodgeball_y_comp = 156;
		Else If(Y Component Of(Event Player.dodgeball_pos) >= 170.900);
			Event Player.dodgeball_y_comp = 170;
		End;
		If(Z Component Of(Event Player.dodgeball_pos) <= 130.100);
			Event Player.dodgeball_z_comp = 131;
		Else If(Z Component Of(Event Player.dodgeball_pos) >= 169.900);
			Event Player.dodgeball_z_comp = 169;
		End;
		Event Player.dodgeball_pos = Vector(Event Player.dodgeball_x_comp, Event Player.dodgeball_y_comp, Event Player.dodgeball_z_comp);
	}
}

rule("dodgeball out of bounds severe")
{
	event
	{
		Ongoing - Each Player;
		All;
		Sigma;
	}

	conditions
	{
		Event Player.dodgeball_holder.dodgeball_held == False;
		(X Component Of(Event Player.dodgeball_pos) < -30 || X Component Of(Event Player.dodgeball_pos) > 30 || Y Component Of(
			Event Player.dodgeball_pos) < 155.900 || Y Component Of(Event Player.dodgeball_pos) > 171 || Z Component Of(
			Event Player.dodgeball_pos) < 130 || Z Component Of(Event Player.dodgeball_pos) > 170) == True;
		Event Player.dodgeball_activate == True;
	}

	actions
	{
		Wait(1, Ignore Condition);
		Abort If Condition Is False;
		Call Subroutine(dodgeball_clamp_in_range);
		Loop If Condition Is True;
	}
}

disabled rule("dodgeball ball hogging check")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Count Of(Filtered Array(All Players(All Teams), Current Array Element.dodgeball_activate && (
			Current Array Element.dodgeball_held ? Team Of(Current Array Element.dodgeball_holder) == Team 1 : X Component Of(
			Current Array Element.dodgeball_pos) > 0) && True)) != Global.dodgeball_static_check;
		Global.gamemode == 6;
	}

	actions
	{
		Global.dodgeball_static_timer = 15;
		Chase Global Variable At Rate(dodgeball_static_timer, 0, 1, Destination and Rate);
		Global.dodgeball_static_check = Count Of(Filtered Array(All Players(All Teams), Current Array Element.dodgeball_activate && (
			Current Array Element.dodgeball_held ? Team Of(Current Array Element.dodgeball_holder) == Team 1 : X Component Of(
			Current Array Element.dodgeball_pos) > 0) && True));
	}
}

disabled rule("dodgeball ball hogging restart")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.dodgeball_static_timer <= 5;
		Global.gamemode == 6;
	}

	actions
	{
		Small Message(All Players(All Teams), Custom String("too inactive! dodgeballs resetting in 5..."));
		Wait(1, Abort When False);
		Small Message(All Players(All Teams), Custom String("4..."));
		Wait(1, Abort When False);
		Small Message(All Players(All Teams), Custom String("3..."));
		Wait(1, Abort When False);
		Small Message(All Players(All Teams), Custom String("2..."));
		Wait(1, Abort When False);
		Small Message(All Players(All Teams), Custom String("1..."));
		Wait(1, Abort When False);
		Small Message(All Players(All Teams), Custom String("all dodgeballs reset!"));
		Global.dodgeball_score_buffer = True;
		Wait(0.250, Ignore Condition);
		Global.dodgeball_score_buffer = False;
	}
}