variables
{
	global:
		0: _extendedGlobalCollection
		2: started
		3: origin
		4: gamemode
		5: arenaEffects
		6: ball1
		7: ball2
		8: ballIsOnStand
		9: tpFrom
		10: tpTo
		11: rootBall
		12: thrower
		13: throwType
		14: ball
		15: ballReady
		16: fuse
		17: owb
		18: goalEffects
		19: blueScore
		20: redScore
		21: totalScore
		22: blueGoalSize
		23: redGoalSize
		24: scoreboardOrder
		25: lasersReady
		26: rotateLasers
		27: rotationSpeed
		28: laserLength
		29: boundaryLength
		30: midpoint
		31: laser1Rot
		32: laser2Rot
		33: laser3Rot
		34: outOfRange
		35: volleyball
		36: detonationCounter
		37: detonationTime
		38: isCountingDown
		39: onTeam
		40: counterTexts
		41: ballOnGround
		42: xAxisWalls
		43: zAxisWalls
		44: cellStates
		45: toVisitX
		46: toVisitY
		47: generateStep
		48: dirFlag
		49: navigator
		50: navigateTo
		51: walkPath
		52: beamId
		53: cliffBlue
		54: cliffRed
		55: towerBlue
		56: towerRed
		57: rowFraction
		58: columnFraction
		59: x
		60: a
		61: b
		62: z
		63: a_0
		64: b_0
		65: i
		66: i_0
		67: nearest
		68: team
		69: nearest_0
		70: team_0
		71: fraction
		72: i_1
		73: intersecting
		74: line1
		75: line2
		76: knockPlayers
		77: i_2
		78: i_3
		79: initialX
		80: initialY
		81: cellCheck
		82: xi
		83: cellCheck_0
		84: zi
		85: px
		86: pz
		87: aStarCheck
		88: visited
		89: _classIndexes
		90: dodgeball_huds
		91: dodgeball_blue_kills
		92: dodgeball_red_kills
		93: dodgeball_scoring
		94: dodgeball_score_buffer
		95: dodgeball_static_check
		96: dodgeball_static_timer

	player:
		0: _extendedPlayerCollection
		1: isWorkingDummy
		2: chargeStart
		3: arrowAnimation
		4: arrowAnimation2
		5: arrowEffects
		6: knockedFrom
		7: force
		8: heightOffset
		9: healOverTime
		10: isBall
		11: lastDamage
		12: blueSide
		13: cam
		14: cameraPos
		15: cameraHUD
		16: fuseEffect
		17: inExplosionRange
		18: closest
		19: storeFacing
		20: dodgeball_charge
		21: dodgeball_holder
		22: dodgeball_pos
		23: dodgeball_velocity
		24: sigma_pos
		25: sigma_pickup_buffer
		26: is_charging
		27: dodgeball_thrown
		28: dodgeball_held
		29: dodgeball_effect
		30: dodgeball_bounce_normal
		31: dodgeball_victim
		32: dodgeball_bounce
		33: dodgeball_catcher
		34: dodgeball_in_motion
		35: sigma_x_comp
		36: sigma_z_comp
		37: dodgeball_x_comp
		38: is_holding
		39: dodgeball_z_comp
		40: dodgeball_y_comp
		41: dodgeball_in_world_text
		42: sigma_normal
		43: dodgeball_activate
}

subroutines
{
	0: respawnBall
	1: ChaseGoalEffects
	2: DestroyCounterText
	3: dodgeball_drop
	4: dodgeball_reset
	5: dodgeball_clamp_in_range
}

rule("Initial Global")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.started = False;
		Global.origin = Vector(-0.180, 154.880, 60);
		Global.gamemode = 0;
		Global.arenaEffects = Empty Array;
		Global._extendedGlobalCollection[1] = 150;
		Global.ballIsOnStand = True;
		Global.thrower = Null;
		Global.throwType = 0;
		Global._extendedGlobalCollection[5] = 0;
		Global.owb = Vector(-0.007, 0, -1.000);
		Global.blueScore = 0;
		Global.redScore = 0;
		Global.totalScore = 0;
		Global.scoreboardOrder = 0;
		Global.lasersReady = False;
		Global.rotateLasers = False;
		Global.rotationSpeed = 0;
		Global.laserLength = 0;
		Global.boundaryLength = 50;
		Global._extendedGlobalCollection[11] = 0;
		Global._extendedGlobalCollection[12] = 0;
		Global.xAxisWalls = Empty Array;
		Global.zAxisWalls = Empty Array;
		Global.cellStates = Empty Array;
		Global.toVisitX = Empty Array;
		Global.toVisitY = Empty Array;
		Global.generateStep = 0;
		Global._extendedGlobalCollection[15] = 0;
		Global.dirFlag = Array(1, 2, 4, 8);
		Global._extendedGlobalCollection[17] = Array(0, 1, 0, -1);
		Global._extendedGlobalCollection[18] = Array(1, 0, -1, 0);
		Global.walkPath = Empty Array;
		Global._extendedGlobalCollection[19] = False;
		Global._classIndexes[1000] = 0;
	}
}

rule("Initial Player")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	actions
	{
		Event Player.chargeStart = Null;
		Event Player.arrowAnimation = 0;
		Event Player.arrowAnimation2 = 0;
		Event Player.knockedFrom = Null;
		Event Player._extendedPlayerCollection[1] = True;
		Event Player.blueSide = True;
		Event Player.cam = False;
	}
}

rule("Respawn Ball")
{
	event
	{
		Subroutine;
		respawnBall;
	}

	actions
	{
		Global.ballReady = False;
		Cancel Primary Action(Filtered Array(All Players(All Teams), Hero Of(Current Array Element) == Hero(Reinhardt)
			&& Is Using Ability 1(Current Array Element) && Distance Between(Current Array Element, Global.rootBall) < 3));
		Wait(0.016, Ignore Condition);
		Teleport(Array(Global.ball1, Global.ball2), Objective Position(0));
		Respawn(Global.ball1);
		Respawn(Global.ball2);
		Wait(1, Ignore Condition);
		Teleport(Global.ball1, Vector(Empty Array, 161.500, 150) - Vector(Empty Array, 0.300, Empty Array));
		Teleport(Global.ball2, Vector(Empty Array, 161.500, 150) + Up);
		Wait(0.016, Ignore Condition);
		Global.ballIsOnStand = True;
		Global.ballReady = True;
	}
}

rule("Chase Goal Effects")
{
	event
	{
		Subroutine;
		ChaseGoalEffects;
	}

	actions
	{
		Global.blueGoalSize = 0;
		Global.redGoalSize = 0;
		Chase Global Variable At Rate(blueGoalSize, Max(1 - Distance Between(Global.rootBall, Position Of(Global.rootBall) + Dot Product(
			Vector(-0.900, 0.430, Empty Array), Position Of(Global.rootBall) - Vector(115.690, 156.680, 148.520)) * -1 / Dot Product(
			Vector(-0.900, 0.430, Empty Array), Vector(-0.900, 0.430, Empty Array)) * Vector(-0.900, 0.430, Empty Array)) / 15, 0) * 10,
			30, Destination and Rate);
		Chase Global Variable At Rate(redGoalSize, Max(1 - Distance Between(Global.rootBall, Position Of(Global.rootBall) + Dot Product(
			Vector(0.900, 0.430, Empty Array), Position Of(Global.rootBall) - Vector(-118.450, 156.680, 148.520)) * -1 / Dot Product(
			Vector(0.900, 0.430, Empty Array), Vector(0.900, 0.430, Empty Array)) * Vector(0.900, 0.430, Empty Array)) / 15, 0) * 10, 30,
			Destination and Rate);
	}
}

rule("Destroy Counter Text")
{
	event
	{
		Subroutine;
		DestroyCounterText;
	}

	actions
	{
		Destroy In-World Text(First Of(Global.counterTexts));
		Destroy In-World Text(Global.counterTexts[1]);
		Destroy In-World Text(Global.counterTexts[2]);
	}
}

rule("OSTW")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Create HUD Text(All Players(All Teams), Null, Null, Custom String("Created by Deltin with OSTW"), Left, -101, White, White, Orange,
			Visible To and String, Visible Always);
		Create HUD Text(All Players(All Teams), Null, Custom String("https://github.com/ItsDeltin/Overwatch-Script-To-Workshop"), Null,
			Left, -100, White, Blue, White, Visible To and String, Visible Always);
	}
}

rule("Generic Respawn")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
		Is Alive(Event Player) == True;
		!Event Player.isWorkingDummy == True;
	}

	actions
	{
		Event Player._extendedPlayerCollection[0] = True;
	}
}

rule("Respawn")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		First Of(Event Player._extendedPlayerCollection) == True;
		!Event Player.isWorkingDummy == True;
	}

	actions
	{
		Respawn(Event Player);
		Wait(0.016, Ignore Condition);
		If(Global.gamemode >= 0 && Global.gamemode <= 3);
			Event Player._extendedPlayerCollection[3] = Random Value In Array(Array(1, 2, 3, 4, 5));
			Teleport(Event Player, Vector(Team Of(Event Player) == Team 1 ? 60 : -60, 154.880,
				120 + 12 * Event Player._extendedPlayerCollection[3]));
		Else If(Global.gamemode == 5);
			Teleport(Event Player, Vector(-86.560 + Random Integer(0, 9) * 8, 154.880, 83.640 + Random Integer(0, 9) * 8));
		Else If(Global.gamemode == 6);
			Event Player._extendedPlayerCollection[4] = Random Value In Array(Array(1, 2, 3, 4, 5));
			Teleport(Event Player, Vector(Team Of(Event Player) == Team 1 ? 28 : -28, 154.880,
				140 + 4 * Event Player._extendedPlayerCollection[4]));
		End;
		Set Facing(Event Player, Direction Towards(Eye Position(Event Player), Vector(Empty Array, 161.500, 150)), To World);
		Event Player.blueSide = Team Of(Event Player) == Team 1;
		Event Player._extendedPlayerCollection[0] = False;
	}
}

rule("Setup Arena (Disable when using Maze)")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Current Game Mode == Game Mode(Skirmish);
		Global.gamemode != 6;
	}

	actions
	{
		While(Global.arenaEffects != Empty Array);
			Destroy Effect(First Of(Global.arenaEffects));
			Modify Global Variable(arenaEffects, Remove From Array By Index, 0);
		End;
		Create Beam Effect(All Players(All Teams), Bad Beam, Vector(-109.080, 158.440, 65.060), Vector(107.070, 158.440, 63.610), Orange,
			Visible To);
		Modify Global Variable(arenaEffects, Append To Array, Last Created Entity);
		Create Beam Effect(All Players(All Teams), Bad Beam, Vector(108.080, 158.440, 213.350), Vector(-108.070, 158.440, 214.810), Orange,
			Visible To);
		Modify Global Variable(arenaEffects, Append To Array, Last Created Entity);
		Create Beam Effect(All Players(All Teams), Bad Beam, Vector(108.080, 158.440, 213.350), Vector(107.070, 158.440, 63.610), Team 2,
			Visible To);
		Modify Global Variable(arenaEffects, Append To Array, Last Created Entity);
		Create Beam Effect(All Players(All Teams), Bad Beam, Vector(115.690, 158.440, 213.350), Vector(115.690, 158.440, 63.610), Team 2,
			Visible To);
		Modify Global Variable(arenaEffects, Append To Array, Last Created Entity);
		Create Beam Effect(All Players(All Teams), Bad Beam, Vector(-109.080, 158.440, 65.060), Vector(-108.070, 158.440, 214.810), Team 1,
			Visible To);
		Modify Global Variable(arenaEffects, Append To Array, Last Created Entity);
		Create Beam Effect(All Players(All Teams), Bad Beam, Vector(-118.450, 158.440, 65.060), Vector(-118.450, 158.440, 214.810), Team 1,
			Visible To);
		Modify Global Variable(arenaEffects, Append To Array, Last Created Entity);
		Global.cliffBlue = Vector(107.070, 154.880, 63.610);
		Global.cliffRed = Vector(-109.080, 154.880, 65.060);
		Global.towerBlue = Vector(108.080, 154.880, 213.350);
		Global.towerRed = Vector(-108.070, 154.880, 214.810);
		Global.rowFraction = 0.025;
		Global.columnFraction = 0.036;
		Global.x = 0;
		While(Global.x <= 40);
			Global.a = Global.cliffBlue * (1 - Global.x * Global.rowFraction) + Global.cliffRed * Global.x * Global.rowFraction;
			Global.b = Global.towerBlue * (1 - Global.x * Global.rowFraction) + Global.towerRed * Global.x * Global.rowFraction;
			Create Beam Effect(All Players(All Teams), Good Beam, Global.a, Global.b, Purple, Visible To);
			Modify Global Variable(arenaEffects, Append To Array, Last Created Entity);
			Global.x += 1;
		End;
		Global.z = 0;
		While(Global.z <= 28);
			Global.a_0 = Global.cliffBlue * (1 - Global.z * Global.columnFraction) + Global.towerBlue * Global.z * Global.columnFraction;
			Global.b_0 = Global.cliffRed * (1 - Global.z * Global.columnFraction) + Global.towerRed * Global.z * Global.columnFraction;
			Create Beam Effect(All Players(All Teams), Good Beam, Global.a_0, Global.b_0, Purple, Visible To);
			Modify Global Variable(arenaEffects, Append To Array, Last Created Entity);
			Global.z += 1;
		End;
		Create Effect(All Players(All Teams), Orb, Orange, Vector(Empty Array, 161.500, 150), 0.250, Visible To);
	}
}

disabled rule("I want to die")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Button Held(Host Player, Ultimate) == True;
	}

	actions
	{
		Create Dummy Bot(Hero(Reinhardt), Number of Players(Team 1) < 6 ? Team 1 : Team 2, -1, Position Of(Host Player),
			Facing Direction Of(Host Player));
		Last Created Entity.isWorkingDummy = True;
		Start Holding Button(Last Created Entity, Secondary Fire);
		Wait(0.016, Ignore Condition);
		Set Facing(Last Created Entity, Facing Direction Of(Host Player), To World);
	}
}

rule("Start")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		!Global.started == True;
		Is True For All(All Players(All Teams), Has Spawned(Current Array Element) || Is Dead(Current Array Element)) == True;
	}

	actions
	{
		Global.started = True;
		Wait(10, Ignore Condition);
		Global.gamemode = 1;
	}
}

rule("Player: Setup")
{
	event
	{
		Ongoing - Each Player;
		All;
		Reinhardt;
	}

	actions
	{
		Set Move Speed(Event Player, Global._extendedGlobalCollection[1]);
		Disallow Button(Event Player, Ultimate);
	}
}

rule("Player: Charge Speed Boost")
{
	event
	{
		Ongoing - Each Player;
		All;
		Reinhardt;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Event Player.chargeStart = Total Time Elapsed;
		Set Move Speed(Event Player, 200);
	}
}

rule("Player: Charge Speed Boost Revert")
{
	event
	{
		Ongoing - Each Player;
		All;
		Reinhardt;
	}

	conditions
	{
		!Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Set Move Speed(Event Player, Global._extendedGlobalCollection[1]);
	}
}

rule("Player: Hit pole")
{
	event
	{
		Ongoing - Each Player;
		All;
		Reinhardt;
	}

	conditions
	{
		!Is Using Ability 1(Event Player) == True;
		Is Alive(Event Player) == True;
		Total Time Elapsed - Event Player.chargeStart <= 4;
		Distance Between(Event Player, Vector(Empty Array, 154.880, 150)) < 3;
	}

	actions
	{
		Event Player.chargeStart = 0;
		Small Message(Event Player, Custom String("KA-DONG!"));
		Play Effect(All Players(All Teams), Ring Explosion Sound, White, Vector(Empty Array, 154.880, 150), 200);
		Play Effect(All Players(All Teams), Ring Explosion, Sky Blue, Vector(Empty Array, 154.880, 150), 50);
		Apply Impulse(Event Player, Direction Towards(Vector(Empty Array, 154.880, 150), Position Of(Event Player) + Vector(Empty Array,
			0.500, Empty Array)), 30, To World, Cancel Contrary Motion);
		If(Global.ballIsOnStand);
			Apply Impulse(Global.ball1, Direction Towards(Event Player, Vector(Empty Array, 154.880, 150) + Vector(Empty Array, 0.500,
				Empty Array)), 30, To World, Cancel Contrary Motion);
			Apply Impulse(Global.ball2, Direction Towards(Event Player, Vector(Empty Array, 154.880, 150) + Vector(Empty Array, 0.500,
				Empty Array)), 30, To World, Cancel Contrary Motion);
			Global.ballIsOnStand = False;
		End;
	}
}

rule("Player: Shield Surf")
{
	event
	{
		Ongoing - Each Player;
		All;
		Reinhardt;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
		Is True For Any(All Players(All Teams), Is Button Held(Current Array Element, Secondary Fire) && !Has Status(Current Array Element,
			Stunned) && !Is Using Ability 1(Current Array Element) && !Is Using Ability 2(Current Array Element) && Hero Of(
			Current Array Element) == Hero(Reinhardt) && Vertical Facing Angle Of(Current Array Element)
			< -40 && Current Array Element != Event Player && Distance Between(Event Player, Current Array Element)
			<= 5 && Is In View Angle(Current Array Element, Position Of(Event Player), 100)) == True;
	}

	actions
	{
		Small Message(Event Player, Custom String("Stylish!"));
		Teleport(Event Player, Position Of(Event Player) + Vector(Empty Array, 2, Empty Array));
		Apply Impulse(Event Player, Up, 15, To World, Incorporate Contrary Motion);
	}
}

rule("Player: Shield HUD")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Create HUD Text(Filtered Array(Players On Hero(Hero(Reinhardt), All Teams), Is Button Held(Current Array Element, Secondary Fire)
			&& !Has Status(Current Array Element, Stunned) && !Is Using Ability 1(Current Array Element) && !Is Using Ability 2(
			Current Array Element) && Hero Of(Current Array Element) == Hero(Reinhardt) && Vertical Facing Angle Of(Current Array Element)
			> -40), Icon String(Arrow: Up), Null, Custom String("Look up to become a ramp!"), Top, 3, Orange, White, Yellow,
			Visible To and String, Visible Never);
		Create HUD Text(Filtered Array(Players On Hero(Hero(Reinhardt), All Teams), Is Button Held(Current Array Element, Secondary Fire)
			&& !Has Status(Current Array Element, Stunned) && !Is Using Ability 1(Current Array Element) && !Is Using Ability 2(
			Current Array Element) && Hero Of(Current Array Element) == Hero(Reinhardt) && Vertical Facing Angle Of(Current Array Element)
			<= -40), Icon String(Moon), Null, Custom String("You are now a ramp."), Top, 3, Aqua, White, Yellow, Visible To and String,
			Visible Never);
	}
}

rule("Player: Shield Arrow")
{
	event
	{
		Ongoing - Each Player;
		All;
		Reinhardt;
	}

	conditions
	{
		(Is Button Held(Event Player, Secondary Fire) && !Has Status(Event Player, Stunned) && !Is Using Ability 1(Event Player)
			&& !Is Using Ability 2(Event Player) && Hero Of(Event Player) == Hero(Reinhardt) && Vertical Facing Angle Of(Event Player)
			< -40) == True;
	}

	actions
	{
		Event Player.arrowAnimation = 0;
		Event Player.arrowAnimation2 = 0.800;
		Chase Player Variable At Rate(Event Player, arrowAnimation, 1.600, 0.600, None);
		Chase Player Variable At Rate(Event Player, arrowAnimation2, 1.600, 0.600, None);
		Create Beam Effect(Filtered Array(All Players(All Teams), Event Player.arrowAnimation <= 1), Good Beam, Eye Position(Event Player)
			+ Facing Direction Of(Event Player) * 0.750 + Normalize(Cross Product(Facing Direction Of(Event Player), Up)) * Min(
			Event Player.arrowAnimation, 0.200) * 5 + Normalize(Cross Product(Facing Direction Of(Event Player), Cross Product(
			Facing Direction Of(Event Player), Up))) * -1 * (Min(Max(Event Player.arrowAnimation - 0.200, 0), 1) * 5 - 2.250),
			Eye Position(Event Player) + Facing Direction Of(Event Player) * 0.750 + Normalize(Cross Product(Facing Direction Of(
			Event Player), Up)) * Min(Max(Event Player.arrowAnimation - 0.800, 0), 0.200) * 5 + Normalize(Cross Product(
			Facing Direction Of(Event Player), Cross Product(Facing Direction Of(Event Player), Up))) * -1 * (Min(
			Event Player.arrowAnimation, 0.800) * 5 - 2.250), Green, Visible To Position and Radius);
		Event Player.arrowEffects[0] = Last Created Entity;
		Create Beam Effect(Filtered Array(All Players(All Teams), Event Player.arrowAnimation <= 1), Good Beam, Eye Position(Event Player)
			+ Facing Direction Of(Event Player) * 0.750 + Normalize(Cross Product(Facing Direction Of(Event Player), Up)) * Min(
			Event Player.arrowAnimation, 0.200) * -5 + Normalize(Cross Product(Facing Direction Of(Event Player), Cross Product(
			Facing Direction Of(Event Player), Up))) * -1 * (Min(Max(Event Player.arrowAnimation - 0.200, 0), 1) * 5 - 2.250),
			Eye Position(Event Player) + Facing Direction Of(Event Player) * 0.750 + Normalize(Cross Product(Facing Direction Of(
			Event Player), Up)) * Min(Max(Event Player.arrowAnimation - 0.800, 0), 0.200) * -5 + Normalize(Cross Product(
			Facing Direction Of(Event Player), Cross Product(Facing Direction Of(Event Player), Up))) * -1 * (Min(
			Event Player.arrowAnimation, 0.800) * 5 - 2.250), Green, Visible To Position and Radius);
		Event Player.arrowEffects[1] = Last Created Entity;
		Create Beam Effect(Filtered Array(All Players(All Teams), Event Player.arrowAnimation2 <= 1), Good Beam, Eye Position(Event Player)
			+ Facing Direction Of(Event Player) * 0.750 + Normalize(Cross Product(Facing Direction Of(Event Player), Up)) * Min(
			Event Player.arrowAnimation2, 0.200) * 5 + Normalize(Cross Product(Facing Direction Of(Event Player), Cross Product(
			Facing Direction Of(Event Player), Up))) * -1 * (Min(Max(Event Player.arrowAnimation2 - 0.200, 0), 1) * 5 - 2.250),
			Eye Position(Event Player) + Facing Direction Of(Event Player) * 0.750 + Normalize(Cross Product(Facing Direction Of(
			Event Player), Up)) * Min(Max(Event Player.arrowAnimation2 - 0.800, 0), 0.200) * 5 + Normalize(Cross Product(
			Facing Direction Of(Event Player), Cross Product(Facing Direction Of(Event Player), Up))) * -1 * (Min(
			Event Player.arrowAnimation2, 0.800) * 5 - 2.250), Green, Visible To Position and Radius);
		Event Player.arrowEffects[2] = Last Created Entity;
		Create Beam Effect(Filtered Array(All Players(All Teams), Event Player.arrowAnimation2 <= 1), Good Beam, Eye Position(Event Player)
			+ Facing Direction Of(Event Player) * 0.750 + Normalize(Cross Product(Facing Direction Of(Event Player), Up)) * Min(
			Event Player.arrowAnimation2, 0.200) * -5 + Normalize(Cross Product(Facing Direction Of(Event Player), Cross Product(
			Facing Direction Of(Event Player), Up))) * -1 * (Min(Max(Event Player.arrowAnimation2 - 0.200, 0), 1) * 5 - 2.250),
			Eye Position(Event Player) + Facing Direction Of(Event Player) * 0.750 + Normalize(Cross Product(Facing Direction Of(
			Event Player), Up)) * Min(Max(Event Player.arrowAnimation2 - 0.800, 0), 0.200) * -5 + Normalize(Cross Product(
			Facing Direction Of(Event Player), Cross Product(Facing Direction Of(Event Player), Up))) * -1 * (Min(
			Event Player.arrowAnimation2, 0.800) * 5 - 2.250), Green, Visible To Position and Radius);
		Event Player.arrowEffects[3] = Last Created Entity;
	}
}

rule("Player: Destroy Shield Arrow")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		!(Is Button Held(Event Player, Secondary Fire) && !Has Status(Event Player, Stunned) && !Is Using Ability 1(Event Player)
			&& !Is Using Ability 2(Event Player) && Hero Of(Event Player) == Hero(Reinhardt) && Vertical Facing Angle Of(Event Player)
			< -40) == True;
	}

	actions
	{
		Stop Chasing Player Variable(Event Player, arrowAnimation);
		Destroy Effect(First Of(Event Player.arrowEffects));
		Destroy Effect(Event Player.arrowEffects[1]);
		Destroy Effect(Event Player.arrowEffects[2]);
		Destroy Effect(Event Player.arrowEffects[3]);
	}
}

rule("Reset arrow")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.arrowAnimation == 1.600;
	}

	actions
	{
		Event Player.arrowAnimation = 0;
	}
}

rule("Reset arrow 2")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.arrowAnimation2 == 1.600;
	}

	actions
	{
		Event Player.arrowAnimation2 = 0;
	}
}

rule("Player: Start braking")
{
	event
	{
		Ongoing - Each Player;
		All;
		Reinhardt;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
		Is Button Held(Event Player, Crouch) == True;
		Is On Ground(Event Player) == True;
	}

	actions
	{
		Start Accelerating(Event Player, Backward, 750, 90, To Player, Direction Rate and Max Speed);
		Play Effect(All Players(All Teams), Bad Explosion, White, Position Of(Event Player), 0.500);
		Play Effect(Event Player, Debuff Impact Sound, White, Eye Position(Event Player), 100);
		Wait(0.800, Ignore Condition);
		Cancel Primary Action(Event Player);
		Stop Accelerating(Event Player);
	}
}

rule("Player: Knocked from")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.knockedFrom != Null;
		!Event Player.isWorkingDummy == True;
	}

	actions
	{
		Apply Impulse(Event Player, Direction Towards(Event Player.knockedFrom, Position Of(Event Player) + Vector(Empty Array,
			Event Player.heightOffset, Empty Array)), Event Player.force, To World, Incorporate Contrary Motion);
		Event Player.knockedFrom = Null;
	}
}

rule("Disable Input")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		!Event Player._extendedPlayerCollection[1] == True;
		!Event Player.isWorkingDummy == True;
	}

	actions
	{
		Start Throttle In Direction(Event Player, Vector(Empty Array, Empty Array, Empty Array), 0, To World, Replace existing throttle,
			Direction and Magnitude);
		Disallow Button(Event Player, Ability 1);
		Disallow Button(Event Player, Ability 2);
		Disallow Button(Event Player, Crouch);
		Disallow Button(Event Player, Interact);
		Disallow Button(Event Player, Jump);
		Disallow Button(Event Player, Ultimate);
	}
}

rule("Enable Input")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player._extendedPlayerCollection[1] == True;
		!Event Player.isWorkingDummy == True;
	}

	actions
	{
		Stop Throttle In Direction(Event Player);
		Allow Button(Event Player, Ability 1);
		Allow Button(Event Player, Ability 2);
		Allow Button(Event Player, Crouch);
		Allow Button(Event Player, Interact);
		Allow Button(Event Player, Jump);
		Allow Button(Event Player, Ultimate);
	}
}

rule("Heal")
{
	event
	{
		Player Took Damage;
		All;
		Reinhardt;
	}

	actions
	{
		Stop Heal Over Time(Event Player.healOverTime);
		Wait(10, Restart When True);
		Start Heal Over Time(Event Player, Null, 9999, 100);
		Event Player.healOverTime = Last Heal Over Time ID;
	}
}

rule("Fire strike direction")
{
	event
	{
		Ongoing - Each Player;
		All;
		Reinhardt;
	}

	conditions
	{
		Is Using Ability 2(Event Player) == True;
	}

	actions
	{
		Event Player._extendedPlayerCollection[2] = Facing Direction Of(Event Player);
	}
}

rule("Ball: Setup")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		(Global.gamemode == 1 || Global.gamemode == 2 || Global.gamemode == 3) == True;
	}

	actions
	{
		Global.ball = True;
		Create HUD Text(All Players(Team 1), Icon String(Dizzy), Custom String("Enemy score: {0}", Global.redScore), Custom String(
			"Your team's score: {0}", Global.blueScore), Top, 1, Sky Blue, Red, Sky Blue, Visible To and String, Visible Always);
		Global._extendedGlobalCollection[2] = Last Text ID;
		Create HUD Text(All Players(Team 2), Icon String(Dizzy), Custom String("Enemy score: {0}", Global.blueScore), Custom String(
			"Your team's score: {0}", Global.redScore), Top, 1, Sky Blue, Red, Sky Blue, Visible To and String, Visible Always);
		Global._extendedGlobalCollection[3] = Last Text ID;
		Create Dummy Bot(Hero(Torbjörn), Team 1, 5, Vector(Empty Array, 161.500, 150), Vector(Empty Array, Empty Array, Empty Array));
		Global.ball1 = Last Created Entity;
		Global.ball1.isBall = True;
		Global.ball1.isWorkingDummy = True;
		Global.rootBall = Global.ball1;
		Create Dummy Bot(Hero(Torbjörn), Team 2, 5, Vector(Empty Array, 161.500, 150) + Up, Vector(Empty Array, Empty Array, Empty Array));
		Global.ball2 = Last Created Entity;
		Global.ball2.isBall = True;
		Global.ball2.isWorkingDummy = True;
		Set Status(Global.ball1, Null, Unkillable, 9999);
		Set Status(Global.ball2, Null, Unkillable, 9999);
		Set Invisible(Global.ball1, All);
		Set Invisible(Global.ball2, All);
		Create Effect(All Players(All Teams), Sphere, Turquoise, Global.tpTo != Null ? Global.tpTo + Up : (Global.ball1 + Global.ball2)
			/ 2 + Vector(Empty Array, 0.500, Empty Array), 1.250, Visible To Position and Radius);
		Global._extendedGlobalCollection[4] = Last Created Entity;
		Global.ballReady = True;
	}
}

rule("Ball: Clean up")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.gamemode != 1;
		Global.gamemode != 2;
		Global.gamemode != 3;
	}

	actions
	{
		Global.ball = False;
		Global.ballReady = False;
		Destroy HUD Text(Global._extendedGlobalCollection[2]);
		Destroy HUD Text(Global._extendedGlobalCollection[3]);
		Destroy Effect(Global._extendedGlobalCollection[4]);
		Destroy Dummy Bot(Team Of(Global.ball1), Slot Of(Global.ball1));
		Destroy Dummy Bot(Team Of(Global.ball2), Slot Of(Global.ball2));
		Global.tpFrom = Null;
		Global.tpTo = Null;
		Global.rootBall = Null;
	}
}

rule("Ball: (High Server Loa​d) Link")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.ballReady == True;
	}

	actions
	{
		If(Has Status(Global.ball1, Stunned));
			Global.tpFrom = Global.ball2;
			Global.tpTo = Global.ball1;
		Else If(Has Status(Global.ball2, Stunned));
			Global.tpFrom = Global.ball1;
			Global.tpTo = Global.ball2;
		Else If(Is In Air(Global.ball1) || Is In Air(Global.ball2));
			If(Global.tpTo == Null || Absolute Value(Speed Of(Global.ball1) - Speed Of(Global.ball2)) > 2);
				If(Speed Of(Global.ball1) >= Speed Of(Global.ball2));
					Global.tpFrom = Global.ball2;
					Global.tpTo = Global.ball1;
				Else;
					Global.tpFrom = Global.ball1;
					Global.tpTo = Global.ball2;
				End;
			End;
		Else;
			Global.tpFrom = Null;
			Global.tpTo = Null;
		End;
		If(Global.tpTo != Null);
			Global.rootBall = Global.tpTo;
		End;
		Teleport(Global.tpFrom, Position Of(Global.tpTo) + Vector(Empty Array, 1 + Max(Y Component Of(Velocity Of(Global.tpTo)) * 0.025,
			0), Empty Array));
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Ball: Respawn ball")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.ballReady == True;
		Has Spawned(Global.ball1) == True;
		Has Spawned(Global.ball2) == True;
		(Is Dead(Global.ball1) || Is Dead(Global.ball2) || Y Component Of(Position Of(Global.rootBall)) < 140) == True;
	}

	actions
	{
		Small Message(All Players(All Teams), Custom String("Respawning Ball"));
		Call Subroutine(respawnBall);
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Ball: Bounce back ball")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.ballReady == True;
		!Global.ballIsOnStand == True;
		!Has Status(Global.rootBall, Stunned) == True;
		Speed Of(Global.rootBall) < 1;
		(Is On Ground(Global.rootBall) && Absolute Value(Y Component Of(Position Of(Global.rootBall)) - 158.440) < 0.200) == True;
	}

	actions
	{
		Apply Impulse(Global.rootBall, Direction Towards(Position Of(Global.rootBall), Vector(Empty Array, 161.500, 150) + Vector(
			Empty Array, 20, Empty Array)), 15, To World, Cancel Contrary Motion);
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Ball: On Ball Hit")
{
	event
	{
		Player Took Damage;
		All;
		All;
	}

	conditions
	{
		Event Player.isBall == True;
		(!Is In Spawn Room(Global.ball1) && !Is In Spawn Room(Global.ball2)) == True;
	}

	actions
	{
		Heal(Event Player, Null, Event Damage);
		If(Event Damage == 70);
			Apply Impulse(Event Player, Up, 20, To World, Incorporate Contrary Motion);
			Global.thrower = Attacker;
			Global.throwType = 0;
			Global.ballIsOnStand = False;
		Else If(Event Damage == 45);
			Global.thrower = Attacker;
			Global.throwType = 1;
			Global.ballIsOnStand = False;
		End;
	}
}

rule("Ball: On Fire Strike")
{
	event
	{
		Player Took Damage;
		All;
		All;
	}

	conditions
	{
		Event Player.isBall == True;
		Event Damage == 95;
	}

	actions
	{
		If(!Global.ballIsOnStand && !Global.ballOnGround);
			Apply Impulse(Global.rootBall, Attacker._extendedPlayerCollection[2], Speed Of(Global.rootBall) * 3, To World,
				Cancel Contrary Motion);
			Global.thrower = Attacker;
			Global.throwType = 3;
		End;
		Global.fuse = 0;
		Chase Global Variable Over Time(fuse, 2, 3, None);
		Create Effect(All Players(All Teams), Bad Aura, Orange, Global.tpTo != Null ? Global.tpTo + Up : (Global.ball1 + Global.ball2)
			/ 2 + Vector(Empty Array, 0.500, Empty Array), Global.fuse, Visible To Position and Radius);
		Event Player.fuseEffect = Last Created Entity;
		Wait(3, Ignore Condition);
		Destroy Effect(Event Player.fuseEffect);
		Stop Chasing Global Variable(fuse);
		Play Effect(All Players(All Teams), Good Explosion, Orange, Global.tpTo != Null ? Global.tpTo + Up : (Global.ball1 + Global.ball2)
			/ 2 + Vector(Empty Array, 0.500, Empty Array), 10);
		Play Effect(All Players(All Teams), Explosion Sound, Orange, Global.tpTo != Null ? Global.tpTo + Up : (Global.ball1 + Global.ball2)
			/ 2 + Vector(Empty Array, 0.500, Empty Array), 100);
		Event Player.inExplosionRange = Filtered Array(All Players(All Teams), Distance Between(Current Array Element,
			Global.tpTo != Null ? Global.tpTo + Up : (Global.ball1 + Global.ball2) / 2 + Vector(Empty Array, 0.500, Empty Array))
			< 10 && !Current Array Element.isBall);
		Damage(Event Player.inExplosionRange, Attacker, 200);
		Event Player.inExplosionRange.knockedFrom = Global.tpTo != Null ? Global.tpTo + Up : (Global.ball1 + Global.ball2) / 2 + Vector(
			Empty Array, 0.500, Empty Array);
		Event Player.inExplosionRange.force = 20;
		Event Player.inExplosionRange.heightOffset = 1.500;
	}
}

rule("Ball: Getting charged")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.isBall == True;
		Has Status(Event Player, Stunned) == True;
	}

	actions
	{
		Event Player.closest = First Of(Filtered Array(All Players(All Teams), Hero Of(Current Array Element) == Hero(Reinhardt)
			&& Distance Between(Current Array Element, Event Player) < 3 && Is Using Ability 1(Current Array Element)));
		If(Event Player.closest != Null);
			Global.thrower = Event Player.closest;
			Global.throwType = 2;
			Global.ballIsOnStand = False;
		End;
	}
}

rule("Ball: Effect when ball hits ground")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.ball == True;
		Is On Ground(Global.rootBall) == True;
	}

	actions
	{
		Play Effect(All Players(All Teams), Ring Explosion, Turquoise, Position Of(Global.rootBall), 5);
	}
}

rule("Ball: Fast ball effect")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.ball == True;
		!Global.ballIsOnStand == True;
		(Speed Of(Global.rootBall) >= 10 || Is In Air(Global.rootBall)) == True;
	}

	actions
	{
		Play Effect(Filtered Array(All Players(All Teams), Distance Between(Current Array Element, Global.rootBall) > 6), Bad Explosion,
			Turquoise, Global.tpTo != Null ? Global.tpTo + Up : (Global.ball1 + Global.ball2) / 2 + Vector(Empty Array, 0.500,
			Empty Array), 0.300);
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("Ball: Alternative Knock Off Stand")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.ballReady == True;
		Global.ballIsOnStand == True;
		(Distance Between(Global.ball1, Vector(Empty Array, 161.500, 150)) > 3.500 && Distance Between(Global.ball2, Vector(Empty Array,
			161.500, 150)) > 3.500) == True;
	}

	actions
	{
		Small Message(All Players(All Teams), Custom String("alt"));
		Wait(0.250, Abort When False);
		Global.ballIsOnStand = False;
	}
}

disabled rule("Ball: Shoot At Team")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Absolute Value(Global.blueScore - Global.redScore) >= 2;
		!Has Status(Global.ball1, Stunned) == True;
		!Has Status(Global.ball2, Stunned) == True;
		!Is In Air(Global.rootBall) == True;
		Total Time Elapsed - Global._extendedGlobalCollection[5] > 10;
	}

	actions
	{
		Global._extendedGlobalCollection[20] = Global.blueScore > Global.redScore ? Team 1 : Team 2;
		Global._extendedGlobalCollection[21] = Global._extendedGlobalCollection[20] == Team 1 ? Global.ball2 : Global.ball1;
		Set Ultimate Charge(Global._extendedGlobalCollection[21], 100);
		Press Button(Global._extendedGlobalCollection[21], Ultimate);
		Set Damage Dealt(Global._extendedGlobalCollection[21], 300);
		Start Facing(Global._extendedGlobalCollection[21], Direction Towards(Eye Position(Global._extendedGlobalCollection[21]),
			Eye Position(First Of(Sorted Array(Filtered Array(All Players(All Teams), !Current Array Element.isWorkingDummy && Team Of(
			Current Array Element) == Global._extendedGlobalCollection[20]), Distance Between(Current Array Element,
			Global._extendedGlobalCollection[21]))))), 750, To World, Direction and Turn Rate);
		Start Holding Button(Global._extendedGlobalCollection[21], Primary Fire);
		Wait(3, Ignore Condition);
		Stop Holding Button(Global._extendedGlobalCollection[21], Primary Fire);
		Set Damage Dealt(Global._extendedGlobalCollection[21], 100);
		Stop Facing(Global._extendedGlobalCollection[21]);
		Global._extendedGlobalCollection[5] = Total Time Elapsed;
	}
}

rule("Outer wall bounce")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.rootBall == Event Player;
		Dot Product(Global.owb, Position Of(Global.rootBall) - Vector(108.080, 154.880, 213.350)) < -8;
	}

	actions
	{
		Apply Impulse(Global.rootBall, Global.owb, Max(5, Speed Of(Global.rootBall)), To World, Cancel Contrary Motion);
		Wait(0.500, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Switch gamemode")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.totalScore != 0;
		Global.totalScore % 5 == 0;
	}

	actions
	{
		Wait(5, Ignore Condition);
		If(Global.gamemode == 3);
			Global.gamemode = 1;
		Else;
			Global.gamemode = 3;
		End;
	}
}

rule("Football: Countdown")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.gamemode == 1;
	}

	actions
	{
		All Players(All Teams)._extendedPlayerCollection[1] = False;
		Heal(All Players(All Teams), Null, 9999);
		Global.i = 0;
		While(Global.i < 5);
			Teleport(Players In Slot(Global.i, Team 1), Vector(60, 154.880, 120 + 12 * Global.i));
			Teleport(Players In Slot(Global.i, Team 2), Vector(-60, 154.880, 120 + 12 * Global.i));
			Global.i += 1;
		End;
		Resurrect(All Players(All Teams));
		Call Subroutine(respawnBall);
		Global.i_0 = 3;
		While(Global.i_0 > 0);
			Small Message(All Players(All Teams), Global.i_0);
			Wait(1, Ignore Condition);
			Global.i_0 -= 1;
		End;
		Big Message(All Players(All Teams), Custom String("Start!"));
		All Players(All Teams)._extendedPlayerCollection[1] = True;
		Global.gamemode = 2;
	}
}

rule("Football: Start/Stop")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Communicating(Host Player, Voice Line Up) == True;
		Is Button Held(Host Player, Reload) == True;
	}

	actions
	{
		If(Global.gamemode != 1);
			Global.gamemode = 1;
		Else;
			Global.gamemode = 0;
		End;
	}
}

rule("Football: Spawn goals")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		(Global.gamemode == 1 || Global.gamemode == 2) == True;
	}

	actions
	{
		Call Subroutine(ChaseGoalEffects);
		Create Beam Effect(All Players(All Teams), Good Beam, Position Of(Global.rootBall) + Dot Product(Vector(-0.900, 0.430,
			Empty Array), Position Of(Global.rootBall) - Vector(115.690, 156.680, 148.520)) * -1 / Dot Product(Vector(-0.900, 0.430,
			Empty Array), Vector(-0.900, 0.430, Empty Array)) * Vector(-0.900, 0.430, Empty Array) - Normalize(Cross Product(Vector(-0.900,
			0.430, Empty Array), Cross Product(Vector(-0.900, 0.430, Empty Array), Up))) * Global.blueGoalSize, Position Of(
			Global.rootBall) + Dot Product(Vector(-0.900, 0.430, Empty Array), Position Of(Global.rootBall) - Vector(115.690, 156.680,
			148.520)) * -1 / Dot Product(Vector(-0.900, 0.430, Empty Array), Vector(-0.900, 0.430, Empty Array)) * Vector(-0.900, 0.430,
			Empty Array) - Normalize(Cross Product(Vector(-0.900, 0.430, Empty Array), Up)) * Global.blueGoalSize, Team 2,
			Visible To Position and Radius);
		Global.goalEffects[0] = Last Created Entity;
		Create Beam Effect(All Players(All Teams), Good Beam, Position Of(Global.rootBall) + Dot Product(Vector(-0.900, 0.430,
			Empty Array), Position Of(Global.rootBall) - Vector(115.690, 156.680, 148.520)) * -1 / Dot Product(Vector(-0.900, 0.430,
			Empty Array), Vector(-0.900, 0.430, Empty Array)) * Vector(-0.900, 0.430, Empty Array) - Normalize(Cross Product(Vector(-0.900,
			0.430, Empty Array), Up)) * Global.blueGoalSize, Position Of(Global.rootBall) + Dot Product(Vector(-0.900, 0.430, Empty Array),
			Position Of(Global.rootBall) - Vector(115.690, 156.680, 148.520)) * -1 / Dot Product(Vector(-0.900, 0.430, Empty Array),
			Vector(-0.900, 0.430, Empty Array)) * Vector(-0.900, 0.430, Empty Array) + Normalize(Cross Product(Vector(-0.900, 0.430,
			Empty Array), Cross Product(Vector(-0.900, 0.430, Empty Array), Up))) * Global.blueGoalSize, Team 2,
			Visible To Position and Radius);
		Global.goalEffects[1] = Last Created Entity;
		Create Beam Effect(All Players(All Teams), Good Beam, Position Of(Global.rootBall) + Dot Product(Vector(-0.900, 0.430,
			Empty Array), Position Of(Global.rootBall) - Vector(115.690, 156.680, 148.520)) * -1 / Dot Product(Vector(-0.900, 0.430,
			Empty Array), Vector(-0.900, 0.430, Empty Array)) * Vector(-0.900, 0.430, Empty Array) + Normalize(Cross Product(Vector(-0.900,
			0.430, Empty Array), Cross Product(Vector(-0.900, 0.430, Empty Array), Up))) * Global.blueGoalSize, Position Of(
			Global.rootBall) + Dot Product(Vector(-0.900, 0.430, Empty Array), Position Of(Global.rootBall) - Vector(115.690, 156.680,
			148.520)) * -1 / Dot Product(Vector(-0.900, 0.430, Empty Array), Vector(-0.900, 0.430, Empty Array)) * Vector(-0.900, 0.430,
			Empty Array) + Normalize(Cross Product(Vector(-0.900, 0.430, Empty Array), Up)) * Global.blueGoalSize, Team 2,
			Visible To Position and Radius);
		Global.goalEffects[2] = Last Created Entity;
		Create Beam Effect(All Players(All Teams), Good Beam, Position Of(Global.rootBall) + Dot Product(Vector(-0.900, 0.430,
			Empty Array), Position Of(Global.rootBall) - Vector(115.690, 156.680, 148.520)) * -1 / Dot Product(Vector(-0.900, 0.430,
			Empty Array), Vector(-0.900, 0.430, Empty Array)) * Vector(-0.900, 0.430, Empty Array) + Normalize(Cross Product(Vector(-0.900,
			0.430, Empty Array), Up)) * Global.blueGoalSize, Position Of(Global.rootBall) + Dot Product(Vector(-0.900, 0.430, Empty Array),
			Position Of(Global.rootBall) - Vector(115.690, 156.680, 148.520)) * -1 / Dot Product(Vector(-0.900, 0.430, Empty Array),
			Vector(-0.900, 0.430, Empty Array)) * Vector(-0.900, 0.430, Empty Array) - Normalize(Cross Product(Vector(-0.900, 0.430,
			Empty Array), Cross Product(Vector(-0.900, 0.430, Empty Array), Up))) * Global.blueGoalSize, Team 2,
			Visible To Position and Radius);
		Global.goalEffects[3] = Last Created Entity;
		Create Beam Effect(All Players(All Teams), Good Beam, Position Of(Global.rootBall) + Dot Product(Vector(0.900, 0.430, Empty Array),
			Position Of(Global.rootBall) - Vector(-118.450, 156.680, 148.520)) * -1 / Dot Product(Vector(0.900, 0.430, Empty Array),
			Vector(0.900, 0.430, Empty Array)) * Vector(0.900, 0.430, Empty Array) - Normalize(Cross Product(Vector(0.900, 0.430,
			Empty Array), Cross Product(Vector(0.900, 0.430, Empty Array), Up))) * Global.redGoalSize, Position Of(Global.rootBall)
			+ Dot Product(Vector(0.900, 0.430, Empty Array), Position Of(Global.rootBall) - Vector(-118.450, 156.680, 148.520))
			* -1 / Dot Product(Vector(0.900, 0.430, Empty Array), Vector(0.900, 0.430, Empty Array)) * Vector(0.900, 0.430, Empty Array)
			- Normalize(Cross Product(Vector(0.900, 0.430, Empty Array), Up)) * Global.redGoalSize, Team 1,
			Visible To Position and Radius);
		Global.goalEffects[4] = Last Created Entity;
		Create Beam Effect(All Players(All Teams), Good Beam, Position Of(Global.rootBall) + Dot Product(Vector(0.900, 0.430, Empty Array),
			Position Of(Global.rootBall) - Vector(-118.450, 156.680, 148.520)) * -1 / Dot Product(Vector(0.900, 0.430, Empty Array),
			Vector(0.900, 0.430, Empty Array)) * Vector(0.900, 0.430, Empty Array) - Normalize(Cross Product(Vector(0.900, 0.430,
			Empty Array), Up)) * Global.redGoalSize, Position Of(Global.rootBall) + Dot Product(Vector(0.900, 0.430, Empty Array),
			Position Of(Global.rootBall) - Vector(-118.450, 156.680, 148.520)) * -1 / Dot Product(Vector(0.900, 0.430, Empty Array),
			Vector(0.900, 0.430, Empty Array)) * Vector(0.900, 0.430, Empty Array) + Normalize(Cross Product(Vector(0.900, 0.430,
			Empty Array), Cross Product(Vector(0.900, 0.430, Empty Array), Up))) * Global.redGoalSize, Team 1,
			Visible To Position and Radius);
		Global.goalEffects[5] = Last Created Entity;
		Create Beam Effect(All Players(All Teams), Good Beam, Position Of(Global.rootBall) + Dot Product(Vector(0.900, 0.430, Empty Array),
			Position Of(Global.rootBall) - Vector(-118.450, 156.680, 148.520)) * -1 / Dot Product(Vector(0.900, 0.430, Empty Array),
			Vector(0.900, 0.430, Empty Array)) * Vector(0.900, 0.430, Empty Array) + Normalize(Cross Product(Vector(0.900, 0.430,
			Empty Array), Cross Product(Vector(0.900, 0.430, Empty Array), Up))) * Global.redGoalSize, Position Of(Global.rootBall)
			+ Dot Product(Vector(0.900, 0.430, Empty Array), Position Of(Global.rootBall) - Vector(-118.450, 156.680, 148.520))
			* -1 / Dot Product(Vector(0.900, 0.430, Empty Array), Vector(0.900, 0.430, Empty Array)) * Vector(0.900, 0.430, Empty Array)
			+ Normalize(Cross Product(Vector(0.900, 0.430, Empty Array), Up)) * Global.redGoalSize, Team 1,
			Visible To Position and Radius);
		Global.goalEffects[6] = Last Created Entity;
		Create Beam Effect(All Players(All Teams), Good Beam, Position Of(Global.rootBall) + Dot Product(Vector(0.900, 0.430, Empty Array),
			Position Of(Global.rootBall) - Vector(-118.450, 156.680, 148.520)) * -1 / Dot Product(Vector(0.900, 0.430, Empty Array),
			Vector(0.900, 0.430, Empty Array)) * Vector(0.900, 0.430, Empty Array) + Normalize(Cross Product(Vector(0.900, 0.430,
			Empty Array), Up)) * Global.redGoalSize, Position Of(Global.rootBall) + Dot Product(Vector(0.900, 0.430, Empty Array),
			Position Of(Global.rootBall) - Vector(-118.450, 156.680, 148.520)) * -1 / Dot Product(Vector(0.900, 0.430, Empty Array),
			Vector(0.900, 0.430, Empty Array)) * Vector(0.900, 0.430, Empty Array) - Normalize(Cross Product(Vector(0.900, 0.430,
			Empty Array), Cross Product(Vector(0.900, 0.430, Empty Array), Up))) * Global.redGoalSize, Team 1,
			Visible To Position and Radius);
		Global.goalEffects[7] = Last Created Entity;
	}
}

rule("Football: Destroy goals")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.gamemode != 1;
		Global.gamemode != 2;
	}

	actions
	{
		Global._extendedGlobalCollection[22] = 0;
		While(Global._extendedGlobalCollection[22] < Count Of(Global.goalEffects));
			Destroy Effect(Global.goalEffects[Global._extendedGlobalCollection[22]]);
			Global._extendedGlobalCollection[22] += 1;
		End;
	}
}

rule("Football: Blue score")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.ballReady == True;
		Global.gamemode == 2;
		Dot Product(Vector(0.900, 0.430, Empty Array), Position Of(Global.rootBall) - Vector(-118.450, 156.680, 148.520)) < 0;
	}

	actions
	{
		Global.nearest = Position Of(Global.rootBall) + Dot Product(Vector(0.900, 0.430, Empty Array), Position Of(Global.rootBall)
			- Vector(-118.450, 156.680, 148.520)) * -1 / Dot Product(Vector(0.900, 0.430, Empty Array), Vector(0.900, 0.430, Empty Array))
			* Vector(0.900, 0.430, Empty Array);
		Global.totalScore += 1;
		Global.blueScore += 1;
		Chase Global Variable Over Time(redGoalSize, 0, 0.300, None);
		Wait(0.350, Ignore Condition);
		Play Effect(All Players(All Teams), Ring Explosion, Team 1, Global.nearest, 100);
		Play Effect(All Players(Team 1), Buff Explosion Sound, White, Global.nearest, 1000);
		Play Effect(All Players(Opposite Team Of(Team 1)), Debuff Impact Sound, White, Global.nearest, 1000);
		Global.team = Team 1;
		Global.scoreboardOrder += 1;
		If(Team Of(Global.thrower) != Global.team);
			Big Message(All Players(All Teams), Custom String("Wrong goal, {0}!", Global.thrower));
			Create HUD Text(All Players(All Teams), Null, Null, Custom String("{0}{1}", Icon String(X), Global.thrower), Right,
				Global.scoreboardOrder, White, White, Team 1, Visible To, Visible Always);
		Else If(Global.throwType == 0);
			Big Message(All Players(All Teams), Custom String("{0} scored a hammer shot!", Global.thrower));
			Create HUD Text(All Players(All Teams), Null, Null, Custom String("{0}{1}", Ability Icon String(Hero(Reinhardt), Button(
				Primary Fire)), Global.thrower), Right, Global.scoreboardOrder, White, White, Team 1, Visible To, Visible Always);
		Else If(Global.throwType == 1);
			Big Message(All Players(All Teams), Custom String("{0} scored a bump shot!", Global.thrower));
			Create HUD Text(All Players(All Teams), Null, Null, Custom String("{0}{1}", Ability Icon String(Hero(Doomfist), Button(Ability 1)),
				Global.thrower), Right, Global.scoreboardOrder, White, White, Team 1, Visible To, Visible Always);
		Else If(Global.throwType == 2);
			Big Message(All Players(All Teams), Custom String("{0} scored a charge shot!", Global.thrower));
			Create HUD Text(All Players(All Teams), Null, Null, Custom String("{0}{1}", Ability Icon String(Hero(Reinhardt), Button(
				Ability 1)), Global.thrower), Right, Global.scoreboardOrder, White, White, Team 1, Visible To, Visible Always);
		Else If(Global.throwType == 3);
			Big Message(All Players(All Teams), Custom String("{0} scored a fire shot!", Global.thrower));
			Create HUD Text(All Players(All Teams), Null, Null, Custom String("{0}{1}", Ability Icon String(Hero(Reinhardt), Button(
				Ability 2)), Global.thrower), Right, Global.scoreboardOrder, White, White, Team 1, Visible To, Visible Always);
		End;
		Set Slow Motion(25);
		Wait(1, Ignore Condition);
		Set Slow Motion(100);
		Wait(3, Ignore Condition);
		Call Subroutine(ChaseGoalEffects);
	}
}

rule("Football: Red score")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.ballReady == True;
		Global.gamemode == 2;
		Dot Product(Vector(-0.900, 0.430, Empty Array), Position Of(Global.rootBall) - Vector(115.690, 156.680, 148.520)) < 0;
	}

	actions
	{
		Global.nearest_0 = Position Of(Global.rootBall) + Dot Product(Vector(-0.900, 0.430, Empty Array), Position Of(Global.rootBall)
			- Vector(115.690, 156.680, 148.520)) * -1 / Dot Product(Vector(-0.900, 0.430, Empty Array), Vector(-0.900, 0.430, Empty Array))
			* Vector(-0.900, 0.430, Empty Array);
		Global.totalScore += 1;
		Global.redScore += 1;
		Chase Global Variable Over Time(blueGoalSize, 0, 0.300, None);
		Wait(0.350, Ignore Condition);
		Play Effect(All Players(All Teams), Ring Explosion, Team 2, Global.nearest_0, 100);
		Play Effect(All Players(Team 2), Buff Explosion Sound, White, Global.nearest_0, 1000);
		Play Effect(All Players(Opposite Team Of(Team 2)), Debuff Impact Sound, White, Global.nearest_0, 1000);
		Global.team_0 = Team 2;
		Global.scoreboardOrder += 1;
		If(Team Of(Global.thrower) != Global.team_0);
			Big Message(All Players(All Teams), Custom String("Wrong goal, {0}!", Global.thrower));
			Create HUD Text(All Players(All Teams), Null, Null, Custom String("{0}{1}", Icon String(X), Global.thrower), Right,
				Global.scoreboardOrder, White, White, Team 2, Visible To, Visible Always);
		Else If(Global.throwType == 0);
			Big Message(All Players(All Teams), Custom String("{0} scored a hammer shot!", Global.thrower));
			Create HUD Text(All Players(All Teams), Null, Null, Custom String("{0}{1}", Ability Icon String(Hero(Reinhardt), Button(
				Primary Fire)), Global.thrower), Right, Global.scoreboardOrder, White, White, Team 2, Visible To, Visible Always);
		Else If(Global.throwType == 1);
			Big Message(All Players(All Teams), Custom String("{0} scored a bump shot!", Global.thrower));
			Create HUD Text(All Players(All Teams), Null, Null, Custom String("{0}{1}", Ability Icon String(Hero(Doomfist), Button(Ability 1)),
				Global.thrower), Right, Global.scoreboardOrder, White, White, Team 2, Visible To, Visible Always);
		Else If(Global.throwType == 2);
			Big Message(All Players(All Teams), Custom String("{0} scored a charge shot!", Global.thrower));
			Create HUD Text(All Players(All Teams), Null, Null, Custom String("{0}{1}", Ability Icon String(Hero(Reinhardt), Button(
				Ability 1)), Global.thrower), Right, Global.scoreboardOrder, White, White, Team 2, Visible To, Visible Always);
		Else If(Global.throwType == 3);
			Big Message(All Players(All Teams), Custom String("{0} scored a fire shot!", Global.thrower));
			Create HUD Text(All Players(All Teams), Null, Null, Custom String("{0}{1}", Ability Icon String(Hero(Reinhardt), Button(
				Ability 2)), Global.thrower), Right, Global.scoreboardOrder, White, White, Team 2, Visible To, Visible Always);
		End;
		Set Slow Motion(25);
		Wait(1, Ignore Condition);
		Set Slow Motion(100);
		Wait(3, Ignore Condition);
		Call Subroutine(ChaseGoalEffects);
	}
}

rule("Lasers: Setup laser game")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.gamemode == 4;
	}

	actions
	{
		Global._extendedGlobalCollection[11] = 1;
		Global.midpoint = Vector(Empty Array, 154.880, 150);
		Create Beam Effect(All Players(All Teams), Bad Beam, Global.midpoint + Vector(Empty Array, 0.500, Empty Array)
			+ Direction From Angles(Global.laser1Rot, 0) * Global.laserLength, Global.midpoint + Vector(Empty Array, 0.500, Empty Array)
			+ Direction From Angles(Global.laser1Rot + 180, 0) * Global.laserLength, Red, Visible To Position and Radius);
		Global._extendedGlobalCollection[6] = Last Created Entity;
		Create Beam Effect(All Players(All Teams), Bad Beam, Global.midpoint + Vector(Empty Array, 2, Empty Array) + Direction From Angles(
			Global.laser2Rot, 0) * Global.laserLength, Global.midpoint + Vector(Empty Array, 2, Empty Array) + Direction From Angles(
			Global.laser2Rot + 180, 0) * Global.laserLength, Red, Visible To Position and Radius);
		Global._extendedGlobalCollection[7] = Last Created Entity;
		Create Beam Effect(All Players(All Teams), Bad Beam, Global.midpoint + Vector(Empty Array, 3.500, Empty Array)
			+ Direction From Angles(Global.laser3Rot, 0) * Global.laserLength, Global.midpoint + Vector(Empty Array, 3.500, Empty Array)
			+ Direction From Angles(Global.laser3Rot + 180, 0) * Global.laserLength, Red, Visible To Position and Radius);
		Global._extendedGlobalCollection[8] = Last Created Entity;
		If(Global.rotateLasers);
			Global._extendedGlobalCollection[9] = Empty Array;
			Global.fraction = 36;
			Global.i_1 = 0;
			While(Global.i_1 < 9);
				Create Beam Effect(All Players(All Teams), Bad Beam, Global.midpoint + Direction From Angles(Global.fraction * Global.i_1, 0)
					* Global.boundaryLength, Global.midpoint + Direction From Angles(Global.fraction * (Global.i_1 + 1), 0)
					* Global.boundaryLength, Blue, Visible To);
				Global._extendedGlobalCollection[9] = Append To Array(Global._extendedGlobalCollection[9], Last Created Entity);
				Global.i_1 += 1;
			End;
			Global.outOfRange = All Players(All Teams);
			Create HUD Text(Global.outOfRange, Custom String("{0}{1}", Icon String(Warning), Icon String(Halo)), Null, Custom String(
				"Get inside the ring!"), Top, 1, Red, White, Yellow, Visible To and String, Visible Never);
			Global._extendedGlobalCollection[10] = Last Text ID;
		End;
		Chase Global Variable Over Time(laserLength, 150, 5, None);
		Wait(5, Ignore Condition);
		Stop Chasing Global Variable(laserLength);
		Global.lasersReady = True;
		If(Global.rotateLasers);
			Chase Global Variable At Rate(laser1Rot, 1440, Global.rotationSpeed, Destination and Rate);
			Chase Global Variable At Rate(laser2Rot, -1440, Global.rotationSpeed * 1.250, Destination and Rate);
			Chase Global Variable At Rate(laser3Rot, 1080, Global.rotationSpeed * 0.850, Destination and Rate);
			Chase Global Variable Over Time(rotationSpeed, 45, 5, None);
			Wait(5, Ignore Condition);
			Stop Chasing Global Variable(rotationSpeed);
		End;
	}
}

rule("Lasers: Clean up lasers")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.gamemode != 4;
		Global.lasersReady == True;
	}

	actions
	{
		Global.lasersReady = False;
		If(Global.gamemode != 3);
			Chase Global Variable Over Time(laserLength, 0, 5, None);
			Wait(5, Ignore Condition);
		End;
		Stop Chasing Global Variable(laserLength);
		Destroy Effect(Global._extendedGlobalCollection[6]);
		Destroy Effect(Global._extendedGlobalCollection[7]);
		Destroy Effect(Global._extendedGlobalCollection[8]);
		Global._extendedGlobalCollection[23] = 0;
		While(Global._extendedGlobalCollection[23] < Count Of(Global._extendedGlobalCollection[9]));
			Destroy Effect(Global._extendedGlobalCollection[9][Global._extendedGlobalCollection[23]]);
			Destroy Effect(Global._extendedGlobalCollection[9][Global._extendedGlobalCollection[23] + 1]);
			Global._extendedGlobalCollection[23] += 1;
		End;
		Destroy HUD Text(Global._extendedGlobalCollection[10]);
		Stop Chasing Global Variable(laser1Rot);
		Stop Chasing Global Variable(laser2Rot);
		Stop Chasing Global Variable(laser3Rot);
		Global.laser1Rot = 0;
		Global.laser2Rot = 0;
		Global.laser3Rot = 0;
		Global.rotateLasers = False;
	}
}

rule("Lasers: (High Server Loa​d) Kill intersecting players")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.gamemode == 4;
		Global.lasersReady == True;
	}

	actions
	{
		If(Global.rotateLasers);
			Global.outOfRange = Remove From Array(All Players(All Teams), Players Within Radius(Global.midpoint, Global.boundaryLength,
				All Teams, Off));
			Damage(Global.outOfRange, Null, 10);
		End;
		Global.intersecting = Empty Array;
		Global.line1 = Global.midpoint + Direction From Angles(Global.laser1Rot, 0) * Global.laserLength;
		Modify Global Variable(intersecting, Append To Array, Filtered Array(All Players(All Teams), !Is In Air(Current Array Element)
			&& Absolute Value((X Component Of(Position Of(Current Array Element)) - X Component Of(Global.line1)) * (Z Component Of(
			Global.midpoint) - Z Component Of(Global.line1)) - (Z Component Of(Position Of(Current Array Element)) - Z Component Of(
			Global.line1)) * (X Component Of(Global.midpoint) - X Component Of(Global.line1))) < 200));
		Wait(0.050, Ignore Condition);
		Global.line2 = Global.midpoint + Direction From Angles(Global.laser2Rot, 0) * Global.laserLength;
		Modify Global Variable(intersecting, Append To Array, Filtered Array(All Players(All Teams), !(Is Crouching(Current Array Element)
			|| (Is On Ground(Current Array Element) && Is Using Ability 1(Current Array Element))) && Absolute Value((X Component Of(
			Position Of(Current Array Element)) - X Component Of(Global.line2)) * (Z Component Of(Global.midpoint) - Z Component Of(
			Global.line2)) - (Z Component Of(Position Of(Current Array Element)) - Z Component Of(Global.line2)) * (X Component Of(
			Global.midpoint) - X Component Of(Global.line2))) < 200));
		Global.intersecting = Filtered Array(Global.intersecting, Total Time Elapsed - Current Array Element.lastDamage > 1);
		Global.intersecting.lastDamage = Total Time Elapsed;
		Damage(Global.intersecting, Null, 170);
		Wait(0.050, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Lasers: Finished rotating")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.gamemode == 4;
		Global.lasersReady == True;
		Global.rotateLasers == True;
		Global.laser1Rot == 1440;
		Global.laser2Rot == -1440;
		Global.laser3Rot == 1080;
	}

	actions
	{
		Destroy HUD Text(Global._extendedGlobalCollection[10]);
		Global._extendedGlobalCollection[24] = 0;
		While(Global._extendedGlobalCollection[24] < Count Of(Global._extendedGlobalCollection[9]));
			Destroy Effect(Global._extendedGlobalCollection[9][Global._extendedGlobalCollection[24]]);
			Destroy Effect(Global._extendedGlobalCollection[9][Global._extendedGlobalCollection[24] + 1]);
			Global._extendedGlobalCollection[24] += 1;
		End;
		Stop Chasing Global Variable(laser1Rot);
		Stop Chasing Global Variable(laser2Rot);
		Stop Chasing Global Variable(laser3Rot);
		Global.laser1Rot = 0;
		Global.laser2Rot = 0;
		Global.laser3Rot = 0;
		Global.rotateLasers = False;
		Small Message(All Players(All Teams), Custom String("Finished rotating"));
	}
}

rule("Lasers: Laser discharge")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.gamemode == 4;
		Global.lasersReady == True;
		Global.rotateLasers == True;
	}

	actions
	{
		Play Effect(All Players(All Teams), Ring Explosion, Red, Global.midpoint, 30);
		Global.knockPlayers = Players Within Radius(Global.midpoint, 15, All Teams, Off);
		Global.knockPlayers.knockedFrom = Global.midpoint;
		Global.knockPlayers.force = 40;
		Global.knockPlayers.heightOffset = 1;
		Wait(5, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Laser Danger Level")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global._extendedGlobalCollection[12] != Global._extendedGlobalCollection[11];
	}

	actions
	{
		Destroy HUD Text(Global._extendedGlobalCollection[13]);
		Global._extendedGlobalCollection[12] = Global._extendedGlobalCollection[11];
		If(Global._extendedGlobalCollection[11] == 1);
			Create HUD Text(All Players(All Teams), Icon String(Bolt), Custom String("Laser danger level:"), Custom String(
				"Mildly bone-breaking"), Left, 0, Red, Orange, Yellow, Visible To and String, Default Visibility);
		Else If(Global._extendedGlobalCollection[11] == 2);
			Create HUD Text(All Players(All Teams), Icon String(Bolt), Custom String("Laser danger level:"), Custom String("Spine-snapping"),
				Left, 0, Red, Orange, Orange, Visible To and String, Default Visibility);
		Else If(Global._extendedGlobalCollection[11] == 3);
			Create HUD Text(All Players(All Teams), Icon String(Bolt), Custom String("Laser danger level:"), Custom String(
				"Instant annihilation"), Left, 0, Red, Orange, Red, Visible To and String, Default Visibility);
		End;
		Global._extendedGlobalCollection[13] = Last Text ID;
	}
}

rule("Volleyball: Start/Stop")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Communicating(Host Player, Voice Line Right) == True;
		Is Button Held(Host Player, Reload) == True;
	}

	actions
	{
		If(Global.gamemode != 3);
			Global.gamemode = 3;
		Else;
			Global.gamemode = 0;
		End;
	}
}

rule("Volleyball: Setup")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.gamemode == 3;
	}

	actions
	{
		Heal(All Players(All Teams), Null, 9999);
		Global.i_2 = 0;
		While(Global.i_2 < 5);
			Teleport(Players In Slot(Global.i_2, Team 1), Vector(60, 154.880, 120 + 12 * Global.i_2));
			Teleport(Players In Slot(Global.i_2, Team 2), Vector(-60, 154.880, 120 + 12 * Global.i_2));
			Global.i_2 += 1;
		End;
		Resurrect(All Players(All Teams));
		Call Subroutine(respawnBall);
		Global.volleyball = True;
		Global._extendedGlobalCollection[11] = 3;
		Create Beam Effect(All Players(All Teams), Bad Beam, Vector(Empty Array, 154.880, 150) + Vector(Empty Array, 0.500, 150), Vector(
			Empty Array, 154.880, 150) + Vector(Empty Array, 0.500, -150), Red, Visible To Position and Radius);
		Global._extendedGlobalCollection[6] = Last Created Entity;
		Create Beam Effect(All Players(All Teams), Bad Beam, Vector(Empty Array, 154.880, 150) + Vector(Empty Array, 2, 150), Vector(
			Empty Array, 154.880, 150) + Vector(Empty Array, 2, -150), Red, Visible To Position and Radius);
		Global._extendedGlobalCollection[7] = Last Created Entity;
		Create Beam Effect(All Players(All Teams), Bad Beam, Vector(Empty Array, 154.880, 150) + Vector(Empty Array, 3.500, 150), Vector(
			Empty Array, 154.880, 150) + Vector(Empty Array, 3.500, -150), Red, Visible To Position and Radius);
		Global._extendedGlobalCollection[8] = Last Created Entity;
		Global.detonationTime = 10;
		Create HUD Text(All Players(All Teams), Icon String(Halo), Custom String("{0} seconds", Global.detonationTime), Custom String(
			"Keep the ball on the enemy side!"), Top, 2, Turquoise, Orange, White, Visible To and String, Visible Always);
		Global._extendedGlobalCollection[14] = Last Text ID;
	}
}

rule("Volleyball: Cleanup")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.gamemode != 3;
	}

	actions
	{
		Global.volleyball = False;
		Global._extendedGlobalCollection[11] = 0;
		Destroy Effect(Global._extendedGlobalCollection[6]);
		Destroy Effect(Global._extendedGlobalCollection[7]);
		Destroy Effect(Global._extendedGlobalCollection[8]);
		Call Subroutine(DestroyCounterText);
		Destroy HUD Text(Global._extendedGlobalCollection[14]);
		Stop Chasing Global Variable(detonationCounter);
	}
}

rule("Volleyball: Show counter")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.volleyball == True;
		!Global.ballIsOnStand == True;
		Global.ballReady == True;
	}

	actions
	{
		Call Subroutine(DestroyCounterText);
		Create In-World Text(All Players(Opposite Team Of(Global.onTeam)), Global.detonationCounter, Position Of(Global.rootBall) + Vector(
			Empty Array, 1.500, Empty Array), 2, Clip Against Surfaces, Visible To Position and String, White, Visible Always);
		Global.counterTexts[0] = Last Text ID;
		Create In-World Text(Filtered Array(All Players(Global.onTeam), !(Has Status(Global.ball1, Stunned) || Has Status(Global.ball2,
			Stunned)) && Global.ballOnGround), Custom String("{0} {1} {0}", Icon String(Warning), Global.detonationCounter), Position Of(
			Global.rootBall) + Vector(Empty Array, 1.500, Empty Array), 2, Clip Against Surfaces, Visible To Position and String, Red,
			Visible Always);
		Global.counterTexts[1] = Last Text ID;
		Create In-World Text(Filtered Array(All Players(Global.onTeam), Has Status(Global.ball1, Stunned) || Has Status(Global.ball2,
			Stunned) || !Global.ballOnGround), Custom String("{0} {1} {0}", Icon String(Warning), Global.detonationCounter), Position Of(
			Global.rootBall) + Vector(Empty Array, 1.500, Empty Array), 2, Clip Against Surfaces, Visible To Position and String, Orange,
			Visible Always);
		Global.counterTexts[2] = Last Text ID;
	}
}

rule("e")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is On Ground(Global.rootBall) == True;
	}

	actions
	{
		Global.ballOnGround = True;
	}
}

rule("e")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is In Air(Global.rootBall) == True;
	}

	actions
	{
		Global.ballOnGround = False;
	}
}

rule("Volleyball: Kill players touching net")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.volleyball == True;
		!Event Player.isWorkingDummy == True;
		((Event Player.blueSide && X Component Of(Position Of(Event Player)) < 0.350) || (!Event Player.blueSide && X Component Of(
			Position Of(Event Player)) > -0.350)) == True;
	}

	actions
	{
		If(Y Component Of(Position Of(Event Player)) < 158.380);
			Kill(Event Player, Null);
		Else;
			Event Player.blueSide = !Event Player.blueSide;
		End;
	}
}

rule("Volleyball: Start volleyball counter")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.volleyball == True;
		Global.ballReady == True;
		Is On Ground(Global.rootBall) == True;
		!Global.isCountingDown == True;
		!Global.ballIsOnStand == True;
		!(Has Status(Global.ball1, Stunned) || Has Status(Global.ball2, Stunned)) == True;
	}

	actions
	{
		Chase Global Variable At Rate(detonationCounter, 0, 1, None);
		Global.isCountingDown = True;
	}
}

rule("Volleyball: Ball on Team 1's side")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.volleyball == True;
		Global.ballReady == True;
		!Global.ballIsOnStand == True;
		X Component Of(Position Of(Global.rootBall)) > 0;
	}

	actions
	{
		Global.onTeam = Team 1;
		Stop Chasing Global Variable(detonationCounter);
		Global.detonationCounter = Global.detonationTime;
		Global.isCountingDown = False;
		Global.detonationTime = Max(2, Global.detonationTime - 1);
	}
}

rule("Volleyball: Ball on Team 2's side")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.volleyball == True;
		Global.ballReady == True;
		!Global.ballIsOnStand == True;
		X Component Of(Position Of(Global.rootBall)) < 0;
	}

	actions
	{
		Global.onTeam = Team 2;
		Stop Chasing Global Variable(detonationCounter);
		Global.detonationCounter = Global.detonationTime;
		Global.isCountingDown = False;
		Global.detonationTime = Max(2, Global.detonationTime - 1);
	}
}

rule("Volleyball: Volleyball detonates")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.volleyball == True;
		Global.ballReady == True;
		Is On Ground(Global.rootBall) == True;
		Global.isCountingDown == True;
		Global.detonationCounter == 0;
		!(Has Status(Global.ball1, Stunned) || Has Status(Global.ball2, Stunned)) == True;
	}

	actions
	{
		Play Effect(All Players(All Teams), Ring Explosion Sound, Team 1, Position Of(Global.rootBall), 150);
		Big Message(All Players(Opposite Team Of(Global.onTeam)), Custom String("{0} Your team scores! {0}", Icon String(Fire)));
		Big Message(All Players(Global.onTeam), Custom String("{0} The enemy team scores! {0}", Icon String(Recycle)));
		Global.totalScore += 1;
		If(Global.onTeam == Team 2);
			Play Effect(All Players(All Teams), Ring Explosion, Team 1, Position Of(Global.rootBall), 150);
			Global.blueScore += 1;
		Else;
			Play Effect(All Players(All Teams), Ring Explosion, Team 2, Position Of(Global.rootBall), 150);
			Global.redScore += 1;
		End;
		Global.detonationTime = 10;
		Call Subroutine(respawnBall);
		Global.isCountingDown = False;
		Stop Chasing Global Variable(detonationCounter);
		Call Subroutine(DestroyCounterText);
	}
}

rule("Maze: Start/Stop")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Communicating(Host Player, Voice Line Down) == True;
	}

	actions
	{
		Destroy All Effects;
		Global.gamemode = 5;
		Global.generateStep = 1;
	}
}

rule("Maze: Generate: Initial states")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.generateStep == 1;
	}

	actions
	{
		Global.i_3 = 0;
		While(Global.i_3 <= 100);
			Global.cellStates[Global.i_3] = 15;
			Global.i_3 += 1;
		End;
		Global.generateStep = 2;
		Create HUD Text(All Players(All Teams), Icon String(Spiral), Custom String("Generating maze..."), Custom String("{0}%",
			Round To Integer(Global._extendedGlobalCollection[15] / 100 * 100, Up)), Top, 1, Orange, Turquoise, Green,
			Visible To and String, Visible Always);
		Global._extendedGlobalCollection[16] = Last Text ID;
	}
}

rule("Maze: Generate: Visit Cells")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.generateStep == 2;
	}

	actions
	{
		Global.initialX = Random Integer(0, 9);
		Global.initialY = Random Integer(0, 9);
		Modify Global Variable(toVisitX, Append To Array, Global.initialX);
		Modify Global Variable(toVisitY, Append To Array, Global.initialY);
		Global.cellStates[Global.initialX * 10 + Global.initialY] += 16;
		While(Count Of(Global.toVisitX) > 0);
			Global._extendedGlobalCollection[15] += 1;
			Global._extendedGlobalCollection[25] = Last Of(Global.toVisitX);
			Global._extendedGlobalCollection[26] = Last Of(Global.toVisitY);
			Global._extendedGlobalCollection[27] = Count Of(Global.toVisitX) - 1;
			Global._extendedGlobalCollection[28] = Randomized Array(Array(0, 1, 2, 3));
			Global._extendedGlobalCollection[29] = 0;
			While(Global._extendedGlobalCollection[29] < Count Of(Global._extendedGlobalCollection[28]));
				Global._extendedGlobalCollection[30] = Global._extendedGlobalCollection[25] + Global._extendedGlobalCollection[17][Global._extendedGlobalCollection[28][Global._extendedGlobalCollection[29]]];
				Global._extendedGlobalCollection[31] = Global._extendedGlobalCollection[26] + Global._extendedGlobalCollection[18][Global._extendedGlobalCollection[28][Global._extendedGlobalCollection[29]]];
				Global._extendedGlobalCollection[32] = Global._extendedGlobalCollection[30] * 10 + Global._extendedGlobalCollection[31];
				If(
					Global._extendedGlobalCollection[30] >= 0 && Global._extendedGlobalCollection[31] >= 0 && Global._extendedGlobalCollection[30] < 10 && Global._extendedGlobalCollection[31] < 10 && Global.cellStates[Global._extendedGlobalCollection[32]] < 16);
					Global.cellStates[Global._extendedGlobalCollection[25] * 10 + Global._extendedGlobalCollection[26]] -= Global.dirFlag[Global._extendedGlobalCollection[28][Global._extendedGlobalCollection[29]]];
					Global.cellStates[Global._extendedGlobalCollection[32]] -= Global.dirFlag[Global._extendedGlobalCollection[28][Global._extendedGlobalCollection[29]] + (
						Global._extendedGlobalCollection[28][Global._extendedGlobalCollection[29]] < 2 ? 2 : -2)];
					Global.cellStates[Global._extendedGlobalCollection[32]] += 16;
					Modify Global Variable(toVisitX, Append To Array, Global._extendedGlobalCollection[30]);
					Modify Global Variable(toVisitY, Append To Array, Global._extendedGlobalCollection[31]);
				End;
				Global._extendedGlobalCollection[29] += 1;
			End;
			Wait(0.016, Ignore Condition);
			Modify Global Variable(toVisitX, Remove From Array By Index, Global._extendedGlobalCollection[27]);
			Modify Global Variable(toVisitY, Remove From Array By Index, Global._extendedGlobalCollection[27]);
		End;
		Global.generateStep = 3;
	}
}

rule("Maze: Generate: Create Walls: X axis")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.generateStep == 3;
	}

	actions
	{
		Global._extendedGlobalCollection[33] = 0;
		While(Global._extendedGlobalCollection[33] < 10);
			Global._extendedGlobalCollection[34] = -1;
			Global._extendedGlobalCollection[35] = -1;
			Global._extendedGlobalCollection[36] = 0;
			While(Global._extendedGlobalCollection[36] < 10);
				Global.cellCheck = Global.cellStates[Global._extendedGlobalCollection[36] * 10 + Global._extendedGlobalCollection[33]] - 16;
				If(Global.cellCheck >= 4 && (Global.cellCheck - 4)
					% 8 <= 3 && Global._extendedGlobalCollection[35] == -1 && Global._extendedGlobalCollection[33] == 0);
					Global._extendedGlobalCollection[35] = Global._extendedGlobalCollection[36];
				End;
				If(Global.cellCheck % 2 > 0);
					If(Global._extendedGlobalCollection[34] == -1);
						Global._extendedGlobalCollection[34] = Global._extendedGlobalCollection[36];
					End;
				Else If(Global._extendedGlobalCollection[34] != -1);
					Modify Global Variable(xAxisWalls, Append To Array, Vector((Global._extendedGlobalCollection[34] - 0.500) * 8, (
						Global._extendedGlobalCollection[36] - 1 + 0.500) * 8, (Global._extendedGlobalCollection[33] + 0.500) * 8));
					Global._extendedGlobalCollection[34] = -1;
				End;
				Global._extendedGlobalCollection[36] += 1;
			End;
			If(Global._extendedGlobalCollection[34] != -1);
				Modify Global Variable(xAxisWalls, Append To Array, Vector((Global._extendedGlobalCollection[34] - 0.500) * 8, 76, (
					Global._extendedGlobalCollection[33] + 0.500) * 8));
			End;
			If(Global._extendedGlobalCollection[35] != -1);
				Modify Global Variable(xAxisWalls, Append To Array, Vector((Global._extendedGlobalCollection[35] - 0.500) * 8, 76, (
					Global._extendedGlobalCollection[33] - 0.500) * 8));
			End;
			Global._extendedGlobalCollection[33] += 1;
		End;
		Global.xi = 0;
		While(Global.xi < Count Of(Global.xAxisWalls));
			Global.xAxisWalls[Global.xi] = Vector(-86.560 + X Component Of(Global.xAxisWalls[Global.xi]), -86.560 + Y Component Of(
				Global.xAxisWalls[Global.xi]), 83.640 + Z Component Of(Global.xAxisWalls[Global.xi]));
			Global._extendedGlobalCollection[37] = Vector(X Component Of(Global.xAxisWalls[Global.xi]), 156.080, Z Component Of(
				Global.xAxisWalls[Global.xi]));
			Global._extendedGlobalCollection[38] = Vector(Y Component Of(Global.xAxisWalls[Global.xi]), 156.080, Z Component Of(
				Global.xAxisWalls[Global.xi]));
			Create Beam Effect(All Players(All Teams), Good Beam, Global._extendedGlobalCollection[37], Global._extendedGlobalCollection[38],
				Red, Visible To);
			Global.xi += 1;
		End;
		Global.generateStep = 4;
	}
}

rule("Maze: Generate: Create Walls: Z axis")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.generateStep == 4;
	}

	actions
	{
		Global._extendedGlobalCollection[39] = 0;
		While(Global._extendedGlobalCollection[39] < 10);
			Global._extendedGlobalCollection[40] = -1;
			Global._extendedGlobalCollection[41] = -1;
			Global._extendedGlobalCollection[42] = 0;
			While(Global._extendedGlobalCollection[42] < 10);
				Global.cellCheck_0 = Global.cellStates[Global._extendedGlobalCollection[39] * 10 + Global._extendedGlobalCollection[42]] - 16;
				If(Global.cellCheck_0 >= 8 && Global._extendedGlobalCollection[41] == -1 && Global._extendedGlobalCollection[39] == 0);
					Global._extendedGlobalCollection[41] = Global._extendedGlobalCollection[42];
				End;
				If(Global.cellCheck_0 >= 2 && (Global.cellCheck_0 - 2) % 4 <= 1);
					If(Global._extendedGlobalCollection[40] == -1);
						Global._extendedGlobalCollection[40] = Global._extendedGlobalCollection[42];
					End;
				Else If(Global._extendedGlobalCollection[40] != -1);
					Modify Global Variable(zAxisWalls, Append To Array, Vector((Global._extendedGlobalCollection[40] - 0.500) * 8, (
						Global._extendedGlobalCollection[42] - 1 + 0.500) * 8, (Global._extendedGlobalCollection[39] + 0.500) * 8));
					Global._extendedGlobalCollection[40] = -1;
				End;
				Global._extendedGlobalCollection[42] += 1;
			End;
			If(Global._extendedGlobalCollection[40] != -1);
				Modify Global Variable(zAxisWalls, Append To Array, Vector((Global._extendedGlobalCollection[40] - 0.500) * 8, 76, (
					Global._extendedGlobalCollection[39] + 0.500) * 8));
			End;
			If(Global._extendedGlobalCollection[41] != -1);
				Modify Global Variable(zAxisWalls, Append To Array, Vector((Global._extendedGlobalCollection[41] - 0.500) * 8, 76, (
					Global._extendedGlobalCollection[39] - 0.500) * 8));
			End;
			Global._extendedGlobalCollection[39] += 1;
		End;
		Global.zi = 0;
		While(Global.zi < Count Of(Global.zAxisWalls));
			Global.zAxisWalls[Global.zi] = Vector(83.640 + X Component Of(Global.zAxisWalls[Global.zi]), 83.640 + Y Component Of(
				Global.zAxisWalls[Global.zi]), -86.560 + Z Component Of(Global.zAxisWalls[Global.zi]));
			Global._extendedGlobalCollection[43] = Vector(Z Component Of(Global.zAxisWalls[Global.zi]), 156.080, X Component Of(
				Global.zAxisWalls[Global.zi]));
			Global._extendedGlobalCollection[44] = Vector(Z Component Of(Global.zAxisWalls[Global.zi]), 156.080, Y Component Of(
				Global.zAxisWalls[Global.zi]));
			Create Beam Effect(All Players(All Teams), Good Beam, Global._extendedGlobalCollection[43], Global._extendedGlobalCollection[44],
				Red, Visible To);
			Global.zi += 1;
		End;
		Global.generateStep = 5;
	}
}

rule("Maze: Hunter and Misc Setup")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.generateStep == 5;
	}

	actions
	{
		Destroy HUD Text(Global._extendedGlobalCollection[16]);
		Create Effect(All Players(All Teams), Cloud, White, Vector(-86.560, 154.880, 83.640) + Vector(40, Empty Array, 40), 80, None);
		Create Dummy Bot(Hero(Roadhog), Team 1, -1, Vector(-86.560 + Random Integer(0, 9) * 8, 154.880, 83.640 + Random Integer(0, 9) * 8),
			Vector(Empty Array, Empty Array, Empty Array));
		Global.navigator = Last Created Entity;
		Global.navigator.isWorkingDummy = True;
		Wait(0.016, Ignore Condition);
		Set Move Speed(Global.navigator, 125);
		Teleport(Global.navigator, Vector(-86.560 + Random Integer(0, 9) * 8, 154.880, 83.640 + Random Integer(0, 9) * 8));
		Global.generateStep = 6;
	}
}

rule("Maze: Setup players")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.generateStep == 5;
		Has Spawned(Event Player) == True;
		Is Alive(Event Player) == True;
		!Event Player.isWorkingDummy == True;
	}

	actions
	{
		Global._extendedGlobalCollection[1] = 100;
		Teleport(Event Player, Vector(-86.560 + Random Integer(0, 9) * 8, 154.880, 83.640 + Random Integer(0, 9) * 8));
	}
}

rule("(High Server Loa​d) Maze: Kill players on walls")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.generateStep == 6;
	}

	actions
	{
		Global._extendedGlobalCollection[45] = 0;
		While(Global._extendedGlobalCollection[45] < Count Of(Filtered Array(All Players(All Teams),
			!Current Array Element.isWorkingDummy)));
			If(!Is Button Held(Filtered Array(All Players(All Teams), !Current Array Element.isWorkingDummy)
				[Global._extendedGlobalCollection[45]], Crouch));
				Global.px = X Component Of(Position Of(Filtered Array(All Players(All Teams), !Current Array Element.isWorkingDummy)
					[Global._extendedGlobalCollection[45]]));
				Global.pz = Z Component Of(Position Of(Filtered Array(All Players(All Teams), !Current Array Element.isWorkingDummy)
					[Global._extendedGlobalCollection[45]]));
				If(Is True For Any(Global.xAxisWalls, Absolute Value(Global.pz - Z Component Of(Current Array Element))
					< 1.500 && Global.px > X Component Of(Current Array Element) && Y Component Of(Current Array Element) > Global.px));
					Kill(Filtered Array(All Players(All Teams), !Current Array Element.isWorkingDummy)[Global._extendedGlobalCollection[45]], Null);
				Else If(Is True For Any(Global.zAxisWalls, Absolute Value(Global.px - Z Component Of(Current Array Element))
						< 1.500 && Global.pz > X Component Of(Current Array Element) && Y Component Of(Current Array Element) > Global.pz));
					Kill(Filtered Array(All Players(All Teams), !Current Array Element.isWorkingDummy)[Global._extendedGlobalCollection[45]], Null);
				End;
				Wait(0.025, Ignore Condition);
			End;
			Global._extendedGlobalCollection[45] += 1;
		End;
		Loop If Condition Is True;
	}
}

rule("Maze: Hunter Nav: Get path")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.generateStep == 6;
		Is Communicating(Host Player, Ultimate Status) == True;
	}

	actions
	{
		Global.navigateTo = (Position Of(Host Player) - Vector(-86.560, 154.880, 83.640)) / 8;
		Global._extendedGlobalCollection[19] = True;
		Global._extendedGlobalCollection[46] = Round To Integer(X Component Of(Global.navigateTo), To Nearest);
		Global._extendedGlobalCollection[47] = Round To Integer(Z Component Of(Global.navigateTo), To Nearest);
		Global._extendedGlobalCollection[48] = Round To Integer(X Component Of((Position Of(Global.navigator) - Vector(-86.560, 154.880,
			83.640)) / 8), To Nearest);
		Global._extendedGlobalCollection[49] = Round To Integer(Z Component Of((Position Of(Global.navigator) - Vector(-86.560, 154.880,
			83.640)) / 8), To Nearest);
		Global.aStarCheck = Empty Array;
		Modify Global Variable(aStarCheck, Append To Array, Vector(Global._extendedGlobalCollection[46], -1,
			Global._extendedGlobalCollection[47]));
		Global._extendedGlobalCollection[50] = -1;
		Global.visited = Empty Array;
		Global._extendedGlobalCollection[51] = 0;
		While(Global._extendedGlobalCollection[51] < Count Of(Global.aStarCheck) && Global._extendedGlobalCollection[50] == -1);
			Global._extendedGlobalCollection[52] = X Component Of(Global.aStarCheck[Global._extendedGlobalCollection[51]]);
			Global._extendedGlobalCollection[53] = Z Component Of(Global.aStarCheck[Global._extendedGlobalCollection[51]]);
			Global._extendedGlobalCollection[54] = Global.cellStates[Global._extendedGlobalCollection[52] * 10 + Global._extendedGlobalCollection[53]] - 16;
			Global.visited[Global._extendedGlobalCollection[52] * 10 + Global._extendedGlobalCollection[53]] = True;
			If(
				Global._extendedGlobalCollection[52] == Global._extendedGlobalCollection[48] && Global._extendedGlobalCollection[53] == Global._extendedGlobalCollection[49]);
				Global._extendedGlobalCollection[50] = Global._extendedGlobalCollection[51];
			Else;
				If(Global._extendedGlobalCollection[52] > 0 && Global._extendedGlobalCollection[54] < 8 && !Global.visited[(
					Global._extendedGlobalCollection[52] - 1) * 10 + Global._extendedGlobalCollection[53]]);
					Modify Global Variable(aStarCheck, Append To Array, Vector(Global._extendedGlobalCollection[52] - 1,
						Global._extendedGlobalCollection[51], Global._extendedGlobalCollection[53]));
					Global.visited[(Global._extendedGlobalCollection[52] - 1) * 10 + Global._extendedGlobalCollection[53]] = True;
				End;
				If(Global._extendedGlobalCollection[53] > 0 && !(Global._extendedGlobalCollection[54] >= 4 && (
					Global._extendedGlobalCollection[54] - 4) % 8 <= 3) && !Global.visited[Global._extendedGlobalCollection[52] * 10 + (
					Global._extendedGlobalCollection[53] - 1)]);
					Modify Global Variable(aStarCheck, Append To Array, Vector(Global._extendedGlobalCollection[52],
						Global._extendedGlobalCollection[51], Global._extendedGlobalCollection[53] - 1));
					Global.visited[Global._extendedGlobalCollection[52] * 10 + (Global._extendedGlobalCollection[53] - 1)] = True;
				End;
				Wait(0.016, Ignore Condition);
				If(Global._extendedGlobalCollection[52] < 9 && !(Global._extendedGlobalCollection[54] >= 2 && (
					Global._extendedGlobalCollection[54] - 2) % 4 <= 1) && !Global.visited[(Global._extendedGlobalCollection[52] + 1)
					* 10 + Global._extendedGlobalCollection[53]]);
					Modify Global Variable(aStarCheck, Append To Array, Vector(Global._extendedGlobalCollection[52] + 1,
						Global._extendedGlobalCollection[51], Global._extendedGlobalCollection[53]));
					Global.visited[(Global._extendedGlobalCollection[52] + 1) * 10 + Global._extendedGlobalCollection[53]] = True;
				End;
				If(
					Global._extendedGlobalCollection[53] < 9 && Global._extendedGlobalCollection[54] % 2 <= 0 && !Global.visited[Global._extendedGlobalCollection[52] * 10 + Global._extendedGlobalCollection[53] + 1]);
					Modify Global Variable(aStarCheck, Append To Array, Vector(Global._extendedGlobalCollection[52],
						Global._extendedGlobalCollection[51], Global._extendedGlobalCollection[53] + 1));
					Global.visited[Global._extendedGlobalCollection[52] * 10 + Global._extendedGlobalCollection[53] + 1] = True;
				End;
			End;
			Global._extendedGlobalCollection[51] += 1;
		End;
		Global.visited = Empty Array;
		Global.walkPath = Empty Array;
		While(Global._extendedGlobalCollection[50] != -1);
			Modify Global Variable(walkPath, Append To Array, Vector(-86.560 + X Component Of(
				Global.aStarCheck[Global._extendedGlobalCollection[50]]) * 8, 154.880, 83.640 + Z Component Of(
				Global.aStarCheck[Global._extendedGlobalCollection[50]]) * 8));
			Global._extendedGlobalCollection[50] = Y Component Of(Global.aStarCheck[Global._extendedGlobalCollection[50]]);
		End;
		Global.aStarCheck = Empty Array;
		Global._extendedGlobalCollection[19] = False;
	}
}

rule("Maze: Hunter Nav: Start moving")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.generateStep == 6;
		!Global._extendedGlobalCollection[19] == True;
		Count Of(Global.walkPath) > 0;
	}

	actions
	{
		Start Throttle In Direction(Global.navigator, Direction Towards(Position Of(Global.navigator), First Of(Global.walkPath)), 1,
			To World, Replace existing throttle, Direction and Magnitude);
		Start Facing(Global.navigator, Direction Towards(Position Of(Global.navigator), First Of(Global.walkPath)), 150, To World,
			Direction and Turn Rate);
	}
}

rule("Maze: Hunter Nav: Next node")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.generateStep == 6;
		!Global._extendedGlobalCollection[19] == True;
		Count Of(Global.walkPath) > 0;
		Distance Between(Global.navigator, First Of(Global.walkPath)) < 1;
	}

	actions
	{
		Modify Global Variable(walkPath, Remove From Array By Index, 0);
	}
}

rule("Maze: Hunter Nav: Stop")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.generateStep == 6;
		!Global._extendedGlobalCollection[19] == True;
		Count Of(Global.walkPath) == 0;
	}

	actions
	{
		Stop Throttle In Direction(Global.navigator);
		Stop Facing(Global.navigator);
	}
}

rule("Dodgeball: Team1 Boundary")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.gamemode == 6;
		Team Of(Event Player) == Team 1;
		X Component Of(Position Of(Event Player)) < 0;
		Y Component Of(Position Of(Event Player)) < 200;
	}

	actions
	{
		Wait(0.016, Ignore Condition);
		Abort If Condition Is False;
		Apply Impulse(Event Player, Left, 5 + Distance Between(Vector(Empty Array, Empty Array, Empty Array), Velocity Of(Event Player)),
			To World, Cancel Contrary Motion);
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
		disabled Play Effect(Event Player, Debuff Impact Sound, White, Event Player, 100);
	}
}

rule("Dodgeball: Team2 Boundary")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.gamemode == 6;
		Team Of(Event Player) == Team 2;
		X Component Of(Position Of(Event Player)) > 0;
		Y Component Of(Position Of(Event Player)) < 200;
	}

	actions
	{
		Wait(0.016, Ignore Condition);
		Abort If Condition Is False;
		Apply Impulse(Event Player, Right, 5 + Distance Between(Vector(Empty Array, Empty Array, Empty Array), Velocity Of(Event Player)),
			To World, Cancel Contrary Motion);
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
		disabled Play Effect(Event Player, Debuff Impact Sound, White, Event Player, 100);
	}
}

rule("Dodgeball: Draw Boundary")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.gamemode == 6;
	}

	actions
	{
		Create Beam Effect(All Players(All Teams), Bad Beam, Vector(Empty Array, 154.880, 150) - Vector(Empty Array, Empty Array, 20),
			Vector(Empty Array, 154.880, 150) + Vector(Empty Array, Empty Array, 20), Aqua, Visible To);
		Modify Global Variable(beamId, Append To Array, Last Created Entity);
		Create Beam Effect(All Players(All Teams), Bad Beam, Vector(0, 154.880, 130), Vector(0, 171, 130.001), Aqua, Visible To);
		Modify Global Variable(beamId, Append To Array, Last Created Entity);
		Create Beam Effect(All Players(All Teams), Bad Beam, Vector(0, 154.880, 170), Vector(0, 171, 170.001), Aqua, Visible To);
		Modify Global Variable(beamId, Append To Array, Last Created Entity);
		Create Beam Effect(All Players(All Teams), Bad Beam, Vector(0, 171, 130), Vector(0, 171, 170), Aqua, Visible To);
		Modify Global Variable(beamId, Append To Array, Last Created Entity);
	}
}

rule("Dodgeball: Destroy Boundary")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.gamemode != 6;
	}

	actions
	{
		While(Global.beamId != Empty Array);
			Destroy Effect(First Of(Global.beamId));
			Modify Global Variable(beamId, Remove From Array By Index, 0);
		End;
	}
}

rule("Debug")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		!Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		Create HUD Text(Event Player, Null, Custom String("Eye Position:"), Eye Position(Event Player), Left, 0, White, White, Blue,
			Visible To and String, Default Visibility);
		Create HUD Text(Event Player, Null, Custom String("Position:"), Position Of(Event Player), Left, 1, White, White, Blue,
			Visible To and String, Default Visibility);
		Create HUD Text(Event Player, Null, Custom String("Throttle:"), Throttle Of(Event Player), Left, 2, White, White, Blue,
			Visible To and String, Default Visibility);
		Create HUD Text(Event Player, Null, Custom String("Facing:"), Custom String("{0} <{1}, {2}>", Facing Direction Of(Event Player),
			Horizontal Facing Angle Of(Event Player), Vertical Facing Angle Of(Event Player)), Left, 3, White, White, Blue,
			Visible To and String, Default Visibility);
		Create HUD Text(Event Player, Null, Custom String("Ray Cast Hit Position:"), Ray Cast Hit Position(Eye Position(Event Player),
			Eye Position(Event Player) + Facing Direction Of(Event Player) * 100, All Players(All Teams), Event Player, True), Left, 5,
			White, White, Blue, Visible To and String, Default Visibility);
		Create HUD Text(Event Player, Null, Custom String("Ray Cast Hit Normal:"), Ray Cast Hit Normal(Eye Position(Event Player),
			Eye Position(Event Player) + Facing Direction Of(Event Player) * 100, All Players(All Teams), Event Player, True), Left, 6,
			White, White, Blue, Visible To and String, Default Visibility);
		Create HUD Text(Event Player, Null, Custom String("Ray Cast Hit Player:"), Ray Cast Hit Player(Eye Position(Event Player),
			Eye Position(Event Player) + Facing Direction Of(Event Player) * 100, All Players(All Teams), Event Player, True), Left, 7,
			White, White, Blue, Visible To and String, Default Visibility);
		Create HUD Text(Event Player, Null, Custom String("Server Load:"), Server Load, Left, 8, White, White, Blue, Visible To and String,
			Default Visibility);
		Create HUD Text(Event Player, Null, Custom String("Server Load Average:"), Server Load Average, Left, 9, White, White, Blue,
			Visible To and String, Default Visibility);
		Create HUD Text(Event Player, Null, Custom String("Server Load Peak:"), Server Load Peak, Left, 10, White, White, Blue,
			Visible To and String, Default Visibility);
		Create HUD Text(Event Player, Null, Custom String("Class Memory:"), Count Of(Filtered Array(Global._classIndexes,
			Current Array Element != 0)) / 10, Left, 11, White, White, Blue, Visible To and String, Default Visibility);
		Create HUD Text(Event Player, Null, Custom String("Class Memory Used:"), Count Of(Filtered Array(Global._classIndexes,
			Current Array Element != 0)), Left, 12, White, White, Blue, Visible To and String, Default Visibility);
		Create HUD Text(Event Player, Null, Custom String("Class Memory Created:"), 1000 - Count Of(Filtered Array(Global._classIndexes,
			Current Array Element != 0)), Left, 13, White, White, Blue, Visible To and String, Default Visibility);
	}
}

rule("Free cam")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Communicating(Event Player, Voice Line Down) == True;
	}

	actions
	{
		Event Player.cam = !Event Player.cam;
	}
}

rule("Start Camera")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.cam == True;
	}

	actions
	{
		Create HUD Text(Event Player, Null, Custom String("Camera Position:"), Event Player.cameraPos, Left, 4, White, White, Blue,
			Visible To and String, Default Visibility);
		Event Player.cameraHUD = Last Text ID;
		Event Player.cameraPos = Eye Position(Event Player);
		Chase Player Variable At Rate(Event Player, cameraPos, Event Player.cameraPos + (Facing Direction Of(Event Player)
			* Z Component Of(Throttle Of(Event Player)) + Cross Product(Facing Direction Of(Event Player), Up) * X Component Of(
			Throttle Of(Event Player)) * -1 + Vector(Empty Array, Array(0, 1, -1)[Index Of Array Value(Array(Is Button Held(Event Player,
			Jump), Is Button Held(Event Player, Crouch)), True) + 1], Empty Array)) * (Is Button Held(Event Player, Ability 1)
			? 30 : 0.200), 30, Destination and Rate);
		Start Camera(Event Player, Event Player.cameraPos, Event Player.cameraPos + Facing Direction Of(Event Player), 25);
		Set Move Speed(Event Player, 0);
		Disallow Button(Event Player, Ability 1);
	}
}

rule("Stop Camera")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		!Event Player.cam == True;
	}

	actions
	{
		Stop Chasing Player Variable(Event Player, cameraPos);
		Stop Camera(Event Player);
		Set Move Speed(Event Player, 100);
		Allow Button(Event Player, Ability 1);
		Destroy HUD Text(Event Player.cameraHUD);
	}
}

rule("TP to camera")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.cam == True;
		Is Communicating(Event Player, Voice Line Left) == True;
	}

	actions
	{
		Event Player.cam = False;
		Event Player.storeFacing = Facing Direction Of(Event Player);
		Teleport(Event Player, Event Player.cameraPos);
		Set Facing(Event Player, Event Player.storeFacing, To World);
	}
}

rule("Ceiling Bounce")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Y Component Of(Eye Position(Event Player)) > 173;
		Y Component Of(Eye Position(Event Player)) < 176;
		Has Spawned(Event Player) == True;
		Is Alive(Event Player) == True;
		!Is In Spawn Room(Event Player) == True;
		Hero Of(Event Player) != Hero(Sigma);
		!Event Player.isBall == True;
	}

	actions
	{
		Small Message(All Players(All Teams), Custom String("{0} hit boundary at {1}, speed: {2}", Event Player, Position Of(Event Player),
			Speed Of(Event Player)));
		Teleport(Event Player, Position Of(Event Player) * Vector(1, Empty Array, 1) + Vector(Empty Array, 169.500, Empty Array));
		Apply Impulse(Event Player, Down, 0.001, To World, Cancel Contrary Motion);
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Ceiling Bounce")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.ballReady == True;
		Global.rootBall == Event Player;
		Has Spawned(Event Player) == True;
		Is Alive(Event Player) == True;
		!Is In Spawn Room(Event Player) == True;
		Y Component Of(Eye Position(Event Player)) > 171;
		Y Component Of(Eye Position(Event Player)) < 176;
	}

	actions
	{
		Teleport(Event Player, Position Of(Event Player) * Vector(1, Empty Array, 1) + Vector(Empty Array, 169, Empty Array));
		Apply Impulse(Event Player, Down, 0.001, To World, Cancel Contrary Motion);
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Volleyball: Reset on respawn")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.volleyball == True;
		Global.ballReady == True;
		Global.isCountingDown == True;
		Global.ballIsOnStand == True;
	}

	actions
	{
		Small Message(All Players(All Teams), Custom String("Volleyball: Reset"));
		Global.isCountingDown = False;
		Stop Chasing Global Variable(detonationCounter);
		Call Subroutine(DestroyCounterText);
	}
}

rule("dodgeball force start")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Button Held(Host Player, Crouch) == True;
		Is Button Held(Host Player, Interact) == True;
	}

	actions
	{
		Global.gamemode = 6;
	}
}

rule("dodgeball global init")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.gamemode == 6;
	}

	actions
	{
		Create HUD Text(All Players(All Teams), Ability Icon String(Hero(Reinhardt), Button(Primary Fire)), Null, Custom String(
			"Dodgeball by Therister and Protowalker\r\nA collaborative effort of Grandeur Hammers\r\nhttps://bit.ly/thisiswhereourdiscordlinkgoes"),
			Right, -2, Yellow, Red, Yellow, Visible To and String, Visible Always);
		Modify Global Variable(dodgeball_huds, Append To Array, Last Text ID);
		Create HUD Text(All Players(All Teams), Hero Icon String(Hero(Sigma)), Null, Custom String("Controls:"), Right, -1, Aqua, White,
			Aqua, Visible To and String, Default Visibility);
		Modify Global Variable(dodgeball_huds, Append To Array, Last Text ID);
		Create HUD Text(All Players(All Teams), Null, Null, Custom String("Press and hold {0} (right click) to pick up a ball.", String(
			"Secondary Fire")), Right, -0.900, Aqua, White, Aqua, Visible To and String, Default Visibility);
		Modify Global Variable(dodgeball_huds, Append To Array, Last Text ID);
		Create HUD Text(All Players(All Teams), Null, Null, Custom String("Press and hold {0} (left click) to charge up your throw.",
			String("Primary Fire")), Right, -0.800, Aqua, White, Aqua, Visible To and String, Default Visibility);
		Modify Global Variable(dodgeball_huds, Append To Array, Last Text ID);
		Create HUD Text(All Players(All Teams), Null, Null, Custom String("Release {0} (left click) to throw.", String("Primary Fire")),
			Right, -0.700, Aqua, White, Aqua, Visible To and String, Default Visibility);
		Modify Global Variable(dodgeball_huds, Append To Array, Last Text ID);
		Create HUD Text(All Players(All Teams), Null, Null, Custom String("Use {0} Kinetic Grasp to catch an enemy's ball and kill them.",
			Ability Icon String(Hero(Sigma), Button(Ability 1))), Right, -0.600, Aqua, White, Aqua, Visible To and String,
			Default Visibility);
		Modify Global Variable(dodgeball_huds, Append To Array, Last Text ID);
		Create HUD Text(All Players(Team 1), Icon String(Dizzy), Custom String("Enemy score: {0}", Global.redScore), Custom String(
			"Your team's score: {0}", Global.blueScore), Top, 1, Sky Blue, Red, Sky Blue, Visible To and String, Visible Always);
		Modify Global Variable(dodgeball_huds, Append To Array, Last Text ID);
		Create HUD Text(All Players(Team 2), Icon String(Dizzy), Custom String("Enemy score: {0}", Global.blueScore), Custom String(
			"Your team's score: {0}", Global.redScore), Top, 1, Sky Blue, Red, Sky Blue, Visible To and String, Visible Always);
		Modify Global Variable(dodgeball_huds, Append To Array, Last Text ID);
		Global.dodgeball_blue_kills = 0;
		Global.dodgeball_red_kills = 0;
		Create HUD Text(All Players(Team 1), Ability Icon String(Hero(Sigma), Button(Ability 2)), Custom String("Enemy kills: {0}",
			Global.dodgeball_red_kills), Custom String("Your team's kills: {0}", Global.dodgeball_blue_kills), Top, 2, Aqua, Red, Aqua,
			Visible To and String, Visible Always);
		Modify Global Variable(dodgeball_huds, Append To Array, Last Text ID);
		Create HUD Text(All Players(Team 2), Ability Icon String(Hero(Sigma), Button(Ability 2)), Custom String("Enemy kills: {0}",
			Global.dodgeball_blue_kills), Custom String("Your team's kills: {0}", Global.dodgeball_red_kills), Top, 2, Aqua, Red, Aqua,
			Visible To and String, Visible Always);
		Modify Global Variable(dodgeball_huds, Append To Array, Last Text ID);
		Global.dodgeball_scoring = False;
		Wait(0.250, Ignore Condition);
		Global.dodgeball_score_buffer = True;
		Wait(1, Ignore Condition);
		Global.dodgeball_score_buffer = False;
	}
}

rule("dodgeball player init")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.gamemode == 6;
		Hero Of(Event Player) != Hero(Sigma);
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Disallow Button(Event Player, Secondary Fire);
		Start Forcing Player To Be Hero(Event Player, Hero(Sigma));
		Teleport(Event Player, Vector(Team Of(Event Player) == Team 1 ? 28 : -28, 154.880, 150 + (Slot Of(Event Player) % 2 == 0 ? 4 : -4)
			* Slot Of(Event Player)));
		Set Facing(Event Player, Team Of(Event Player) == Team 1 ? Right : Left, To World);
		Set Move Speed(Event Player, 200);
		Disallow Button(Event Player, Ability 2);
		Stop Accelerating(Event Player);
		Wait(0.100, Ignore Condition);
		If(Index Of Array Value(All Players(Team Of(Event Player)), Event Player) <= 3);
			disabled Event Player.dodgeball_pos = World Vector Of(Vector(0, 1.500, 5), Event Player, Rotation And Translation);
			disabled Event Player.dodgeball_velocity = Vector(0, -0.001, 0);
			disabled Event Player.dodgeball_in_motion = True;
			Create In-World Text(Filtered Array(Players Within Radius(Event Player.dodgeball_pos, 8, All Teams, Off),
				!Event Player.dodgeball_holder), Custom String("hold {0} (right click) to pick up", String("Secondary Fire")),
				Event Player.dodgeball_pos, 1, Do Not Clip, Visible To Position and String, White, Default Visibility);
			Event Player.dodgeball_in_world_text = Last Text ID;
			disabled Create Effect(All Players(All Teams), Sphere, White, Event Player.dodgeball_pos, 1, Visible To Position and Radius);
			disabled Create In-World Text(All Players(All Teams), Custom String("holder: {0}, pos: {1}, vel: {2}", Event Player.dodgeball_holder,
				Event Player.dodgeball_pos, Event Player.dodgeball_velocity), Event Player.dodgeball_pos, 1, Do Not Clip,
				Visible To Position and String, White, Default Visibility);
			disabled Teleport(Event Player, Vector(0, 154.880, 150 + Index Of Array Value(All Players(Team Of(Event Player)), Event Player) * (!(
				Index Of Array Value(All Players(Team Of(Event Player)), Event Player) % 2) ? 1 : -1)));
			Create Effect(Filtered Array(All Players(All Teams), !Event Player.dodgeball_holder), Sphere, White, Event Player.dodgeball_pos,
				1.250, Visible To Position and Radius);
			Modify Player Variable(Event Player, dodgeball_effect, Append To Array, Last Created Entity);
			Create Effect(Filtered Array(All Players(All Teams), !Event Player.dodgeball_holder), Bad Aura, White, Event Player.dodgeball_pos,
				1, Visible To Position and Radius);
			Modify Player Variable(Event Player, dodgeball_effect, Append To Array, Last Created Entity);
			Create Icon(Filtered Array(All Players(All Teams), !Event Player.dodgeball_holder), Event Player.dodgeball_pos, Circle,
				Visible To and Position, White, True);
			Modify Player Variable(Event Player, dodgeball_effect, Append To Array, Last Created Entity);
			Create Effect(Filtered Array(All Players(All Teams), Team Of(Event Player.dodgeball_holder) == Team 1), Sphere, Team 1,
				Event Player.dodgeball_pos, 1.250, Visible To Position and Radius);
			Modify Player Variable(Event Player, dodgeball_effect, Append To Array, Last Created Entity);
			Create Effect(Filtered Array(All Players(All Teams), Team Of(Event Player.dodgeball_holder) == Team 1), Bad Aura, Team 1,
				Event Player.dodgeball_pos, 1, Visible To Position and Radius);
			Modify Player Variable(Event Player, dodgeball_effect, Append To Array, Last Created Entity);
			Create Icon(Filtered Array(All Players(All Teams), Team Of(Event Player.dodgeball_holder) == Team 1), Event Player.dodgeball_pos,
				Warning, Visible To and Position, Team 1, True);
			Modify Player Variable(Event Player, dodgeball_effect, Append To Array, Last Created Entity);
			Create Effect(Filtered Array(All Players(All Teams), Team Of(Event Player.dodgeball_holder) == Team 2), Sphere, Team 2,
				Event Player.dodgeball_pos, 1.250, Visible To Position and Radius);
			Modify Player Variable(Event Player, dodgeball_effect, Append To Array, Last Created Entity);
			Create Effect(Filtered Array(All Players(All Teams), Team Of(Event Player.dodgeball_holder) == Team 2), Bad Aura, Team 2,
				Event Player.dodgeball_pos, 1, Visible To Position and Radius);
			Modify Player Variable(Event Player, dodgeball_effect, Append To Array, Last Created Entity);
			Create Icon(Filtered Array(All Players(All Teams), Team Of(Event Player.dodgeball_holder) == Team 2), Event Player.dodgeball_pos,
				Warning, Visible To and Position, Team 2, True);
			Modify Player Variable(Event Player, dodgeball_effect, Append To Array, Last Created Entity);
			Wait(0.100, Ignore Condition);
			Event Player.dodgeball_activate = True;
		Else;
			Event Player.dodgeball_pos = Custom String("Have you ever heard the Tragedy of Darth Plagueis the Wise?");
			Event Player.dodgeball_in_motion = False;
			Event Player.dodgeball_activate = False;
	}
}

rule("Setup Arena dogg balllll")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Current Game Mode == Game Mode(Skirmish);
		Global.gamemode == 6;
	}

	actions
	{
		While(Global.arenaEffects != Empty Array);
			Destroy Effect(First Of(Global.arenaEffects));
			Modify Global Variable(arenaEffects, Remove From Array By Index, 0);
		End;
		Global.cliffBlue = Vector(30, 154.880, 130);
		Global.cliffRed = Vector(-30, 154.880, 130);
		Global.towerBlue = Vector(30, 154.880, 170);
		Global.towerRed = Vector(-30, 154.880, 170);
		Global.rowFraction = 0.066;
		Global.columnFraction = 0.100;
		Global.x = 0;
		While(Global.x <= 15);
			Global.a = Global.cliffBlue * (1 - Global.x * Global.rowFraction) + Global.cliffRed * Global.x * Global.rowFraction;
			Global.b = Global.towerBlue * (1 - Global.x * Global.rowFraction) + Global.towerRed * Global.x * Global.rowFraction;
			Create Beam Effect(All Players(All Teams), Good Beam, Global.a, Global.b, Purple, Visible To);
			Modify Global Variable(arenaEffects, Append To Array, Last Created Entity);
			Global.x += 1;
		End;
		Global.z = 0;
		While(Global.z <= 10);
			Global.a_0 = Global.cliffBlue * (1 - Global.z * Global.columnFraction) + Global.towerBlue * Global.z * Global.columnFraction;
			Global.b_0 = Global.cliffRed * (1 - Global.z * Global.columnFraction) + Global.towerRed * Global.z * Global.columnFraction;
			Create Beam Effect(All Players(All Teams), Good Beam, Global.a_0, Global.b_0, Purple, Visible To);
			Modify Global Variable(arenaEffects, Append To Array, Last Created Entity);
			Global.z += 1;
		End;
		Create Effect(All Players(All Teams), Orb, Orange, Vector(Empty Array, 161.500, 150), 0.250, Visible To);
		Create Beam Effect(All Players(All Teams), Bad Beam, Global.cliffBlue + Left * 0.001, Global.cliffBlue + Up * 16.120, Aqua,
			Visible To);
		Modify Global Variable(arenaEffects, Append To Array, Last Created Entity);
		Create Beam Effect(All Players(All Teams), Bad Beam, Global.cliffRed + Left * 0.001, Global.cliffRed + Up * 16.120, Aqua,
			Visible To);
		Modify Global Variable(arenaEffects, Append To Array, Last Created Entity);
		Create Beam Effect(All Players(All Teams), Bad Beam, Global.towerBlue + Left * 0.001, Global.towerBlue + Up * 16.120, Aqua,
			Visible To);
		Modify Global Variable(arenaEffects, Append To Array, Last Created Entity);
		Create Beam Effect(All Players(All Teams), Bad Beam, Global.towerRed + Left * 0.001, Global.towerRed + Up * 16.120, Aqua,
			Visible To);
		Modify Global Variable(arenaEffects, Append To Array, Last Created Entity);
		Create Beam Effect(All Players(All Teams), Good Beam, Global.cliffRed + Up * 16.120, Global.cliffBlue + Up * 16.120, Purple,
			Visible To);
		Modify Global Variable(arenaEffects, Append To Array, Last Created Entity);
		Create Beam Effect(All Players(All Teams), Bad Beam, Global.cliffRed + Up * 16.120, Global.towerRed + Up * 16.120, Team 2,
			Visible To);
		Modify Global Variable(arenaEffects, Append To Array, Last Created Entity);
		Create Beam Effect(All Players(All Teams), Bad Beam, Global.towerBlue + Up * 16.120, Global.cliffBlue + Up * 16.120, Team 1,
			Visible To);
		Modify Global Variable(arenaEffects, Append To Array, Last Created Entity);
		Create Beam Effect(All Players(All Teams), Good Beam, Global.towerBlue + Up * 16.120, Global.towerRed + Up * 16.120, Purple,
			Visible To);
		Modify Global Variable(arenaEffects, Append To Array, Last Created Entity);
	}
}

rule("dodgeball pickup")
{
	event
	{
		Ongoing - Each Player;
		All;
		Sigma;
	}

	conditions
	{
		Event Player.dodgeball_holder == False;
		Is True For Any(Players Within Radius(Event Player.dodgeball_pos, 8, All Teams, Off), Is Button Held(Current Array Element,
			Secondary Fire) && !Current Array Element.sigma_pickup_buffer && !Current Array Element.is_holding && Is In View Angle(
			Current Array Element, Event Player.dodgeball_pos, 45)) == True;
		Global.dodgeball_scoring == False;
	}

	actions
	{
		Event Player.dodgeball_holder = First Of(Sorted Array(Filtered Array(All Players(All Teams), Is Button Held(Current Array Element,
			Secondary Fire) && !Current Array Element.sigma_pickup_buffer && !Current Array Element.is_holding), Distance Between(
			Current Array Element, Event Player.dodgeball_pos)));
		Abort If(Event Player.dodgeball_holder == Null);
		Chase Player Variable At Rate(Event Player, dodgeball_pos, World Vector Of(Vector(0, 1.500, 0), Event Player.dodgeball_holder,
			Rotation And Translation) + Facing Direction Of(Event Player.dodgeball_holder) * 2, 1000, Destination and Rate);
		Event Player.dodgeball_held = True;
		Event Player.dodgeball_in_motion = False;
		Event Player.dodgeball_holder.is_holding = True;
	}
}

rule("dodgeball drop - release")
{
	event
	{
		Ongoing - Each Player;
		All;
		Sigma;
	}

	conditions
	{
		Is Button Held(Event Player.dodgeball_holder, Secondary Fire) == False;
		Event Player.dodgeball_holder != False;
		Event Player.dodgeball_holder.is_charging == False;
		Event Player.dodgeball_thrown == False;
	}

	actions
	{
		Call Subroutine(dodgeball_drop);
	}
}

rule("dodgeball bounce")
{
	event
	{
		Ongoing - Each Player;
		All;
		Sigma;
	}

	conditions
	{
		Event Player.dodgeball_held == False;
		(X Component Of(Event Player.dodgeball_pos) < -30 || X Component Of(Event Player.dodgeball_pos) > 30 || Y Component Of(
			Event Player.dodgeball_pos) < 156 || Y Component Of(Event Player.dodgeball_pos) > 171 || Z Component Of(
			Event Player.dodgeball_pos) < 130 || Z Component Of(Event Player.dodgeball_pos) > 170) == True;
	}

	actions
	{
		If(Distance Between(Vector(0, 0, 0), Event Player.dodgeball_velocity) > 10);
			Play Effect(All Players(All Teams), Good Explosion, Purple, Event Player.dodgeball_pos, 2);
			Play Effect(All Players(All Teams), Ring Explosion Sound, White, Event Player.dodgeball_pos, 100);
		End;
		If(X Component Of(Event Player.dodgeball_pos) <= -29.900);
			Event Player.dodgeball_bounce_normal = Left;
		Else If(X Component Of(Event Player.dodgeball_pos) >= 29.900);
			Event Player.dodgeball_bounce_normal = Right;
		Else If(Y Component Of(Event Player.dodgeball_pos) <= 156.100);
			Event Player.dodgeball_bounce_normal = Up;
		Else If(Y Component Of(Event Player.dodgeball_pos) >= 170.900);
			Event Player.dodgeball_bounce_normal = Down;
		Else If(Z Component Of(Event Player.dodgeball_pos) <= 130.100);
			Event Player.dodgeball_bounce_normal = Forward;
		Else If(Z Component Of(Event Player.dodgeball_pos) >= 169.900);
			Event Player.dodgeball_bounce_normal = Backward;
		End;
		Event Player.dodgeball_bounce += 1;
		If(Distance Between(Vector(0, 0, 0), Event Player.dodgeball_velocity) > 2);
			If(Event Player.dodgeball_bounce_normal == Up);
				Event Player.dodgeball_holder = False;
				Event Player.dodgeball_thrown = False;
			End;
			Event Player.dodgeball_velocity = Vector Towards(Event Player.dodgeball_pos,
				Event Player.dodgeball_pos + Event Player.dodgeball_velocity + Event Player.dodgeball_bounce_normal * Cosine From Degrees(
				Angle Between Vectors(Event Player.dodgeball_bounce_normal, Event Player.dodgeball_velocity * -1)) * Distance Between(Vector(0,
				0, 0), Event Player.dodgeball_velocity) * 2) * 0.700;
		Else;
			disabled Event Player.dodgeball_in_motion = False;
			Event Player.dodgeball_holder = False;
			Event Player.dodgeball_thrown = False;
			disabled Event Player.dodgeball_velocity = Vector(0, 0, 0);
		End;
		disabled If(Event Player.dodgeball_bounce > 0);
		disabled End;
		Wait(0.250, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("dodgeball charge")
{
	event
	{
		Ongoing - Each Player;
		All;
		Sigma;
	}

	conditions
	{
		Is Button Held(Event Player.dodgeball_holder, Primary Fire) == True;
		Event Player.dodgeball_held == True;
	}

	actions
	{
		Set Move Speed(Event Player.dodgeball_holder, 100);
		Event Player.dodgeball_charge = 10;
		Chase Player Variable At Rate(Event Player, dodgeball_charge, 50, 65, Destination and Rate);
		Cancel Primary Action(Event Player.dodgeball_holder);
		Allow Button(Event Player.dodgeball_holder, Ability 2);
		Press Button(Event Player.dodgeball_holder, Ability 2);
		Event Player.dodgeball_holder.is_charging = True;
		Wait(0.250, Ignore Condition);
		Disallow Button(Event Player.dodgeball_holder, Ability 2);
	}
}

rule("dodgeball launch")
{
	event
	{
		Ongoing - Each Player;
		All;
		Sigma;
	}

	conditions
	{
		(!Is Button Held(Event Player.dodgeball_holder, Primary Fire) || Event Player.dodgeball_charge >= 50) == True;
		Event Player.dodgeball_charge != 0;
		Event Player.dodgeball_holder.is_charging == True;
	}

	actions
	{
		Stop Chasing Player Variable(Event Player, dodgeball_pos);
		Cancel Primary Action(Event Player.dodgeball_holder);
		Event Player.dodgeball_velocity = Normalize(Facing Direction Of(Event Player.dodgeball_holder) + Up * 0.150)
			* Event Player.dodgeball_charge;
		Event Player.dodgeball_held = False;
		Event Player.dodgeball_in_motion = True;
		Event Player.dodgeball_bounce = 0;
		Event Player.dodgeball_charge = 0;
		Event Player.dodgeball_thrown = True;
		Set Move Speed(Event Player.dodgeball_holder, 200);
		disabled Wait(0.500, Ignore Condition);
		Event Player.dodgeball_holder.is_charging = False;
		Event Player.dodgeball_holder.is_holding = False;
		Stop Holding Button(Event Player, Secondary Fire);
		Disallow Button(Event Player, Secondary Fire);
		Set Status(Event Player.dodgeball_holder, Null, Hacked, 1);
		Event Player.dodgeball_holder.sigma_pickup_buffer = 1;
		Chase Player Variable At Rate(Event Player.dodgeball_holder, sigma_pickup_buffer, 0, 1, Destination and Rate);
		If(Is Dead(Event Player.dodgeball_holder));
			Event Player.dodgeball_velocity = Down;
	}
}

rule("dodgeball motion")
{
	event
	{
		Ongoing - Each Player;
		All;
		Sigma;
	}

	conditions
	{
		Event Player.dodgeball_in_motion == True;
	}

	actions
	{
		Event Player.dodgeball_velocity += Down * 20 * 0.016;
		Event Player.dodgeball_pos += Event Player.dodgeball_velocity * 0.016;
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("sigma hand stretch start")
{
	event
	{
		Ongoing - Each Player;
		All;
		Sigma;
	}

	conditions
	{
		Is Button Held(Event Player, Secondary Fire) == True;
		Event Player.is_charging == False;
		Event Player.sigma_pickup_buffer <= 0;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Set Invisible(Event Player, All);
		Start Camera(Event Player, Event Player.sigma_pos + Vector Towards(Position Of(Event Player), Eye Position(Event Player)),
			Event Player.sigma_pos + Vector Towards(Position Of(Event Player), Eye Position(Event Player)) + Facing Direction Of(
			Event Player), 0);
		Set Ability Cooldown(Event Player, Button(Secondary Fire), 0);
		Wait(0.016, Ignore Condition);
		Allow Button(Event Player, Secondary Fire);
		Start Holding Button(Event Player, Secondary Fire);
		Event Player.sigma_pos = Position Of(Event Player);
		Teleport(Event Player, Vector(10000, 10000, 10000));
		Wait(0.0840, Ignore Condition);
		Teleport(Event Player, Event Player.sigma_pos);
		Stop Camera(Event Player);
		Set Invisible(Event Player, None);
	}
}

rule("sigma hand stretch end")
{
	event
	{
		Ongoing - Each Player;
		All;
		Sigma;
	}

	conditions
	{
		Is Button Held(Event Player, Secondary Fire) == False;
		Event Player.is_charging == False;
	}

	actions
	{
		Stop Holding Button(Event Player, Secondary Fire);
		Disallow Button(Event Player, Secondary Fire);
		Set Status(Event Player, Null, Hacked, 1);
		Event Player.sigma_pickup_buffer = 1;
		Chase Player Variable At Rate(Event Player, sigma_pickup_buffer, 0, 1, Destination and Rate);
	}
}

rule("sigma shorter succ")
{
	event
	{
		Ongoing - Each Player;
		All;
		Sigma;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Wait(0.400, Ignore Condition);
		Cancel Primary Action(Event Player);
	}
}

disabled rule("dodgeball effect - neutral")
{
	event
	{
		Ongoing - Each Player;
		All;
		Sigma;
	}

	conditions
	{
		Event Player.dodgeball_holder == False;
	}

	actions
	{
		While(Event Player.dodgeball_effect != Empty Array);
			Destroy Icon(First Of(Event Player.dodgeball_effect));
			Destroy Effect(First Of(Event Player.dodgeball_effect));
			Modify Player Variable(Event Player, dodgeball_effect, Remove From Array By Index, 0);
		End;
		Create Effect(All Players(All Teams), Sphere, White, Event Player.dodgeball_pos, 1.250, Visible To Position and Radius);
		Modify Player Variable(Event Player, dodgeball_effect, Append To Array, Last Created Entity);
		Create Effect(All Players(All Teams), Bad Aura, White, Event Player.dodgeball_pos, 1, Visible To Position and Radius);
		Modify Player Variable(Event Player, dodgeball_effect, Append To Array, Last Created Entity);
		Create Icon(All Players(All Teams), Event Player.dodgeball_pos, Circle, Visible To and Position, White, True);
		Modify Player Variable(Event Player, dodgeball_effect, Append To Array, Last Created Entity);
	}
}

disabled rule("dodgeball effect - active team 1")
{
	event
	{
		Ongoing - Each Player;
		All;
		Sigma;
	}

	conditions
	{
		Event Player.dodgeball_holder != False;
		Team Of(Event Player.dodgeball_holder) == Team 1;
	}

	actions
	{
		While(Event Player.dodgeball_effect != Empty Array);
			Destroy Icon(First Of(Event Player.dodgeball_effect));
			Destroy Effect(First Of(Event Player.dodgeball_effect));
			Modify Player Variable(Event Player, dodgeball_effect, Remove From Array By Index, 0);
		End;
		Create Effect(All Players(All Teams), Sphere, Team 1, Event Player.dodgeball_pos, 1.250, Visible To Position and Radius);
		Modify Player Variable(Event Player, dodgeball_effect, Append To Array, Last Created Entity);
		Create Effect(All Players(All Teams), Bad Aura, Team 1, Event Player.dodgeball_pos, 1, Visible To Position and Radius);
		Modify Player Variable(Event Player, dodgeball_effect, Append To Array, Last Created Entity);
		Create Icon(All Players(All Teams), Event Player.dodgeball_pos, Warning, Visible To and Position, Team 1, True);
		Modify Player Variable(Event Player, dodgeball_effect, Append To Array, Last Created Entity);
	}
}

disabled rule("dodgeball effect - active team 2")
{
	event
	{
		Ongoing - Each Player;
		All;
		Sigma;
	}

	conditions
	{
		Event Player.dodgeball_holder != False;
		Team Of(Event Player.dodgeball_holder) == Team 2;
	}

	actions
	{
		While(Event Player.dodgeball_effect != Empty Array);
			Destroy Icon(First Of(Event Player.dodgeball_effect));
			Destroy Effect(First Of(Event Player.dodgeball_effect));
			Modify Player Variable(Event Player, dodgeball_effect, Remove From Array By Index, 0);
		End;
		Create Effect(All Players(All Teams), Sphere, Team 2, Event Player.dodgeball_pos, 1.250, Visible To Position and Radius);
		Modify Player Variable(Event Player, dodgeball_effect, Append To Array, Last Created Entity);
		Create Effect(All Players(All Teams), Bad Aura, Team 2, Event Player.dodgeball_pos, 1, Visible To Position and Radius);
		Modify Player Variable(Event Player, dodgeball_effect, Append To Array, Last Created Entity);
		Create Icon(All Players(All Teams), Event Player.dodgeball_pos, Warning, Visible To and Position, Team 2, True);
		Modify Player Variable(Event Player, dodgeball_effect, Append To Array, Last Created Entity);
	}
}

rule("dodgeball player collide")
{
	event
	{
		Ongoing - Each Player;
		All;
		Sigma;
	}

	conditions
	{
		Event Player.dodgeball_holder != False;
		Event Player.dodgeball_held == False;
		Is True For Any(All Living Players(Opposite Team Of(Team Of(Event Player.dodgeball_holder))), Distance Between(
			Event Player.dodgeball_pos, Eye Position(Current Array Element)) <= 1.250 || Distance Between(Event Player.dodgeball_pos,
			World Vector Of(Vector(0, 1.300, 0), Current Array Element, Rotation And Translation)) <= 2 || Distance Between(
			Event Player.dodgeball_pos, Position Of(Current Array Element)) <= 1.250) == True;
	}

	actions
	{
		Event Player.dodgeball_victim = First Of(Sorted Array(All Living Players(Opposite Team Of(Team Of(Event Player.dodgeball_holder))),
			Distance Between(Current Array Element, Event Player.dodgeball_pos)));
		Abort If(!Array Contains(All Living Players(All Teams), Event Player.dodgeball_victim));
		Event Player.dodgeball_velocity = ((Team Of(Event Player.dodgeball_holder) == Team 1 ? Left : Right) + Up * 0.250) * 30;
		Kill(Event Player.dodgeball_victim, Event Player.dodgeball_holder);
		Small Message(All Players(All Teams), Custom String("{0} took out {1} {2}", Event Player.dodgeball_holder,
			Event Player.dodgeball_victim, Event Player.dodgeball_bounce > 0 ? Custom String("with a bounced trick shot!!")
			: Custom String("with a dodgeball!")));
		Play Effect(All Players(All Teams), Bad Explosion, Orange, Event Player.dodgeball_victim, 5);
		Play Effect(All Players(All Teams), Explosion Sound, Orange, Event Player.dodgeball_victim, 200);
		Play Effect(All Players(All Teams), Ring Explosion, Orange, Event Player.dodgeball_holder, 10);
		Play Effect(All Players(All Teams), Buff Explosion Sound, Orange, Event Player.dodgeball_holder, 200);
		Wait(0.100, Ignore Condition);
		Event Player.dodgeball_bounce = 0;
	}
}

rule("dodgeball catch")
{
	event
	{
		Ongoing - Each Player;
		All;
		Sigma;
	}

	conditions
	{
		Event Player.dodgeball_holder != False;
		Event Player.dodgeball_holder.dodgeball_held == False;
		Is True For Any(Filtered Array(Players Within Radius(Event Player.dodgeball_pos, 5, Opposite Team Of(Team Of(
			Event Player.dodgeball_holder)), Off), Is In View Angle(Current Array Element, Event Player.dodgeball_pos, 45)),
			Is Using Ability 1(Current Array Element)) == True;
	}

	actions
	{
		Event Player.dodgeball_catcher = First Of(Sorted Array(Filtered Array(Players Within Radius(Event Player.dodgeball_pos, 6,
			Opposite Team Of(Team Of(Event Player.dodgeball_holder)), Off), Is In View Angle(Current Array Element,
			Event Player.dodgeball_pos, 45) && Is Using Ability 1(Current Array Element)), Distance Between(Event Player.dodgeball_pos,
			Current Array Element)));
		Kill(Event Player.dodgeball_holder, Event Player.dodgeball_catcher);
		Event Player.dodgeball_velocity = Up * 15;
		Small Message(All Players(All Teams), Custom String("{0} caught {1}'s dodgeball in the air!", Event Player.dodgeball_catcher,
			Event Player.dodgeball_holder));
		Play Effect(All Players(All Teams), Bad Pickup Effect, Aqua, Event Player.dodgeball_holder, 5);
		Play Effect(All Players(All Teams), Debuff Impact Sound, Orange, Event Player.dodgeball_holder, 200);
		Play Effect(All Players(All Teams), Ring Explosion, Aqua, Event Player.dodgeball_catcher, 10);
		Play Effect(All Players(All Teams), Buff Impact Sound, Orange, Event Player.dodgeball_catcher, 200);
		Event Player.dodgeball_thrown = False;
		Wait(0.100, Ignore Condition);
		Event Player.dodgeball_holder = False;
	}
}

rule("debug")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		disabled Is Button Held(Event Player, Interact) == True;
		Event Player == Host Player;
		Is Button Held(Event Player, Reload) == True;
	}

	actions
	{
		Create Dummy Bot(Hero(Sigma), Opposite Team Of(Team Of(Event Player)), -1, Event Player, Vector(0, 0, 0));
	}
}

rule("debug")
{
	event
	{
		Ongoing - Each Player;
		All;
		Sigma;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		Press Button(Event Player, Ability 1);
		Wait(0.250, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("dodgeball out of bounds")
{
	event
	{
		Ongoing - Each Player;
		All;
		Sigma;
	}

	conditions
	{
		Event Player.dodgeball_holder.dodgeball_held == False;
		(X Component Of(Event Player.dodgeball_pos) < -30 || X Component Of(Event Player.dodgeball_pos) > 30 || Y Component Of(
			Event Player.dodgeball_pos) < 155.900 || Y Component Of(Event Player.dodgeball_pos) > 171 || Z Component Of(
			Event Player.dodgeball_pos) < 130 || Z Component Of(Event Player.dodgeball_pos) > 170) == True;
		Event Player.dodgeball_activate == True;
	}

	actions
	{
		Wait(0.016, Ignore Condition);
		Abort If Condition Is False;
		Call Subroutine(dodgeball_clamp_in_range);
		Loop If Condition Is True;
	}
}

rule("sigma fake walls")
{
	event
	{
		Ongoing - Each Player;
		All;
		Sigma;
	}

	conditions
	{
		(X Component Of(Position Of(Event Player)) < -30 || X Component Of(Position Of(Event Player)) > 30 || Z Component Of(Position Of(
			Event Player)) < 130 || Z Component Of(Position Of(Event Player)) > 170) == True;
		Y Component Of(Position Of(Event Player)) < 200;
	}

	actions
	{
		Event Player.sigma_normal = Vector(0, 0, 0);
		disabled Event Player.sigma_x_comp = X Component Of(Position Of(Event Player));
		disabled Event Player.sigma_z_comp = Z Component Of(Position Of(Event Player));
		disabled If(X Component Of(Position Of(Event Player)) <= -29.900);
		disabled Event Player.sigma_x_comp = -29.900;
		disabled Else If(X Component Of(Position Of(Event Player)) >= 29.900);
		disabled Event Player.sigma_x_comp = 29.900;
		disabled End;
		disabled If(Z Component Of(Position Of(Event Player)) <= 130.100);
		disabled Event Player.sigma_z_comp = 130.100;
		disabled Else If(Z Component Of(Position Of(Event Player)) >= 169.900);
		disabled Event Player.sigma_z_comp = 169.900;
		disabled End;
		disabled Teleport(Event Player, Vector(Event Player.sigma_x_comp, Y Component Of(Position Of(Event Player)), Event Player.sigma_z_comp));
		disabled Wait(0.100, Ignore Condition);
		disabled Loop If Condition Is True;
		If(X Component Of(Position Of(Event Player)) <= -29.900);
			Event Player.sigma_normal += Left;
		Else If(X Component Of(Position Of(Event Player)) >= 29.900);
			Event Player.sigma_normal += Right;
		End;
		If(Z Component Of(Position Of(Event Player)) <= 130.100);
			Event Player.sigma_normal += Forward;
		Else If(Z Component Of(Position Of(Event Player)) >= 169.900);
			Event Player.sigma_normal += Backward;
		End;
		Apply Impulse(Event Player, Event Player.sigma_normal, Speed Of(Event Player), To World, Cancel Contrary Motion);
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
		Apply Impulse(Event Player, Event Player.sigma_normal * -1, 0.001, To World, Cancel Contrary Motion);
	}
}

rule("dodgeball rest")
{
	event
	{
		Ongoing - Each Player;
		All;
		Sigma;
	}

	conditions
	{
		Distance Between(Vector(0, 0, 0), Event Player.dodgeball_velocity) < 2;
		Y Component Of(Event Player.dodgeball_pos) < 156.100;
		Event Player.dodgeball_in_motion == True;
	}

	actions
	{
		Event Player.dodgeball_in_motion = False;
		Event Player.dodgeball_velocity = Vector(0, 0, 0);
	}
}

rule("dodgeball drop subr")
{
	event
	{
		Subroutine;
		dodgeball_drop;
	}

	actions
	{
		Event Player.dodgeball_holder.is_holding = False;
		Stop Chasing Player Variable(Event Player, dodgeball_pos);
		Event Player.dodgeball_held = False;
		Event Player.dodgeball_velocity = Vector(0, -0.100, 0);
		Event Player.dodgeball_in_motion = True;
		Event Player.dodgeball_bounce = 0;
		Event Player.dodgeball_holder = False;
	}
}

rule("dodgeball drop - on death")
{
	event
	{
		Ongoing - Each Player;
		All;
		Sigma;
	}

	conditions
	{
		Is Dead(Event Player.dodgeball_holder) == True;
		Event Player.is_holding == True;
	}

	actions
	{
		Call Subroutine(dodgeball_drop);
	}
}

rule("sigma too high")
{
	event
	{
		Ongoing - Each Player;
		All;
		Sigma;
	}

	conditions
	{
		Y Component Of(Position Of(Event Player)) > 200;
	}

	actions
	{
		Wait(0.250, Abort When False);
		Teleport(Event Player, Vector(0, 154.880, 150));
		Loop If Condition Is True;
	}
}

rule("dodgeball kill count")
{
	event
	{
		Player Died;
		All;
		All;
	}

	conditions
	{
		Global.gamemode == 6;
	}

	actions
	{
		If(Team Of(Event Player) == Team 1);
			Global.dodgeball_red_kills += 1;
		Else;
			Global.dodgeball_blue_kills += 1;
	}
}

rule("dodgeball clean up -- per player")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.gamemode != 6;
		Hero Of(Event Player) != Hero(Reinhardt);
		Has Spawned(Event Player) == True;
		!Event Player.isBall == True;
	}

	actions
	{
		Start Forcing Player To Be Hero(Event Player, Hero(Reinhardt));
		Allow Button(Event Player, Secondary Fire);
		Allow Button(Event Player, Ability 2);
		Destroy In-World Text(Event Player.dodgeball_in_world_text);
		While(Event Player.dodgeball_effect != Empty Array);
			Destroy Icon(First Of(Event Player.dodgeball_effect));
			Destroy Effect(First Of(Event Player.dodgeball_effect));
			Modify Player Variable(Event Player, dodgeball_effect, Remove From Array By Index, 0);
		End;
		Set Invisible(Event Player, None);
	}
}

rule("dodgeball clean up -- global")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.gamemode != 6;
	}

	actions
	{
		While(Global.dodgeball_huds != Empty Array);
			Destroy HUD Text(First Of(Global.dodgeball_huds));
			Modify Global Variable(dodgeball_huds, Remove From Array By Index, 0);
		End;
	}
}

rule("dodgeball score increase - team 1")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.dodgeball_blue_kills >= 5 * Count Of(Filtered Array(All Players(Team 1), Has Spawned(Current Array Element)));
		Global.dodgeball_scoring == False;
		Global.gamemode == 6;
	}

	actions
	{
		Global.dodgeball_scoring = True;
		Global.blueScore += 1;
		Big Message(All Players(All Teams), Custom String("Team 1 wins!"));
		Play Effect(All Players(Team 1), Buff Impact Sound, Team 1, Vector(0, 161.500, 150), 200);
		Play Effect(All Players(Team 2), Debuff Impact Sound, Team 2, Vector(0, 161.500, 150), 200);
		Play Effect(All Players(All Teams), Good Explosion, Team 1, Vector(0, 161.500, 150), 30);
		Play Effect(All Players(All Teams), Ring Explosion, Team 1, Vector(0, 161.500, 150), 60);
		Call Subroutine(dodgeball_reset);
	}
}

rule("dodgeball score increase - team 2")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.dodgeball_red_kills >= 5 * Count Of(Filtered Array(All Players(Team 2), Has Spawned(Current Array Element)));
		Global.dodgeball_scoring == False;
		Global.gamemode == 6;
	}

	actions
	{
		Global.dodgeball_scoring = True;
		Global.redScore += 1;
		Big Message(All Players(All Teams), Custom String("Team 2 wins!"));
		Play Effect(All Players(Team 2), Buff Impact Sound, Team 2, Vector(0, 161.500, 150), 200);
		Play Effect(All Players(Team 1), Debuff Impact Sound, Team 2, Vector(0, 161.500, 150), 200);
		Play Effect(All Players(All Teams), Good Explosion, Team 2, Vector(0, 161.500, 150), 30);
		Play Effect(All Players(All Teams), Ring Explosion, Team 2, Vector(0, 161.500, 150), 60);
		Call Subroutine(dodgeball_reset);
	}
}

rule("dodgeball reset subr")
{
	event
	{
		Subroutine;
		dodgeball_reset;
	}

	actions
	{
		Global.dodgeball_static_timer = 15;
		Stop Chasing Global Variable(dodgeball_static_timer);
		Set Slow Motion(25);
		Wait(1, Ignore Condition);
		Set Slow Motion(100);
		Global.dodgeball_score_buffer = True;
		Wait(3, Ignore Condition);
		Global.dodgeball_blue_kills = 0;
		Global.dodgeball_red_kills = 0;
		Big Message(All Players(All Teams), Custom String("New round: Start!"));
		Chase Global Variable At Rate(dodgeball_static_timer, 0, 1, Destination and Rate);
		Global.dodgeball_scoring = False;
		Wait(1, Ignore Condition);
		Global.dodgeball_score_buffer = False;
	}
}

rule("dodgeball positions reset")
{
	event
	{
		Ongoing - Each Player;
		All;
		Sigma;
	}

	conditions
	{
		Event Player.dodgeball_activate == True;
		Global.dodgeball_scoring == False;
		Global.gamemode == 6;
		Global.dodgeball_score_buffer == True;
		Y Component Of(Position Of(Event Player)) > 154.800;
	}

	actions
	{
		Call Subroutine(dodgeball_drop);
		Event Player.dodgeball_pos = Vector(Team Of(Event Player) == Team 1 ? 10 : -10, 156, 150 + (Slot Of(Event Player)
			% 2 == 0 ? 4 : -4) * Slot Of(Event Player));
		Event Player.dodgeball_velocity = Vector(0, -0.001, 0);
		Event Player.dodgeball_in_motion = True;
		Play Effect(All Players(All Teams), Good Explosion, Purple, Event Player.dodgeball_pos, 2);
		Play Effect(All Players(All Teams), Buff Impact Sound, White, Event Player.dodgeball_pos, 100);
	}
}

rule("dodgeball clamp in range subr")
{
	event
	{
		Subroutine;
		dodgeball_clamp_in_range;
	}

	actions
	{
		Event Player.dodgeball_x_comp = X Component Of(Event Player.dodgeball_pos);
		Event Player.dodgeball_y_comp = Y Component Of(Event Player.dodgeball_pos);
		Event Player.dodgeball_z_comp = Z Component Of(Event Player.dodgeball_pos);
		If(X Component Of(Event Player.dodgeball_pos) <= -29.900);
			Event Player.dodgeball_x_comp = -29;
		Else If(X Component Of(Event Player.dodgeball_pos) >= 29.900);
			Event Player.dodgeball_x_comp = 29;
		End;
		If(Y Component Of(Event Player.dodgeball_pos) <= 155.900);
			Event Player.dodgeball_y_comp = 156;
		Else If(Y Component Of(Event Player.dodgeball_pos) >= 170.900);
			Event Player.dodgeball_y_comp = 170;
		End;
		If(Z Component Of(Event Player.dodgeball_pos) <= 130.100);
			Event Player.dodgeball_z_comp = 131;
		Else If(Z Component Of(Event Player.dodgeball_pos) >= 169.900);
			Event Player.dodgeball_z_comp = 169;
		End;
		Event Player.dodgeball_pos = Vector(Event Player.dodgeball_x_comp, Event Player.dodgeball_y_comp, Event Player.dodgeball_z_comp);
	}
}

rule("dodgeball out of bounds severe")
{
	event
	{
		Ongoing - Each Player;
		All;
		Sigma;
	}

	conditions
	{
		Event Player.dodgeball_holder.dodgeball_held == False;
		(X Component Of(Event Player.dodgeball_pos) < -30 || X Component Of(Event Player.dodgeball_pos) > 30 || Y Component Of(
			Event Player.dodgeball_pos) < 155.900 || Y Component Of(Event Player.dodgeball_pos) > 171 || Z Component Of(
			Event Player.dodgeball_pos) < 130 || Z Component Of(Event Player.dodgeball_pos) > 170) == True;
		Event Player.dodgeball_activate == True;
	}

	actions
	{
		Wait(1, Ignore Condition);
		Abort If Condition Is False;
		Call Subroutine(dodgeball_clamp_in_range);
		Loop If Condition Is True;
	}
}

rule("dodgeball ball hogging check")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Count Of(Filtered Array(All Players(All Teams), Current Array Element.dodgeball_activate && (
			Current Array Element.dodgeball_held ? Team Of(Current Array Element.dodgeball_holder) == Team 1 : X Component Of(
			Current Array Element.dodgeball_pos) > 0) && True)) != Global.dodgeball_static_check;
		Global.gamemode == 6;
	}

	actions
	{
		Global.dodgeball_static_timer = 15;
		Chase Global Variable At Rate(dodgeball_static_timer, 0, 1, Destination and Rate);
		Global.dodgeball_static_check = Count Of(Filtered Array(All Players(All Teams), Current Array Element.dodgeball_activate && (
			Current Array Element.dodgeball_held ? Team Of(Current Array Element.dodgeball_holder) == Team 1 : X Component Of(
			Current Array Element.dodgeball_pos) > 0) && True));
	}
}

rule("dodgeball ball hogging restart")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.dodgeball_static_timer <= 5;
		Global.gamemode == 6;
	}

	actions
	{
		Small Message(All Players(All Teams), Custom String("too inactive! dodgeballs resetting in 5..."));
		Wait(1, Abort When False);
		Small Message(All Players(All Teams), Custom String("4..."));
		Wait(1, Abort When False);
		Small Message(All Players(All Teams), Custom String("3..."));
		Wait(1, Abort When False);
		Small Message(All Players(All Teams), Custom String("2..."));
		Wait(1, Abort When False);
		Small Message(All Players(All Teams), Custom String("1..."));
		Wait(1, Abort When False);
		Small Message(All Players(All Teams), Custom String("all dodgeballs reset!"));
		Global.dodgeball_score_buffer = True;
		Wait(0.250, Ignore Condition);
		Global.dodgeball_score_buffer = False;
	}
}