import "Lava.del";

playervar define dodgeball_holder;
playervar Vector dodgeball_pos;
playervar Vector dodgeball_velocity;
playervar define dodgeball_thrown;
playervar define dodgeball_in_motion;
playervar define dodgeball_ultimate_used_on_ball;

rule: "Dodgeball Ultimate"
Event.OngoingPlayer
Player.Sigma
if (gamemode == Mode.Dodgeball)
if (IsUsingUltimate())
if (IsButtonHeld(EventPlayer(), Button.PrimaryFire))
{
    Vector shootAt = null;
    CreateEffect(EventPlayer(), Effect.LightShaft, Color.Blue, lookingAtPlanePoint, 0.5, EffectRev.VisibleToPositionAndRadius);
    define entity = LastCreatedEntity();

    Player[] affected = FilteredArray(AllPlayers(), DistanceBetween(ArrayElement().dodgeball_pos * Vector(1,0,1), lookingAtPlanePoint * Vector(1, 0, 1)) < 10);
    affected.dodgeball_in_motion = false;
    affected.dodgeball_ultimate_used_on_ball = true;
    affected.dodgeball_holder = EventPlayer();
    affected.dodgeball_thrown = true;
    Wait(1.3);
    StopChasingVariable(affected.dodgeball_pos);

    shootAt = lookingAtPlanePoint;

    for (define i = 0; CountOf(affected); 1)
        affected[i].dodgeball_velocity = affected[i].dodgeball_pos.DirectionTowards(shootAt + Up() * 1.5) * 100;
    affected.dodgeball_ultimate_used_on_ball = false;
    affected.dodgeball_in_motion = true;

    DestroyEffect(entity);
}

rule: "Dodgeball Ultimate Per Player Handler"
Event.OngoingPlayer
if (dodgeball_ultimate_used_on_ball)
{
    define rate = 6;
    ChaseVariableAtRate(dodgeball_pos, dodgeball_pos * Vector(1,0,1) + Vector(0,170,0), rate, RateChaseReevaluation.DestinationAndRate);
    Wait(0.7);
    ChaseVariableOverTime(rate, 15, 1, TimeChaseReevaluation.None);
    Wait(1);
    StopChasingVariable(rate);
}

Vector lookingAtPlanePoint: LinePlaneIntersection(EyePosition(), FacingDirectionOf(), planePos, Up());

globalvar define beamId;
globalvar define dodgeball_huds;
globalvar define dodgeball_blue_kills;
globalvar define dodgeball_red_kills;
globalvar define dodgeball_scoring;
globalvar define dodgeball_score_buffer;
playervar define dodgeball_charge;
playervar define sigma_pickup_buffer;
playervar define is_charging;
playervar define dodgeball_held;
playervar define dodgeball_effect;
playervar define dodgeball_bounce_normal;
playervar define dodgeball_bounce;
playervar define is_holding;
playervar define dodgeball_in_world_text;
playervar define dodgeball_activate;

rule: "Dodgeball: Team1 Boundary"
Event.OngoingPlayer
if (gamemode == Mode.Dodgeball)
if (TeamOf() == Team.Team1)
if (PositionOf().X < 0)
if (PositionOf().Y < 200)
{
    MinWait();
    AbortIfConditionIsFalse();
    ApplyImpulse(EventPlayer(), Left(), 5 + DistanceBetween(Vector(0, 0, 0), VelocityOf(EventPlayer())), Relative.ToWorld, ContraryMotion.Cancel);
    MinWait();
    LoopIfConditionIsTrue();
    // PlayEffect(EventPlayer(), PlayEffect.DebuffImpactSound, Color.White, EventPlayer(), 100);
}

rule: "Dodgeball: Team2 Boundary"
Event.OngoingPlayer
if (gamemode == Mode.Dodgeball)
if (TeamOf() == Team.Team2)
if (PositionOf().X > 0)
if (PositionOf().Y < 200)
{
    MinWait();
    AbortIfConditionIsFalse();
    ApplyImpulse(EventPlayer(), Right(), 5 + DistanceBetween(Vector(0, 0, 0), VelocityOf(EventPlayer())), Relative.ToWorld, ContraryMotion.Cancel);
    MinWait();
    LoopIfConditionIsTrue();
    // PlayEffect(EventPlayer(), PlayEffect.DebuffImpactSound, Color.White, EventPlayer(), 100);
}

rule: "Dodgeball: Draw Boundary"
if (gamemode == 6)
{
    CreateBeamEffect(AllPlayers(Team.All), BeamType.BadBeam, Vector(0, 154.88, 150) - Vector(0, 0, 20), Vector(0, 154.88, 150) + Vector(0, 0, 20), Color.Aqua, EffectRev.VisibleTo);
    ModifyVariable(beamId, Operation.AppendToArray, LastCreatedEntity());
    CreateBeamEffect(AllPlayers(Team.All), BeamType.BadBeam, Vector(0, 154.88, 130), Vector(0, 171, 130.001), Color.Aqua, EffectRev.VisibleTo);
    ModifyVariable(beamId, Operation.AppendToArray, LastCreatedEntity());
    CreateBeamEffect(AllPlayers(Team.All), BeamType.BadBeam, Vector(0, 154.88, 170), Vector(0, 171, 170.001), Color.Aqua, EffectRev.VisibleTo);
    ModifyVariable(beamId, Operation.AppendToArray, LastCreatedEntity());
    CreateBeamEffect(AllPlayers(Team.All), BeamType.BadBeam, Vector(0, 171, 130), Vector(0, 171, 170), Color.Aqua, EffectRev.VisibleTo);
    ModifyVariable(beamId, Operation.AppendToArray, LastCreatedEntity());
}

rule: "Dodgeball: Destroy Boundary"
if (gamemode != 6)
{
    while (beamId != [])
    {
        DestroyEffect(FirstOf(beamId));
        ModifyVariable(beamId, Operation.RemoveFromArrayByIndex, 0);
    }
}

rule: "dodgeball global init"
if (gamemode == 6)
{
    DestroyTutorialText();
    CreateHudText(AllPlayers(Team.All), AbilityIconString(Hero.Reinhardt, Button.PrimaryFire), null, "Dodgeball by Therister and Protowalker\r\nA collaborative effort of Grandeur Hammers\r\nhttps://bit.ly/ghgames", Location.Right, 1, Color.Yellow, Color.Red, Color.Yellow, HudTextRev.VisibleToAndString, Spectators.VisibleAlways);
    ModifyVariable(dodgeball_huds, Operation.AppendToArray, LastTextID());
    CreateHudText(AllPlayers(Team.All), HeroIconString(Hero.Sigma), null, "Controls:", Location.Right, 2, Color.Aqua, Color.White, Color.Aqua, HudTextRev.VisibleToAndString, Spectators.DefaultVisibility);
    ModifyVariable(dodgeball_huds, Operation.AppendToArray, LastTextID());
    CreateHudText(AllPlayers(Team.All), null, null, <"Press and hold <0> (right click) to pick up a ball.", InputBindingString(Button.SecondaryFire)>, Location.Right, 3, Color.Aqua, Color.White, Color.Aqua, HudTextRev.VisibleToAndString, Spectators.DefaultVisibility);
    ModifyVariable(dodgeball_huds, Operation.AppendToArray, LastTextID());
    CreateHudText(AllPlayers(Team.All), null, null, <"Press and hold <0> (left click) to charge up your throw.", InputBindingString(Button.PrimaryFire)>, Location.Right, 4, Color.Aqua, Color.White, Color.Aqua, HudTextRev.VisibleToAndString, Spectators.DefaultVisibility);
    ModifyVariable(dodgeball_huds, Operation.AppendToArray, LastTextID());
    CreateHudText(AllPlayers(Team.All), null, null, <"Release <0> (left click) to throw.", InputBindingString(Button.PrimaryFire)>, Location.Right, 5, Color.Aqua, Color.White, Color.Aqua, HudTextRev.VisibleToAndString, Spectators.DefaultVisibility);
    ModifyVariable(dodgeball_huds, Operation.AppendToArray, LastTextID());
    CreateHudText(AllPlayers(Team.All), null, null, <"Use <0> Kinetic Grasp to catch an enemy's ball and kill them.", AbilityIconString(Hero.Sigma, Button.Ability1)>, Location.Right, 6, Color.Aqua, Color.White, Color.Aqua, HudTextRev.VisibleToAndString, Spectators.DefaultVisibility);
    ModifyVariable(dodgeball_huds, Operation.AppendToArray, LastTextID());
    dodgeball_blue_kills = 0;
    dodgeball_red_kills = 0;
    CreateHudText(AllPlayers(Team.Team1), AbilityIconString(Hero.Sigma, Button.Ability2), <"Enemy kills: <0>/<1>", dodgeball_red_kills, CountOf(FilteredArray(AllPlayers(Team.Team2), HasSpawned(ArrayElement())))>, <"Your team's kills: <0>/<1>", dodgeball_blue_kills, CountOf(FilteredArray(AllPlayers(Team.Team1), HasSpawned(ArrayElement())))>, Location.Top, 2, Color.Aqua, Color.Red, Color.Aqua, HudTextRev.VisibleToAndString, Spectators.VisibleAlways);
    ModifyVariable(dodgeball_huds, Operation.AppendToArray, LastTextID());
    CreateHudText(AllPlayers(Team.Team2), AbilityIconString(Hero.Sigma, Button.Ability2), <"Enemy kills: <0>/<1>", dodgeball_blue_kills, CountOf(FilteredArray(AllPlayers(Team.Team1), HasSpawned(ArrayElement())))>, <"Your team's kills: <0>/<1>", dodgeball_red_kills, CountOf(FilteredArray(AllPlayers(Team.Team2), HasSpawned(ArrayElement())))>, Location.Top, 2, Color.Aqua, Color.Red, Color.Aqua, HudTextRev.VisibleToAndString, Spectators.VisibleAlways);
    ModifyVariable(dodgeball_huds, Operation.AppendToArray, LastTextID());
    dodgeball_scoring = false;
    Wait(0.25, WaitBehavior.IgnoreCondition);
    dodgeball_score_buffer = true;
    Wait(1, WaitBehavior.IgnoreCondition);
    dodgeball_score_buffer = false;
}

rule: "dodgeball player init"
Event.OngoingPlayer
if (gamemode == 6)
if (HeroOf(EventPlayer()) != Hero.Sigma)
if (HasSpawned(EventPlayer()) == true)
{
    SetStatus(EventPlayer(), null, Status.PhasedOut, 9999);
    DisallowButton(EventPlayer(), Button.SecondaryFire);
    ForcePlayerHero(EventPlayer(), Hero.Sigma);
    Teleport(EventPlayer(), Vector(TeamOf(EventPlayer()) == Team.Team1 ? 28 : -28, 154.88, 150 + (SlotOf(EventPlayer()) % 2 == 0 ? 4 : -4) * SlotOf(EventPlayer())));
    SetFacing(EventPlayer(), TeamOf(EventPlayer()) == Team.Team1 ? Right() : Left(), Relative.ToWorld);
    SetMoveSpeed(EventPlayer(), 200);
    DisallowButton(EventPlayer(), Button.Ability2);
    StopAccelerating(EventPlayer());
    Wait(0.1, WaitBehavior.IgnoreCondition);
    if (IndexOfArrayValue(AllPlayers(TeamOf(EventPlayer())), EventPlayer()) <= 3)
    {
        // dodgeball_pos = WorldVectorOf(Vector(0, 1.5, 5), EventPlayer(), LocalVector.RotationAndTranslation);
        // dodgeball_velocity = Vector(0, -0.001, 0);
        // dodgeball_in_motion = true;
        CreateInWorldText(FilteredArray(PlayersWithinRadius(dodgeball_pos, 8, Team.All, RadiusLOS.Off), !dodgeball_holder), <"hold <0> (right click) to pick up", InputBindingString(Button.SecondaryFire)>, dodgeball_pos, 1, Clipping.DoNotClip, InworldTextRev.VisibleToPositionAndString, Color.White, Spectators.DefaultVisibility);
        dodgeball_in_world_text = LastTextID();
        // CreateEffect(AllPlayers(Team.All), Effect.Sphere, Color.White, dodgeball_pos, 1, EffectRev.VisibleToPositionAndRadius);
        // CreateInWorldText(AllPlayers(Team.All), <"holder: <0>, pos: <1>, vel: <2>", dodgeball_holder, dodgeball_pos, dodgeball_velocity>, dodgeball_pos, 1, Clipping.DoNotClip, InworldTextRev.VisibleToPositionAndString, Color.White, Spectators.DefaultVisibility);
        // Teleport(EventPlayer(), Vector(0, 154.88, 150 + IndexOfArrayValue(AllPlayers(TeamOf(EventPlayer())), EventPlayer()) * (!(IndexOfArrayValue(AllPlayers(TeamOf(EventPlayer())), EventPlayer()) % 2) ? 1 : -1)));
        CreateEffect(FilteredArray(AllPlayers(Team.All), !dodgeball_holder), Effect.Sphere, Color.White, dodgeball_pos, 1.25, EffectRev.VisibleToPositionAndRadius);
        ModifyVariable(dodgeball_effect, Operation.AppendToArray, LastCreatedEntity());
        CreateEffect(FilteredArray(AllPlayers(Team.All), !dodgeball_holder), Effect.BadAura, Color.White, dodgeball_pos, 1, EffectRev.VisibleToPositionAndRadius);
        ModifyVariable(dodgeball_effect, Operation.AppendToArray, LastCreatedEntity());
        CreateIcon(FilteredArray(AllPlayers(Team.All), !dodgeball_holder), dodgeball_pos, Icon.Circle, IconRev.VisibleToAndPosition, Color.White, true);
        ModifyVariable(dodgeball_effect, Operation.AppendToArray, LastCreatedEntity());
        CreateEffect(FilteredArray(AllPlayers(Team.All), TeamOf(dodgeball_holder) == Team.Team1), Effect.Sphere, Color.Team1, dodgeball_pos, 1.25, EffectRev.VisibleToPositionAndRadius);
        ModifyVariable(dodgeball_effect, Operation.AppendToArray, LastCreatedEntity());
        CreateEffect(FilteredArray(AllPlayers(Team.All), TeamOf(dodgeball_holder) == Team.Team1), Effect.BadAura, Color.Team1, dodgeball_pos, 1, EffectRev.VisibleToPositionAndRadius);
        ModifyVariable(dodgeball_effect, Operation.AppendToArray, LastCreatedEntity());
        CreateIcon(FilteredArray(AllPlayers(Team.All), TeamOf(dodgeball_holder) == Team.Team1), dodgeball_pos, Icon.Warning, IconRev.VisibleToAndPosition, Color.Team1, true);
        ModifyVariable(dodgeball_effect, Operation.AppendToArray, LastCreatedEntity());
        CreateEffect(FilteredArray(AllPlayers(Team.All), TeamOf(dodgeball_holder) == Team.Team2), Effect.Sphere, Color.Team2, dodgeball_pos, 1.25, EffectRev.VisibleToPositionAndRadius);
        ModifyVariable(dodgeball_effect, Operation.AppendToArray, LastCreatedEntity());
        CreateEffect(FilteredArray(AllPlayers(Team.All), TeamOf(dodgeball_holder) == Team.Team2), Effect.BadAura, Color.Team2, dodgeball_pos, 1, EffectRev.VisibleToPositionAndRadius);
        ModifyVariable(dodgeball_effect, Operation.AppendToArray, LastCreatedEntity());
        CreateIcon(FilteredArray(AllPlayers(Team.All), TeamOf(dodgeball_holder) == Team.Team2), dodgeball_pos, Icon.Warning, IconRev.VisibleToAndPosition, Color.Team2, true);
        ModifyVariable(dodgeball_effect, Operation.AppendToArray, LastCreatedEntity());
        Wait(0.1, WaitBehavior.IgnoreCondition);
        dodgeball_activate = true;
    }
    else
    {
        dodgeball_pos = "Have you ever heard the Tragedy of Darth Plagueis the Wise?";
        dodgeball_in_motion = false;
        dodgeball_activate = false;
    }
}

Vector dodgeballCliffBlue: Vector(30, 154.88, 130);
Vector dodgeballCliffRed: Vector(-30, 154.88, 130);
Vector dodgeballTowerBlue: Vector(30, 154.88, 170);
Vector dodgeballTowerRed: Vector(-30, 154.88, 170);

rule: "Setup Arena dogg balllll"
if (gamemode == Mode.Dodgeball)
{
    MakeFloor();

    CreateEffect(AllPlayers(), Effect.Orb, Color.Orange, Vector(0, 161.5, 150), 0.25, EffectRev.VisibleTo);
    CreateBeamEffect(AllPlayers(), BeamType.BadBeam, dodgeballCliffBlue + Left() * 0.001, dodgeballCliffBlue + Up() * 16.12, Color.Aqua, EffectRev.VisibleTo);
    ModifyVariable(arenaEffects, Operation.AppendToArray, LastCreatedEntity());
    CreateBeamEffect(AllPlayers(), BeamType.BadBeam, dodgeballCliffRed + Left() * 0.001, dodgeballCliffRed + Up() * 16.12, Color.Aqua, EffectRev.VisibleTo);
    ModifyVariable(arenaEffects, Operation.AppendToArray, LastCreatedEntity());
    CreateBeamEffect(AllPlayers(), BeamType.BadBeam, dodgeballTowerBlue + Left() * 0.001, dodgeballTowerBlue + Up() * 16.12, Color.Aqua, EffectRev.VisibleTo);
    ModifyVariable(arenaEffects, Operation.AppendToArray, LastCreatedEntity());
    CreateBeamEffect(AllPlayers(), BeamType.BadBeam, dodgeballTowerRed + Left() * 0.001, dodgeballTowerRed + Up() * 16.12, Color.Aqua, EffectRev.VisibleTo);
    ModifyVariable(arenaEffects, Operation.AppendToArray, LastCreatedEntity());
    CreateBeamEffect(AllPlayers(), BeamType.GoodBeam, dodgeballCliffRed + Up() * 16.12, dodgeballCliffBlue + Up() * 16.12, Color.Purple, EffectRev.VisibleTo);
    ModifyVariable(arenaEffects, Operation.AppendToArray, LastCreatedEntity());
    CreateBeamEffect(AllPlayers(), BeamType.BadBeam, dodgeballCliffRed + Up() * 16.12, dodgeballTowerRed + Up() * 16.12, Color.Team2, EffectRev.VisibleTo);
    ModifyVariable(arenaEffects, Operation.AppendToArray, LastCreatedEntity());
    CreateBeamEffect(AllPlayers(), BeamType.BadBeam, dodgeballTowerBlue + Up() * 16.12, dodgeballCliffBlue + Up() * 16.12, Color.Team1, EffectRev.VisibleTo);
    ModifyVariable(arenaEffects, Operation.AppendToArray, LastCreatedEntity());
    CreateBeamEffect(AllPlayers(), BeamType.GoodBeam, dodgeballTowerBlue + Up() * 16.12, dodgeballTowerRed + Up() * 16.12, Color.Purple, EffectRev.VisibleTo);
    ModifyVariable(arenaEffects, Operation.AppendToArray, LastCreatedEntity());
}

rule: "dodgeball pickup"
Event.OngoingPlayer
Player.Sigma
if (dodgeball_holder == false)
if (IsTrueForAny(PlayersWithinRadius(dodgeball_pos, 8, Team.All, RadiusLOS.Off), ArrayElement().pickupReady && IsButtonHeld(ArrayElement(), Button.SecondaryFire) && !ArrayElement().sigma_pickup_buffer && !ArrayElement().is_holding && IsInViewAngle(ArrayElement(), dodgeball_pos, 45)) == true)
if (dodgeball_scoring == false)
{
    pickupReady = false;
    dodgeball_holder = FirstOf(SortedArray(FilteredArray(AllPlayers(Team.All), IsButtonHeld(ArrayElement(), Button.SecondaryFire) && !ArrayElement().sigma_pickup_buffer && !ArrayElement().is_holding), DistanceBetween(ArrayElement(), dodgeball_pos)));
    AbortIf(dodgeball_holder == null);
    ChaseVariableAtRate(dodgeball_pos, WorldVectorOf(Vector(0, 1.5, 0), dodgeball_holder, LocalVector.RotationAndTranslation) + FacingDirectionOf(dodgeball_holder) * 2, 1000, RateChaseReevaluation.DestinationAndRate);
    dodgeball_held = true;
    dodgeball_in_motion = false;
    dodgeball_holder.is_holding = true;
}

rule: "dodgeball drop - release"
Event.OngoingPlayer
Player.Sigma
if (IsButtonHeld(dodgeball_holder, Button.SecondaryFire) == false)
if (dodgeball_holder != false)
if (dodgeball_holder.is_charging == false)
if (dodgeball_thrown == false)
{
    dodgeball_drop();
}

rule: "dodgeball bounce"
Event.OngoingPlayer
Player.Sigma
if (dodgeball_held == false)
if ((XOf(dodgeball_pos) < -30 || XOf(dodgeball_pos) > 30 || YOf(dodgeball_pos) < 156 || YOf(dodgeball_pos) > 171 || ZOf(dodgeball_pos) < 130 || ZOf(dodgeball_pos) > 170) == true)
{
    if (DistanceBetween(Vector(0, 0, 0), dodgeball_velocity) > 10)
    {
        PlayEffect(AllPlayers(Team.All), PlayEffect.GoodExplosion, Color.Purple, dodgeball_pos, 2);
        PlayEffect(AllPlayers(Team.All), PlayEffect.RingExplosionSound, Color.White, dodgeball_pos, 100);
    }

    if (dodgeball_pos.X <= -29.9)
        dodgeball_bounce_normal = Left();
    else if (dodgeball_pos.X >= 29.9)
        dodgeball_bounce_normal = Right();

    else if (dodgeball_pos.Y <= 156.1)
        dodgeball_bounce_normal = Up();
    else if (dodgeball_pos.Y >= 170.9)
        dodgeball_bounce_normal = Down();

    else if (dodgeball_pos.Z <= 130.1)
        dodgeball_bounce_normal = Forward();
    else if (dodgeball_pos.Z >= 169.9)
        dodgeball_bounce_normal = Backward();

    dodgeball_bounce += 1;
    if (DistanceBetween(Vector(0, 0, 0), dodgeball_velocity) > 2)
    {
        if (dodgeball_bounce_normal == Up())
        {
            dodgeball_holder = false;
            dodgeball_thrown = false;
        }
        dodgeball_velocity = VectorTowards(dodgeball_pos, dodgeball_pos + dodgeball_velocity + dodgeball_bounce_normal * CosineFromDegrees(AngleBetweenVectors(dodgeball_bounce_normal, dodgeball_velocity * -1)) * DistanceBetween(Vector(0, 0, 0), dodgeball_velocity) * 2) * 0.7;
    }
    else
    {
        dodgeball_holder = false;
        dodgeball_thrown = false;
    }

    Wait(0.25, WaitBehavior.IgnoreCondition);
    LoopIfConditionIsTrue();
}

rule: "dodgeball bounce - pole"
Event.OngoingPlayer
Player.Sigma
if (dodgeball_held == false)
if (DistanceBetween(dodgeball_pos, RayCastHitPosition(dodgeball_pos, dodgeball_pos + VectorTowards(Vector(XOf(dodgeball_pos), 0, ZOf(dodgeball_pos)), Vector(0, 0, 150)), null, EventPlayer(), true)) < 1.25)
if (YOf(dodgeball_pos) < 162.75)
{
    if (DistanceBetween(Vector(0, 0, 0), dodgeball_velocity) > 10)
    {
        PlayEffect(AllPlayers(Team.All), PlayEffect.RingExplosion, Color.SkyBlue, Vector(0, 161.5, 150), 7);
        PlayEffect(AllPlayers(Team.All), PlayEffect.GoodExplosion, Color.Purple, dodgeball_pos, 2);
        PlayEffect(AllPlayers(Team.All), PlayEffect.RingExplosionSound, Color.White, dodgeball_pos, 100);
    }
    // if (XOf(dodgeball_pos) <= -29.9)
    {
        // dodgeball_bounce_normal = Left() * (XOf(dodgeball_holder) < 0 ? 1 : -1) + RayCastHitNormal(dodgeball_pos, dodgeball_pos + VectorTowards(Vector(XOf(dodgeball_pos), 0, ZOf(dodgeball_pos)), Vector(0, 0, 150)), null, EventPlayer(), true);
        dodgeball_bounce_normal = HorizontalAngleFromDirection(DirectionTowards(dodgeball_pos, Vector(0, 0, 150))) < 160 ? HorizontalAngleFromDirection(DirectionTowards(dodgeball_pos, Vector(0, 0, 150))) < 20 ? HorizontalAngleFromDirection(DirectionTowards(dodgeball_pos, Vector(0, 0, 150))) < -20 ? Left() : Backward() : Right() : Forward();
        dodgeball_bounce += 1;
        if (DistanceBetween(Vector(0, 0, 0), dodgeball_velocity) > 2)
        {
            if (dodgeball_bounce_normal == Up())
            {
                dodgeball_holder = false;
                dodgeball_thrown = false;
            }
            dodgeball_velocity = VectorTowards(dodgeball_pos, dodgeball_pos + dodgeball_velocity + dodgeball_bounce_normal * CosineFromDegrees(AngleBetweenVectors(dodgeball_bounce_normal, dodgeball_velocity * -1)) * DistanceBetween(Vector(0, 0, 0), dodgeball_velocity) * 2) * 0.7;
        }
        else
        {
            dodgeball_holder = false;
            dodgeball_thrown = false;
        }
        Wait(0.25, WaitBehavior.IgnoreCondition);
        LoopIfConditionIsTrue();
    }
}

rule: "dodgeball charge"
Event.OngoingPlayer
Player.Sigma
if (IsButtonHeld(dodgeball_holder, Button.PrimaryFire) == true)
if (dodgeball_held == true)
{
    SetMoveSpeed(dodgeball_holder, 100);
    dodgeball_charge = 10;
    ChaseVariableAtRate(dodgeball_charge, 50, 65, RateChaseReevaluation.DestinationAndRate);
    CancelPrimaryAction(dodgeball_holder);
    AllowButton(dodgeball_holder, Button.Ability2);
    PressButton(dodgeball_holder, Button.Ability2);
    dodgeball_holder.is_charging = true;
    Wait(0.25, WaitBehavior.IgnoreCondition);
    DisallowButton(dodgeball_holder, Button.Ability2);
}

rule: "dodgeball launch"
Event.OngoingPlayer
Player.Sigma
if ((!IsButtonHeld(dodgeball_holder, Button.PrimaryFire) || dodgeball_charge >= 50) == true)
if (dodgeball_charge != 0)
if (dodgeball_holder.is_charging == true)
{
    StopChasingVariable(dodgeball_pos);
    CancelPrimaryAction(dodgeball_holder);
    dodgeball_velocity = Normalize(FacingDirectionOf(dodgeball_holder) + Up() * 0.15) * dodgeball_charge;
    dodgeball_held = false;
    dodgeball_in_motion = true;
    dodgeball_bounce = 0;
    dodgeball_charge = 0;
    dodgeball_thrown = true;
    SetMoveSpeed(dodgeball_holder, 200);
    // Wait(0.5, WaitBehavior.IgnoreCondition);
    dodgeball_holder.is_charging = false;
    dodgeball_holder.is_holding = false;
    StopHoldingButton(EventPlayer(), Button.SecondaryFire);
    DisallowButton(EventPlayer(), Button.SecondaryFire);
    SetStatus(dodgeball_holder, null, Status.Hacked, 0.25);
    dodgeball_holder.sigma_pickup_buffer = 1;
    ChaseVariableAtRate(dodgeball_holder.sigma_pickup_buffer, 0, 1, RateChaseReevaluation.DestinationAndRate);
    if (IsDead(dodgeball_holder))
    {
        dodgeball_velocity = Down();
    }
}

rule: "dodgeball motion"
Event.OngoingPlayer
Player.Sigma
if (dodgeball_in_motion == true)
{
    dodgeball_velocity += Down() * 20 * 0.016;
    dodgeball_pos += dodgeball_velocity * 0.016;
    MinWait();
    LoopIfConditionIsTrue();
}

playervar define pickupReady = false;

rule: "sigma hand stretch start"
Event.OngoingPlayer
Player.Sigma
if (IsButtonHeld(EventPlayer(), Button.SecondaryFire))
if (!is_charging)
if (sigma_pickup_buffer <= 0)
if (IsAlive())
{
    pickupReady = false;
    SetInvisible(EventPlayer(), InvisibleTo.All);

    Vector eye = EyePosition();
    Vector pos = PositionOf();
    StartCamera(EventPlayer(), eye, eye + FacingDirectionOf(), 500);

    SetAbilityCooldown(EventPlayer(), Button.SecondaryFire, 0);
    MinWait();
    AllowButton(EventPlayer(), Button.SecondaryFire);
    StartHoldingButton(EventPlayer(), Button.SecondaryFire);

    Teleport(EventPlayer(), ObjectivePosition(1));
    Wait(0.084, WaitBehavior.IgnoreCondition);
    Teleport(EventPlayer(), pos);

    StopCamera(EventPlayer());
    SetInvisible(EventPlayer(), InvisibleTo.None);

    Wait(0.016);
    pickupReady = true;
}

rule: "sigma hand stretch end"
Event.OngoingPlayer
Player.Sigma
if (IsButtonHeld(EventPlayer(), Button.SecondaryFire) == false)
if (!is_charging)
{
    pickupReady = false;
    StopHoldingButton(EventPlayer(), Button.SecondaryFire);
    DisallowButton(EventPlayer(), Button.SecondaryFire);
    sigma_pickup_buffer = 1;
    ChaseVariableAtRate(sigma_pickup_buffer, 0, 1, RateChaseReevaluation.DestinationAndRate);
}

rule: "sigma shorter succ"
Event.OngoingPlayer
Player.Sigma
if (IsUsingAbility1(EventPlayer()) == true)
{
    Wait(0.4, WaitBehavior.IgnoreCondition);
    CancelPrimaryAction(EventPlayer());
}

rule: "dodgeball player collide"
Event.OngoingPlayer
Player.Sigma
if (dodgeball_holder != false)
if (dodgeball_held == false)
if (IsTrueForAny(AllLivingPlayers(OppositeTeamOf(TeamOf(dodgeball_holder))), DistanceBetween(dodgeball_pos, EyePosition(ArrayElement())) <= 1.25 || DistanceBetween(dodgeball_pos, WorldVectorOf(Vector(0, 1.3, 0), ArrayElement(), LocalVector.RotationAndTranslation)) <= 2 || DistanceBetween(dodgeball_pos, PositionOf(ArrayElement())) <= 1.25) == true)
{
    define dodgeball_victim = FirstOf(SortedArray(AllLivingPlayers(OppositeTeamOf(TeamOf(dodgeball_holder))), DistanceBetween(ArrayElement(), dodgeball_pos)));
    AbortIf(!ArrayContains(AllLivingPlayers(Team.All), dodgeball_victim));
    dodgeball_velocity = ((TeamOf(dodgeball_holder) == Team.Team1 ? Left() : Right()) + Up() * 0.25) * 30;
    Kill(dodgeball_victim, dodgeball_holder);
    SmallMessage(AllPlayers(Team.All), <"<0> took out <1> <2>", dodgeball_holder, dodgeball_victim, dodgeball_bounce > 0 ? "with a bounced trick shot!!" : "with a dodgeball!">);
    PlayEffect(AllPlayers(Team.All), PlayEffect.BadExplosion, Color.Orange, dodgeball_victim, 5);
    PlayEffect(AllPlayers(Team.All), PlayEffect.ExplosionSound, Color.Orange, dodgeball_victim, 200);
    PlayEffect(AllPlayers(Team.All), PlayEffect.RingExplosion, Color.Orange, dodgeball_holder, 10);
    PlayEffect(AllPlayers(Team.All), PlayEffect.BuffExplosionSound, Color.Orange, dodgeball_holder, 200);
    Wait(0.1, WaitBehavior.IgnoreCondition);
    dodgeball_bounce = 0;
}

rule: "dodgeball catch"
Event.OngoingPlayer
Player.Sigma
if (dodgeball_holder != false)
if (dodgeball_holder.dodgeball_held == false)
if (IsTrueForAny(FilteredArray(PlayersWithinRadius(dodgeball_pos, 5, OppositeTeamOf(TeamOf(dodgeball_holder)), RadiusLOS.Off), IsInViewAngle(ArrayElement(), dodgeball_pos, 45)), IsUsingAbility1(ArrayElement())) == true)
{
    define dodgeball_catcher = FirstOf(SortedArray(FilteredArray(PlayersWithinRadius(dodgeball_pos, 6, OppositeTeamOf(TeamOf(dodgeball_holder)), RadiusLOS.Off), IsInViewAngle(ArrayElement(), dodgeball_pos, 45) && IsUsingAbility1(ArrayElement())), DistanceBetween(dodgeball_pos, ArrayElement())));
    Kill(dodgeball_holder, dodgeball_catcher);
    dodgeball_velocity = Up() * 15;
    SmallMessage(AllPlayers(Team.All), <"<0> caught <1>'s dodgeball in the air!", dodgeball_catcher, dodgeball_holder>);
    PlayEffect(AllPlayers(Team.All), PlayEffect.BadPickupEffect, Color.Aqua, dodgeball_holder, 5);
    PlayEffect(AllPlayers(Team.All), PlayEffect.DebuffImpactSound, Color.Orange, dodgeball_holder, 200);
    PlayEffect(AllPlayers(Team.All), PlayEffect.RingExplosion, Color.Aqua, dodgeball_catcher, 10);
    PlayEffect(AllPlayers(Team.All), PlayEffect.BuffImpactSound, Color.Orange, dodgeball_catcher, 200);
    dodgeball_thrown = false;
    Wait(0.1, WaitBehavior.IgnoreCondition);
    dodgeball_holder = false;
}

rule: "dodgeball out of bounds"
Event.OngoingPlayer
Player.Sigma
if (dodgeball_holder.dodgeball_held == false)
if ((XOf(dodgeball_pos) < -30 || XOf(dodgeball_pos) > 30 || YOf(dodgeball_pos) < 155.9 || YOf(dodgeball_pos) > 171 || ZOf(dodgeball_pos) < 130 || ZOf(dodgeball_pos) > 170) == true)
if (dodgeball_activate == true)
{
    MinWait();
    AbortIfConditionIsFalse();
    dodgeball_clamp_in_range();
    LoopIfConditionIsTrue();
}

rule: "sigma fake walls"
Event.OngoingPlayer
Player.Sigma
if (PositionOf().X < -30 || PositionOf().X > 30 || PositionOf().Z < 130 || PositionOf().Z > 170)
if (PositionOf().Y < 200)
{
    Vector sigma_normal = Vector.Zero;

    if (PositionOf().X <= -29.9)
        sigma_normal += Left();
    else if (PositionOf().X >= 29.9)
        sigma_normal += Right();
    
    if (PositionOf().Z <= 130.1)
        sigma_normal += Forward();
    else if (PositionOf().Z >= 169.9)
        sigma_normal += Backward();
    
    ApplyImpulse(EventPlayer(), sigma_normal, SpeedOf(EventPlayer()), Relative.ToWorld, ContraryMotion.Cancel);
    MinWait();
    LoopIfConditionIsTrue();
    ApplyImpulse(EventPlayer(), sigma_normal * -1, 0.001, Relative.ToWorld, ContraryMotion.Cancel);
}

rule: "dodgeball rest"
Event.OngoingPlayer
Player.Sigma
if (DistanceBetween(Vector(0, 0, 0), dodgeball_velocity) < 2)
if (YOf(dodgeball_pos) < 156.1)
if (dodgeball_in_motion == true)
{
    dodgeball_in_motion = false;
    dodgeball_velocity = Vector(0, 0, 0);
}

void dodgeball_drop() "dodgeball drop subr"
{
    dodgeball_holder.is_holding = false;
    StopChasingVariable(dodgeball_pos);
    dodgeball_held = false;
    dodgeball_velocity = Vector(0, -0.1, 0);
    dodgeball_in_motion = true;
    dodgeball_bounce = 0;
    dodgeball_holder = false;
}

rule: "dodgeball drop - on death"
Event.OngoingPlayer
Player.Sigma
if (IsDead(dodgeball_holder) == true)
if (is_holding == true)
{
    dodgeball_drop();
}

rule: "sigma too high"
Event.OngoingPlayer
Player.Sigma
if (YOf(PositionOf(EventPlayer())) > 200)
{
    Wait(0.25, WaitBehavior.AbortWhenFalse);
    Teleport(EventPlayer(), Vector(0, 154.88, 150));
    LoopIfConditionIsTrue();
}

rule: "dodgeball kill count"
Event.OnDeath
if (gamemode == Mode.Dodgeball)
{
    if (TeamOf(EventPlayer()) == Team.Team1)
        dodgeball_red_kills += 1;
    else
        dodgeball_blue_kills += 1;
}

rule: "dodgeball clean up -- per player"
Event.OngoingPlayer
if (gamemode != Mode.Dodgeball)
if (HeroOf(EventPlayer()) != Hero.Reinhardt)
if (HasSpawned(EventPlayer()) == true)
if (!isBall == true)
{
    ClearStatus(EventPlayer(), Status.PhasedOut);
    ForcePlayerHero(EventPlayer(), Hero.Reinhardt);
    AllowButton(EventPlayer(), Button.SecondaryFire);
    AllowButton(EventPlayer(), Button.Ability2);
    DestroyInWorldText(dodgeball_in_world_text);
    while (dodgeball_effect != [])
    {
        DestroyIcon(FirstOf(dodgeball_effect));
        DestroyEffect(FirstOf(dodgeball_effect));
        ModifyVariable(dodgeball_effect, Operation.RemoveFromArrayByIndex, 0);
    }
    SetInvisible(EventPlayer(), InvisibleTo.None);
}

rule: "dodgeball clean up -- global"
if (gamemode != Mode.Dodgeball)
{
    while (dodgeball_huds != [])
    {
        DestroyHudText(FirstOf(dodgeball_huds));
        ModifyVariable(dodgeball_huds, Operation.RemoveFromArrayByIndex, 0);
    }
}

rule: "dodgeball score increase - team 1"
if (dodgeball_blue_kills >= 1 * CountOf(FilteredArray(AllPlayers(Team.Team1), HasSpawned(ArrayElement()))))
if (dodgeball_blue_kills != 0)
if (dodgeball_scoring == false)
if (gamemode == Mode.Dodgeball)
{
    dodgeball_scoring = true;
    blueScore += 1;
    BigMessage(AllPlayers(Team.All), "Team 1 wins!");
    PlayEffect(AllPlayers(Team.Team1), PlayEffect.BuffImpactSound, Color.Team1, Vector(0, 161.5, 150), 200);
    PlayEffect(AllPlayers(Team.Team2), PlayEffect.DebuffImpactSound, Color.Team2, Vector(0, 161.5, 150), 200);
    PlayEffect(AllPlayers(Team.All), PlayEffect.GoodExplosion, Color.Team1, Vector(0, 161.5, 150), 30);
    PlayEffect(AllPlayers(Team.All), PlayEffect.RingExplosion, Color.Team1, Vector(0, 161.5, 150), 60);
    dodgeball_reset();
}

rule: "dodgeball score increase - team 2"
if (dodgeball_red_kills >= 1 * CountOf(FilteredArray(AllPlayers(Team.Team2), HasSpawned(ArrayElement()))))
if (dodgeball_red_kills != 0)
if (dodgeball_scoring == false)
if (gamemode == 6)
{
    dodgeball_scoring = true;
    redScore += 1;
    BigMessage(AllPlayers(Team.All), "Team 2 wins!");
    PlayEffect(AllPlayers(Team.Team2), PlayEffect.BuffImpactSound, Color.Team2, Vector(0, 161.5, 150), 200);
    PlayEffect(AllPlayers(Team.Team1), PlayEffect.DebuffImpactSound, Color.Team2, Vector(0, 161.5, 150), 200);
    PlayEffect(AllPlayers(Team.All), PlayEffect.GoodExplosion, Color.Team2, Vector(0, 161.5, 150), 30);
    PlayEffect(AllPlayers(Team.All), PlayEffect.RingExplosion, Color.Team2, Vector(0, 161.5, 150), 60);
    dodgeball_reset();
}

void dodgeball_reset() "dodgeball reset subr"
{
    SetSlowMotion(25);
    Wait(1, WaitBehavior.IgnoreCondition);
    SetSlowMotion(100);
    dodgeball_score_buffer = true;
    Wait(3, WaitBehavior.IgnoreCondition);

    BigMessage(AllPlayers(Team.All), "New round: Start!");
    dodgeball_blue_kills = 0;
    dodgeball_red_kills = 0;
    dodgeball_scoring = false;

    // Reset players.
    AllPlayers().is_charging = false;
    AllPlayers().sigma_pickup_buffer = 0;
    
    Wait(1, WaitBehavior.IgnoreCondition);
    dodgeball_score_buffer = false;
}

rule: "dodgeball positions reset"
Event.OngoingPlayer
Player.Sigma
if (dodgeball_activate == true)
if (dodgeball_scoring == false)
if (gamemode == 6)
if (dodgeball_score_buffer == true)
if (PositionOf().Y > 154.8)
{
    dodgeball_drop();
    dodgeball_pos = Vector(TeamOf(EventPlayer()) == Team.Team1 ? 10 : -10, 156, 150 + (SlotOf(EventPlayer()) % 2 == 0 ? 4 : -4) * SlotOf(EventPlayer()));
    dodgeball_velocity = Vector(0, -0.001, 0);
    dodgeball_in_motion = true;
    PlayEffect(AllPlayers(Team.All), PlayEffect.GoodExplosion, Color.Purple, dodgeball_pos, 2);
    PlayEffect(AllPlayers(Team.All), PlayEffect.BuffImpactSound, Color.White, dodgeball_pos, 100);
}

void dodgeball_clamp_in_range() "dodgeball clamp in range subr"
{
    define dodgeball_x_comp = XOf(dodgeball_pos);
    define dodgeball_y_comp = YOf(dodgeball_pos);
    define dodgeball_z_comp = ZOf(dodgeball_pos);

    if (dodgeball_x_comp <= -29.9)
        dodgeball_x_comp = -29;
    else if (dodgeball_x_comp >= 29.9)
        dodgeball_x_comp = 29;

    if (dodgeball_y_comp <= 155.9)
        dodgeball_y_comp = 156;
    else if (dodgeball_y_comp >= 170.9)
        dodgeball_y_comp = 170;

    if (dodgeball_z_comp <= 130.1)
        dodgeball_z_comp = 131;
    else if (dodgeball_z_comp >= 169.9)
        dodgeball_z_comp = 169;
    
    dodgeball_pos = Vector(dodgeball_x_comp, dodgeball_y_comp, dodgeball_z_comp);
}

rule: "dodgeball out of bounds severe"
Event.OngoingPlayer
Player.Sigma
if (dodgeball_holder.dodgeball_held == false)
if ((XOf(dodgeball_pos) < -30 || XOf(dodgeball_pos) > 30 || YOf(dodgeball_pos) < 155.9 || YOf(dodgeball_pos) > 171 || ZOf(dodgeball_pos) < 130 || ZOf(dodgeball_pos) > 170) == true)
if (dodgeball_activate == true)
{
    Wait(1, WaitBehavior.IgnoreCondition);
    AbortIfConditionIsFalse();
    dodgeball_clamp_in_range();
    LoopIfConditionIsTrue();
}