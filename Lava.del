import "Reinhardt.del";
import "Ball.del";
import "Score.del";
import "Volleyball.del";
// import "!Debug Tools.del";
// import "!Debug Camera.del";
import "Death Boundary.del";
import "Camera.del";
import "HostMenu.del";
import "dodgeball.del";
import "customGameSettings.json";
import "TheristerCode.ow";

globalvar define started = false;
playervar define isWorkingDummy;
globalvar Mode gamemode = Mode.Waiting;

enum Mode
{
    Waiting = 0,
    Soccer = 1,
    Volleyball = 2,
    Dodgeball = 6
}

rule: "Setup"
{
    CreateHudText(
        VisibleTo     : AllPlayers(),
        Subheader     : "https://bit.ly/grandeurhammers",
        SubheaderColor: Color.Orange,
        Location      : Location.Left,
        Spectators    : Spectators.VisibleAlways,
        SortOrder     : -101
    );
    CreateHudText(
        VisibleTo: AllPlayers(),
        Subheader: "https://github.com/ItsDeltin/Overwatch-Script-To-Workshop",
        SubheaderColor: Color.Blue,
        Location: Location.Left,
        Spectators: Spectators.VisibleAlways,
        SortOrder: -100
    );
    CreateHudText(AllPlayers(), Text: " \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", Location: Location.Left, SortOrder: -99);

    CreateHudText(VisibleTo: AllPlayers(), Text: "Synthball - N69CC", TextColor: Color.Turquoise, Location: Location.Top, SortOrder: -1, Spectators: Spectators.VisibleAlways);
    CreateHudText(HostPlayer(), Subheader: "You are the host player. Press interact to open the host settings.", SubheaderColor: Color.Turquoise, Location: Location.Top, SortOrder: -0.9, Spectators: Spectators.VisibleNever);
    CreateHudText(HostPlayer(), Subheader: <"C-A-P: <0>-<1>-<2>", ServerLoad(), ServerLoadAverage(), ServerLoadPeak()>, SubheaderColor: Color.Green, Location: Location.Top, SortOrder: -0.8, Spectators: Spectators.VisibleAlways);
    SetObjectiveDescription(AllPlayers(), "â™¥", ObjectiveRev.VisibleToSortOrderAndString);
    DisableCompletion();
    SetMatchTime(0);
}

rule: "Player Setup"
Event.OngoingPlayer
{
    CreateHudText(EventPlayer(), Text: [
        "Charge into the center pole to knock the ball off.",
        "Hold out your shield and look up to become a ramp.\nCharge into a ramp to fly up into the air.",
        "Hold crouch while charging to brake.",
        "Hit the ball with a fire strike to ignite it.",
        "Charging the ball while it is exploding will launch it and you into the air.",
        "Striking the ball with a fire strike while it is in midair will cause\nit to launch into the direction it was hit.",
        "Hitting the ball with your hammer immediately after charging it will\ncause it to be launched further.",
        "In volleyball, the ball will only explode when the ball is on the ground.\nWhen the timer runs out, keep it in the air!",
        "In volleyball, the amount of time until the ball explodes decreases each\ntime the ball switches sides.",
        "The host player can press interact to open game settings.",
        "The source code is available at https://github.com/ItsDeltin/Lava\nYou can report bugs there, too!"
    ][tipIndex], Subheader: "Press reload for the next tip.", SubheaderColor: Color.Aqua, Location: Location.Left, SortOrder: -98);
}

rule: "Next tip"
Event.OngoingPlayer
if (IsButtonHeld(EventPlayer(), Button.Reload))
{
    tipIndex++;
    if (tipIndex > 10) tipIndex = 0;
}

playervar define tipIndex = 0;

rule: "Generic Respawn"
Event.OngoingPlayer
if (HasSpawned())
if (IsAlive())
if (!isWorkingDummy)
{
    ResetPlayer(EventPlayer());
}

void ResetPlayer(define player) "Reset"
{
    Respawn();
    MinWait();
    // Volleyball, soccer, waiting
    if (gamemode >= 0 && gamemode <= 3)
    {
        define spawnAt ! = RandomValueInArray([1,2,3,4,5]);
        Teleport(EventPlayer(), Vector(TeamOf(EventPlayer()) == Team.Team1 ? 60 : -60, 154.88, (150 - 30) + (((150 + 30) - (150 - 30))/5)*spawnAt));
    } 
    // No gamemode
    else if (gamemode == Mode.Dodgeball){
        define spawnAt ! = RandomValueInArray([1,2,3,4,5]);
        Teleport(EventPlayer(), Vector(TeamOf(EventPlayer()) == Team.Team1 ? 28 : -28, 154.88, (150-10) + (((150 + 10) - (150 - 10))/5)*spawnAt))
    }

    SetFacing(EventPlayer(), DirectionTowards(EyePosition(), TopPolePos()));
    EventPlayer().blueSide = TeamOf() == Team.Team1;
}

define rowCount(): 40;
define columnCount(): 28;

globalvar define arenaEffects = [];

globalvar Vector cliffBlue! = Vector(107.07, 154.88, 63.61);
globalvar Vector cliffRed! = Vector(-109.08, 154.88, 65.06);
globalvar Vector towerBlue! = Vector(108.08, 154.88, 213.35);
globalvar Vector towerRed! = Vector(-108.07, 154.88, 214.81);
Vector planePos: Vector(0, 154.88, 0);

rule: "Setup Arena"
{
    OuterWalls();

    // Pole flair
    CreateEffect(AllPlayers(), Effect.Orb, Color.Orange, TopPolePos(), 0.25, EffectRev.VisibleTo);
    // ModifyGlobalVariable(arenaEffects, Operation.AppendToArray, LastCreatedEntity());
    // CreateBeamEffect(
    //     AllPlayers(),
    //     BeamType.GoodBeam,
    //     flairPos(),
    //     TopPolePos(),
    //     Color.Red
    // );
    // ModifyGlobalVariable(arenaEffects, Operation.AppendToArray, LastCreatedEntity());
    // ChaseVariableAtRate(killzoneRot, 180, 25, RateChaseReevaluation.DestinationAndRate);
}

rule: "Setup Arena: Floor"
if (gamemode == Mode.Soccer || gamemode == Mode.Volleyball || gamemode == Mode.Waiting)
{
    MakeFloor();
}

// define flairPos(): Destination(PolePos() * Vector(1,0,1) + Vector(0, 136.42, 0), DirectionFromAngles(killzoneRot, 0), 11);

// rule: "Reset killzone rot"
// if (killzoneRot == 180)
// {
//     killzoneRot = -180;
// }

// rule: "Blip end"
// if (AbsoluteValue(killzoneRot - 22.5) % 45 < 1)
// {
//     PlayEffect(AllPlayers(), PlayEffect.GoodExplosion, Color.Red, flairPos(), 1);
// }

// globalvar define killzoneRot = -180;

globalvar define arenaType! = 0;
globalvar define arenaColor! = 0;

void MakeFloor() "Arena: Make Floor"
{
    if (!ArrayContains([Mode.Waiting, Mode.Soccer, Mode.Volleyball], gamemode)) return;

    for (define i! = 0; i < CountOf(arenaEffects); i++) {
        DestroyEffect(arenaEffects[i]);
        MinWait();
    }
    arenaEffects = [];
    MinWait();

    if (arenaType == 0)
    {
        define rowFraction! = 1/rowCount();
        define columnFraction! = 1/columnCount();

        for (define x! = 0; x <= rowCount(); x++)
        {
            define a! = LinearInterpolate(cliffBlue, cliffRed, x*rowFraction);
            define b! = LinearInterpolate(towerBlue, towerRed, x*rowFraction);
            ArenaBeam(a, b);
            MinWait();
        }
        for (define z! = 0; z <= columnCount(); z++)
        {
            define a! = LinearInterpolate(cliffBlue, towerBlue, z*columnFraction);
            define b! = LinearInterpolate(cliffRed, towerRed, z*columnFraction);
            ArenaBeam(a, b);
            MinWait();
        }
    }
    else if (arenaType == 1)
    {
        ArenaBeam(cliffBlue, towerBlue);
        ArenaBeam(towerBlue, towerRed);
        ArenaBeam(towerRed, cliffRed);
        ArenaBeam(cliffRed, cliffBlue);
        ArenaBeam((towerBlue + towerRed) / 2, (cliffBlue + cliffRed) / 2);
        ArenaBeam((towerBlue + cliffBlue) / 2, (towerRed + cliffRed) / 2);
    }
    else if (arenaType == 2)
    {
        define columnFraction! = 1/columnCount();
        for (define z! = 0; z <= columnCount(); z++)
        {
            define a! = LinearInterpolate(cliffBlue, towerBlue, z*columnFraction);
            define b! = LinearInterpolate(cliffRed, towerRed, z*columnFraction);
            ArenaBeam(a, b);
            MinWait();
        }
    }
}

void ArenaBeam(Vector a, Vector b) "Arena: Make Beam"
{
    if (arenaColor == 0) ArenaBeam(a, b, BeamType.GrappleBeam, Color.White);
    else if (arenaColor == 1) ArenaBeam(a, b, BeamType.GoodBeam, Color.Purple);
    else if (arenaColor == 2) ArenaBeam(a, b, BeamType.GoodBeam, Color.White);
    else if (arenaColor == 3) ArenaBeam(a, b, BeamType.GoodBeam, Color.Orange);
    else if (arenaColor == 4) ArenaBeam(a, b, BeamType.GoodBeam, Color.Green);
    else if (arenaColor == 5) ArenaBeam(a, b, BeamType.GoodBeam, Color.Aqua);
    ModifyVariable(arenaEffects, Operation.AppendToArray, LastCreatedEntity());
}

void ArenaBeam(ref Vector a, ref Vector b, BeamType type, Color color)
{
    CreateBeamEffect(
        AllPlayers(),
        type,
        a,
        b,
        color,
        EffectRev.VisibleTo
    );
}

void OuterWalls()
{
    // Cliff side
    CreateBeamEffect(
        AllPlayers(),
        BeamType.BadBeam,
        Vector(-109.08, 158.44, 65.06),
        Vector(107.07, 158.44, 63.61),
        Color.Orange,
        EffectRev.VisibleTo
    );
    // Tower side
    CreateBeamEffect(
        AllPlayers(),
        BeamType.BadBeam,
        Vector(108.08, 158.44, 213.35),
        Vector(-108.07, 158.44, 214.81),
        Color.Orange,
        EffectRev.VisibleTo
    );
    // Team 1 side
    // inner
    CreateBeamEffect(
        AllPlayers(),
        BeamType.BadBeam,
        Vector(108.08, 158.44, 213.35),
        Vector(107.07, 158.44, 63.61),
        Color.Team2,
        EffectRev.VisibleTo
    );
    // Outer
    CreateBeamEffect(
        AllPlayers(),
        BeamType.BadBeam,
        Vector(115.69, 158.44, 213.35),
        Vector(115.69, 158.44, 63.61),
        Color.Team2,
        EffectRev.VisibleTo
    );
    // Team 2 side
    // Inner
    CreateBeamEffect(
        AllPlayers(),
        BeamType.BadBeam,
        Vector(-109.08, 158.44, 65.06),
        Vector(-108.07, 158.44, 214.81),
        Color.Team1,
        EffectRev.VisibleTo
    );
    //Outer
    CreateBeamEffect(
        AllPlayers(),
        BeamType.BadBeam,
        Vector(-118.45, 158.44, 65.06),
        Vector(-118.45, 158.44, 214.81),
        Color.Team1,
        EffectRev.VisibleTo
    );
}

define PolePos()   : Vector(0, 154.88, 150);
define TopPolePos(): Vector(0, 161.5,  150);

define isOnWall(define player): IsOnGround(player) && AbsoluteValue(YOf(PositionOf(player)) - 158.44) < 0.2;

disabled rule: "I want to die"
if (IsButtonHeld(HostPlayer(), Button.Melee))
{
    CreateDummyBot(Hero.Reinhardt, NumberOfPlayers(Team.Team1) < 6 ? Team.Team1 : Team.Team2, -1, PositionOf(HostPlayer()), FacingDirectionOf(HostPlayer()));
    //LastCreatedEntity().isWorkingDummy = true;
    StartHoldingButton(LastCreatedEntity(), Button.SecondaryFire);
    MinWait();
    SetFacing(LastCreatedEntity(), FacingDirectionOf(HostPlayer()), Relative.ToWorld);
}

rule: "Start"
if (!started)
if (IsTrueForAll(AllPlayers(), HasSpawned(ArrayElement()) || IsDead(ArrayElement())))
{
    started = true;
    Wait(10);
    gamemode = Mode.Soccer;
    SpawnPlayers();
}

globalvar define tutorialText = [];

void DestroyTutorialText() "Destroy Tutorial Text"
{
    foreach (define text in tutorialText)
        DestroyHudText(text);
}

// globalvar define currentHeroIndex! = 0;
// globalvar define currentHeroHud! = null;
// rule: "Next hero index"
// if (IsButtonHeld(HostPlayer(), Button.Interact))
// {
//     if (currentHeroHud == null)
//     {
//         CreateHudText(
//             VisibleTo: HostPlayer(), 
//             Header   : <"<0><1><2>",
//                 AbilityIconString(AllHeroes()[currentHeroIndex], ButtonValue(Button.Ability1)),
//                 AbilityIconString(AllHeroes()[currentHeroIndex], ButtonValue(Button.Ability2)),
//                 AbilityIconString(AllHeroes()[currentHeroIndex], ButtonValue(Button.Ultimate))
//             >
//         );
//         currentHeroHud[0] = LastTextID();
//         CreateHudText(
//             VisibleTo: HostPlayer(), 
//             Header   : <"<0><1>",
//                 AbilityIconString(AllHeroes()[currentHeroIndex], ButtonValue(Button.PrimaryFire)),
//                 AbilityIconString(AllHeroes()[currentHeroIndex], ButtonValue(Button.SecondaryFire))
//             >
//         );
//         currentHeroHud[1] = LastTextID();
//     }
//     else
//     {
//         currentHeroIndex++;
//         if (currentHeroIndex == CountOf(AllHeroes()))
//         {
//             currentHeroIndex = 0;
//             DestroyHudText(currentHeroHud[0]);
//             DestroyHudText(currentHeroHud[1]);
//             currentHeroHud = null;
//         }
//     }
// }
