import "Ball.del";
import "Debug Tools.del";

define globalvar origin = Vector(-0.18, 154.88, 60);

rule: "TP to arena"
Event.OngoingPlayer
if (HasSpawned())
if (IsAlive())
if (!IsDummyBot())
{
    Teleport(EventPlayer(), origin);
}

rule: "Setup Arena"
{
    OuterWalls();

    for (define x = -110; x <= 110; x += 4.4)
    {
        CreateBeamEffect(
            AllPlayers(),
            BeamType.GrappleBeam,
            Vector(x, 154.88, 65),
            Vector(x, 154.88, 215),
            Color.Red,
            EffectRev.VisibleTo
        );
    }

    for (define z = 65; z <= 215; z += 4.4) //3
    {
        CreateBeamEffect(
            AllPlayers(),
            BeamType.GrappleBeam,
            Vector(-110, 154.88, z),
            Vector(110, 154.88, z),
            Color.Red,
            EffectRev.VisibleTo
        );
    }

    CreateEffect(AllPlayers(), Effect.Orb, Color.Orange, TopPolePos() - Vector(0, 0.5, 0), 0.25, EffectRev.VisibleTo);
}

method OuterWalls()
{
    CreateBeamEffect(
        AllPlayers(),
        BeamType.BadBeam,
        Vector(-109.08, 158.44, 65.06),
        Vector(-108.07, 158.44, 214.81),
        Color.Orange,
        EffectRev.VisibleTo
    );
    CreateBeamEffect(
        AllPlayers(),
        BeamType.BadBeam,
        Vector(-109.08, 158.44, 65.06),
        Vector(107.07, 158.44, 63.61),
        Color.Orange,
        EffectRev.VisibleTo
    );
    CreateBeamEffect(
        AllPlayers(),
        BeamType.BadBeam,
        Vector(108.08, 158.44, 213.35),
        Vector(-108.07, 158.44, 214.81),
        Color.Orange,
        EffectRev.VisibleTo
    );
    CreateBeamEffect(
        AllPlayers(),
        BeamType.BadBeam,
        Vector(108.08, 158.44, 213.35),
        Vector(107.07, 158.44, 63.61),
        Color.Orange,
        EffectRev.VisibleTo
    );
}

define playervar chargeStart = null;

rule: "Charge Speed Boost"
Event.OngoingPlayer
Player.Reinhardt
if (IsUsingAbility1())
{
    chargeStart = TotalTimeElapsed();
    SetMoveSpeed(EventPlayer(), 200);
}

rule: "Charge Speed Boost Revert"
Event.OngoingPlayer
Player.Reinhardt
if (!IsUsingAbility1())
{
    SetMoveSpeed(EventPlayer(), 100);
}

rule: "Hit pole"
Event.OngoingPlayer
Player.Reinhardt
if (!IsUsingAbility1())
if (TotalTimeElapsed() - chargeStart <= 4)
if (DistanceBetween(EventPlayer(), PolePos()) < 3)
{
    SmallMessage(EventPlayer(), "KA-DONG!");
    PlayEffect(AllPlayers(), PlayEffect.RingExplosionSound, Color.White, PolePos(), 200);
    PlayEffect(AllPlayers(), PlayEffect.RingExplosion, Color.SkyBlue, PolePos(), 50);

    // Apply momentum to the player who hit the pole
    ApplyImpulse(EventPlayer(), DirectionTowards(PolePos(), PositionOf() + Vector(0, 0.5, 0)), 30, Relative.ToWorld, ContraryMotion.Cancel);

    // Apply momentum to the ball
    if (ballIsOnStand)
    {
        ApplyImpulse(ball1, DirectionTowards(EventPlayer(), PolePos() + Vector(0, 0.5, 0)), 30, Relative.ToWorld, ContraryMotion.Cancel);
        ApplyImpulse(ball2, DirectionTowards(EventPlayer(), PolePos() + Vector(0, 0.5, 0)), 30, Relative.ToWorld, ContraryMotion.Cancel);
        ballIsOnStand = false;
    }
}

macro PolePos()   : Vector(0, 154.88, 150);
macro TopPolePos(): Vector(0, 162,    150);
macro BaseOffset(): Vector(0, 0.5, 0);

rule: "Shield Surf"
Event.OngoingPlayer
Player.Reinhardt
if (IsUsingAbility1())
if (IsTrueForAny(
        AllPlayers(),
        IsButtonHeld(ArrayElement(), Button.SecondaryFire)
        && HeroOf(ArrayElement()) == Hero.Reinhardt
        && VerticalFacingAngleOf(ArrayElement()) < -40
        && DistanceBetween(EventPlayer(), ArrayElement()) <= 5
        && IsInViewAngle(ArrayElement(), PositionOf(EventPlayer()), 100)
    ))
{
    SmallMessage(EventPlayer(), "Stylish!");
    Teleport(EventPlayer(), PositionOf(EventPlayer()) + Vector(0, 2, 0));
    ApplyImpulse(EventPlayer(), Up(), 15, Relative.ToWorld, ContraryMotion.Incorporate);
}

rule: "debug spawn"
Event.OngoingPlayer
if (IsCommunicating(EventPlayer(), Communication.Acknowledge))
{
    CreateDummyBot(Hero.Reinhardt, Team.Team2, -1, PositionOf(EventPlayer()), Vector());
    define dummy = LastCreatedEntity();

    Wait(3);
    StartHoldingButton(dummy, Button.SecondaryFire);
    StartFacing(dummy, Vector(-0.74, 0.67, 0.07), 500, Relative.ToWorld, FacingRev.DirectionAndTurnRate);
}