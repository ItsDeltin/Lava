import "Lava.del";

/*
Usage:

    To create contained rule:
        import "Container.del";

        rule: "Scoped Index"
        Event.OnDamageTaken          // On Damage Takene event
        if (scoper == EventPlayer()) // Check if is scoper
        if (GetID() == 79)           // GetID equals expected ID
        {
            // GetPlayer() for executor
            // GetData() for sent data
            CreateEffect(AllPlayers(), Effect.Sphere, Color.Red, Destination(EyePosition(GetPlayer()), FacingDirectionOf(GetPlayer()), GetData()), 0.1);
        }

    To trigger rule:
        ActivateScoper(79, someData);

*/

define globalvar scoper;
define globalvar scoperDmgMod;
define globalvar scoperSetup = false;

method SetupPlayerAsScoper(define player)
{
    scoper = player;

    SetStatus(scoper, null, Status.Unkillable, 9999);
    SetMaxHealth(scoper, 1000);
    StartDamageModification(scoper, FilteredArray(AllPlayers(), ArrayElement() != scoper), 0, ModRev.ReceiversDamagersAndDamagePercent);
    scoperDmgMod = LastDamageModificationID();
}

rule: "Setup Player As Scoper"
Event.OngoingPlayer
if (scoper == EventPlayer())
if (HasSpawned())
{
    Teleport(scoper, origin);
    Heal(scoper, null, 6000);
    scoperSetup = true;
}

method RevertScoper()
{
    ClearStatus(scoper, Status.Unkillable);
    SetMaxHealth(scoper, 100);
    StopDamageModification(scoperDmgMod);
    scoper = null;
    scoperSetup = false;
}

public method ActivateScoper(define id, define data)
{
    // Encode the executor, id and data into one number.
    //      vv executor
    // 1234.5678
    // ^^^^   ^^
    // data   ID
    data += (SlotOf(EventPlayer()) + (TeamOf(EventPlayer()) == Team.Team1) ? 0 : 6) / 100;
    data += id / 10000;
    Damage(scoper, scoper, data);
    Heal(scoper, null, 6000);
}

// 123.0179
// ^^^ Gets the whole number (123)
public define GetData(): RoundToInteger(EventDamage(), Rounding.Down);

define GetPlayer(): PlayersInSlot(rawPlayerID() - ((rawPlayerID() < 6) ? 0 : 6), decodeTeam());

// 123.0179
//       ^^ Gets the last 2 digits (79)
// Use Nearest because of optimizations at this decimal level
define GetID(): RoundToInteger((EventDamage() * 10000) % 100, Rounding.Nearest);

// 123.0179
//     ^^ Gets the first 2 digits (01)
define rawPlayerID(): RoundToInteger((EventDamage() * 100) % 100, Rounding.Down);

define decodeTeam(): (rawPlayerID() < 6) ? Team.Team1 : Team.Team2;