import "Lava.del";

rule: "Maze: Start/Stop"
if (CurrentGameMode() == GameMode.Deathmatch)
{
    DestroyAllEffects();
    gamemode = 5;
    generateStep = 1;
}

// x/zAxisWalls are array of vectors determining the location of each wall.
// The X in the vector for xAxisWalls determines where the wall starts on the X axis. The Y determines where it ends. The Z is where on the Z axis the wall is.
globalvar define xAxisWalls = [];
globalvar define zAxisWalls = [];

globalvar define cellStates = [];
globalvar define toVisitX   = [];
globalvar define toVisitY   = [];
globalvar define generateStep = 0;
globalvar define numberOfVisits ! = 0;
globalvar define loadingHudText !;

macro mazeWidth()  : 10;
macro mazeHeight() : 10;
macro buildMazeAt(): Vector(-86.56, 154.88, 83.64);
macro Scale(): 8;
// Flags, each must be double of the one before.
macro TopWall()    : 1;
macro RightWall()  : 2;
macro BottomWall() : 4;
macro LeftWall()   : 8;
macro Visited()    : 16;

macro indexFromCoord(define x, define z): (x * mazeHeight()) + z;

macro mazeWallHeight(): 1.2;

macro mazePos(define pos): (pos - buildMazeAt()) / Scale();
macro randomMazeSpot(): Vector(
        XOf(buildMazeAt()) + (RandomInteger(0, mazeWidth() - 1) * Scale()),
        YOf(buildMazeAt()),
        ZOf(buildMazeAt()) + (RandomInteger(0, mazeHeight() - 1) * Scale())
    );

macro mazeCenter(): buildMazeAt() + Vector(mazeWidth() * Scale() / 2, 0, mazeHeight() * Scale() / 2);

rule: "Maze: Generate: Initial states"
if (generateStep == 1)
{
    for (define i = 0; i <= mazeWidth() * mazeHeight(); i++)
        cellStates[i] = 15;
    
    generateStep = 2;

    CreateHudText(
        VisibleTo     : AllPlayers(),
        Header        : IconString(Icon.Spiral),
        HeaderColor   : Color.Orange,
        Subheader     : "Generating maze...",
        SubheaderColor: Color.Turquoise,
        Text          : <"<0>%", RoundToInteger((numberOfVisits / mazeWidth() * mazeHeight()) * 100, Rounding.Up)>,
        TextColor     : Color.Green,
        Location      : Location.Top,
        SortOrder     : 1,
        Spectators    : Spectators.VisibleAlways
    );
    loadingHudText = LastTextID();
}

// define globalvar dirIndex ! =[1,mazeHeight(),-1,-mazeHeight()];
globalvar define dirFlag  ! =[TopWall(), RightWall(), BottomWall(), LeftWall()];
globalvar define offsetX  ! =[0,1,0,-1];
globalvar define offsetY  ! =[1,0,-1,0];

rule: "Maze: Generate: Visit Cells"
if (generateStep == 2)
{
    define initialX = RandomInteger(0, mazeWidth() - 1);
    define initialY = RandomInteger(0, mazeHeight() - 1);

    ModifyGlobalVariable(toVisitX, Operation.AppendToArray, initialX);
    ModifyGlobalVariable(toVisitY, Operation.AppendToArray, initialY);

    cellStates[indexFromCoord(initialX, initialY)] += Visited();

    while (CountOf(toVisitX) > 0)
    {
        numberOfVisits++;

        define x ! = LastOf(toVisitX);
        define y ! = LastOf(toVisitY);

        define removeAt = CountOf(toVisitX) - 1;

        define order ! = RandomizedArray([0,1,2,3]);
        foreach (define i in order)
        {
            define checkX ! = x + offsetX[i];
            define checkY ! = y + offsetY[i];
            define checkIndex ! = indexFromCoord(checkX, checkY);

            if (checkX >= 0 && checkY >= 0 && checkX < mazeWidth() && checkY < mazeHeight() && cellStates[checkIndex] < Visited())
            {
                cellStates[indexFromCoord(x, y)] -= dirFlag[i];
                cellStates[checkIndex] -= dirFlag[i + (i < 2 ? 2 : -2)];
                cellStates[checkIndex] += Visited();
                ModifyGlobalVariable(toVisitX, Operation.AppendToArray, checkX);
                ModifyGlobalVariable(toVisitY, Operation.AppendToArray, checkY);
            }
        }

        MinWait();

        ModifyGlobalVariable(toVisitX, Operation.RemoveFromArrayByIndex, removeAt);
        ModifyGlobalVariable(toVisitY, Operation.RemoveFromArrayByIndex, removeAt);
    }

    generateStep = 3;
}

// rule: "Maze: Generate: Make loop"
// if (generateStep == 2.5)
// {
//     navigateTo = mazePos(PositionOf(HostPlayer()));

//     define aStarCheck = [];
//     ModifyGlobalVariable(aStarCheck, Operation.AppendToArray, Vector(0, 1, 0));

//     define visited = [];

//     for (define i ! = 0; i < CountOf(aStarCheck); i++)
//     {
//         define x ! = XOf(aStarCheck[i]);
//         define z ! = ZOf(aStarCheck[i]);
//         define cellCheck ! = cellStates[indexFromCoord(x,z)] - 16;
//         visited[indexFromCoord(x,z)] = YOf(aStarCheck[i]);

//         // Left wall
//         if (cellCheck >= LeftWall())
//             cellCheck -= LeftWall();
//         // No left wall
//         else if (x > 0 && visited[indexFromCoord(x - 1,z)] == 0)
//             ModifyGlobalVariable(aStarCheck, Operation.AppendToArray, Vector(x - 1, i + 2, z));
        
//         // Bottom wall
//         if (cellCheck >= BottomWall())
//             cellCheck -= BottomWall();
//         // No bottom wall
//         else if (z > 0 && visited[indexFromCoord(x,z - 1)] == 0)
//             ModifyGlobalVariable(aStarCheck, Operation.AppendToArray, Vector(x, i + 2, z - 1));
        
//         MinWait();

//         // Right wall
//         if (cellCheck >= RightWall())
//             cellCheck -= RightWall();
//         // No right wall
//         else if (x < mazeWidth() - 1 && visited[indexFromCoord(x + 1,z)] == 0)
//             ModifyGlobalVariable(aStarCheck, Operation.AppendToArray, Vector(x + 1, i + 2, z));
        
//         // Top wall
//         if (cellCheck >= TopWall())
//             cellCheck -= TopWall();
//         // No top wall
//         else if (z < mazeHeight() - 1 && visited[indexFromCoord(x,z + 1)] == 0)
//             ModifyGlobalVariable(aStarCheck, Operation.AppendToArray, Vector(x, i + 2, z + 1));
//     }

//     define chosen   ! = -1;
//     define breakDir !;
//     define distance ! = -1;

//     for (define x ! = 0; x < mazeWidth(); x++)
//     for (define z ! = 0; z < mazeHeight(); z++)
//     {
//         define topDist ! = loopMakerDist(visited,x,z,x,z+1);
//         if (topDist > distance && z < mazeHeight() - 1)
//         {
//             distance = topDist;
//             breakDir = 0;
//             chosen = indexFromCoord(x,z);
//         }

//         define rightDist ! = loopMakerDist(visited,x,z,x+1,z);
//         if (rightDist > distance && x < mazeWidth() - 1)
//         {
//             distance = rightDist;
//             breakDir = 1;
//             chosen = indexFromCoord(x,z);
//         }

//         define bottomDist ! = loopMakerDist(visited,x,z-1,x,z);
//         if (bottomDist > distance && z > 0)
//         {
//             distance = bottomDist;
//             breakDir = 2;
//             chosen = indexFromCoord(x,z);
//         }

//         define leftDist ! = loopMakerDist(visited,x-1,z,x,z);
//         if (leftDist > distance && x > 0)
//         {
//             distance = leftDist;
//             breakDir = 3;
//             chosen = indexFromCoord(x,z);
//         }
//     }

//     cellStates[chosen] -= [TopWall(), RightWall(), BottomWall(), LeftWall()][breakDir];
//     aStarCheck = [];
//     visited = [];
//     generateStep = 3;
// }
// macro loopMakerDist(define visited, define x1, define z1, define x2, define z2): AbsoluteValue(visited[indexFromCoord(x1,z1)] - visited[indexFromCoord(x2,z2)]);

rule: "Maze: Generate: Create Walls: X axis"
if (generateStep == 3)
{
    for (define z ! = 0; z < mazeHeight(); z++)
    {
        define topLineStart ! = -1;
        define bottomLineStart ! = -1;

        for (define x ! = 0; x < mazeWidth(); x++)
        {
            define cellCheck = cellStates[indexFromCoord(x,z)] - Visited();

            if (hasBottomWall(cellCheck) && bottomLineStart == -1 && z == 0) bottomLineStart = x;
            
            // Top wall
            if (hasTopWall(cellCheck))
            {
                if (topLineStart == -1) topLineStart = x;
            }
            else if (topLineStart != -1)
            {
                ModifyGlobalVariable(xAxisWalls, Operation.AppendToArray, 
                    Vector(
                        // Wall start
                        (topLineStart - 0.5) * Scale(),
                        // Wall end
                        (x - 1 + 0.5) * Scale(),
                        // Wall Z axis
                        (z + 0.5) * Scale()
                    )
                );
                topLineStart = -1;
            }
        }

        if (topLineStart != -1)
        {
            ModifyGlobalVariable(xAxisWalls, Operation.AppendToArray, 
                Vector(
                    // Wall start
                    (topLineStart - 0.5) * Scale(),
                    // Wall end
                    (mazeWidth() - 1 + 0.5) * Scale(),
                    // Wall Z axis
                    (z + 0.5) * Scale()
                )
            );
        }
        if (bottomLineStart != -1)
        {
            ModifyGlobalVariable(xAxisWalls, Operation.AppendToArray, 
                Vector(
                    // Wall start
                    (bottomLineStart - 0.5) * Scale(),
                    // Wall end
                    (mazeWidth() - 1 + 0.5) * Scale(),
                    // Wall Z axis
                    (z - 0.5) * Scale()
                )
            );
        }
    }

    for (define xi = 0; xi < CountOf(xAxisWalls); xi++)
    {
        xAxisWalls[xi] = Vector(
            XOf(buildMazeAt()) + XOf(xAxisWalls[xi]),
            XOf(buildMazeAt()) + YOf(xAxisWalls[xi]),
            ZOf(buildMazeAt()) + ZOf(xAxisWalls[xi])
        );

        define a! = Vector(XOf(xAxisWalls[xi]), YOf(buildMazeAt()) + mazeWallHeight(), ZOf(xAxisWalls[xi]));
        define b! = Vector(YOf(xAxisWalls[xi]), YOf(buildMazeAt()) + mazeWallHeight(), ZOf(xAxisWalls[xi]));

        CreateBeamEffect(
            AllPlayers(),
            BeamType.GrappleBeam,
            a,
            b,
            Color.Red,
            EffectRev.None
        );
    }

    generateStep = 4;
}

rule: "Maze: Generate: Create Walls: Z axis"
if (generateStep == 4)
{
    for (define x ! = 0; x < mazeWidth(); x++)
    {
        define rightLineStart ! = -1;
        define leftLineStart ! = -1;

        for (define z ! = 0; z < mazeHeight(); z++)
        {
            define cellCheck = cellStates[indexFromCoord(x,z)] - Visited();

            // Left wall
            if (hasLeftWall(cellCheck) && leftLineStart == -1 && x == 0) leftLineStart = z; // z to x? opposite of whats above

            // Right wall
            if (hasRightWall(cellCheck))
            {
                if (rightLineStart == -1) rightLineStart = z;
            }
            else if (rightLineStart != -1)
            {
                ModifyGlobalVariable(zAxisWalls, Operation.AppendToArray, 
                    Vector(
                        // Wall start
                        (rightLineStart - 0.5) * Scale(),
                        // Wall end
                        (z - 1 + 0.5) * Scale(),
                        // Wall x axis
                        (x + 0.5) * Scale()
                    )
                );
                rightLineStart = -1;
            }
        }

        if (rightLineStart != -1)
        {
            ModifyGlobalVariable(zAxisWalls, Operation.AppendToArray, 
                Vector(
                    // Wall start
                    (rightLineStart - 0.5) * Scale(),
                    // Wall end
                    (mazeHeight() - 1 + 0.5) * Scale(),
                    // Wall x axis
                    (x + 0.5) * Scale()
                )
            );
        }
        if (leftLineStart != -1)
        {
            ModifyGlobalVariable(zAxisWalls, Operation.AppendToArray, 
                Vector(
                    // Wall start
                    (leftLineStart - 0.5) * Scale(),
                    // Wall end
                    (mazeHeight() - 1 + 0.5) * Scale(),
                    // Wall x axis
                    (x - 0.5) * Scale()
                )
            );
        }
    }

    for (define zi = 0; zi < CountOf(zAxisWalls); zi++)
    {
        zAxisWalls[zi] = Vector(
            ZOf(buildMazeAt()) + XOf(zAxisWalls[zi]),
            ZOf(buildMazeAt()) + YOf(zAxisWalls[zi]),
            XOf(buildMazeAt()) + ZOf(zAxisWalls[zi])
        );

        define a! = Vector(ZOf(zAxisWalls[zi]), YOf(buildMazeAt()) + mazeWallHeight(), XOf(zAxisWalls[zi]));
        define b! = Vector(ZOf(zAxisWalls[zi]), YOf(buildMazeAt()) + mazeWallHeight(), YOf(zAxisWalls[zi]));

        CreateBeamEffect(
            AllPlayers(),
            BeamType.GrappleBeam,
            a,
            b,
            Color.Red,
            EffectRev.None
        );
    }

    generateStep = 5;
}

rule: "Maze: Hunter and Misc Setup"
if (generateStep == 5)
{
    DestroyHudText(loadingHudText);
    CreateEffect(AllPlayers(), Effect.Cloud, Color.White, mazeCenter(), mazeWidth() * Scale(), EffectRev.None);

    CreateDummyBot(Hero.Roadhog, Team.All, -1, randomMazeSpot(), Vector());
    navigator = LastCreatedEntity();
    navigator.isWorkingDummy = true;
    MinWait();
    SetMoveSpeed(navigator, 125);
    Teleport(navigator, randomMazeSpot());

    generateStep = 6;
}

rule: "Maze: Setup players"
Event.OngoingPlayer
if (generateStep == 5)
if (HasSpawned())
if (IsAlive())
if (!isWorkingDummy)
{
    defaultMoveSpeed = 100;
    SetMoveSpeed(EventPlayer(), 100);
    Teleport(EventPlayer(), randomMazeSpot());
}

rule: "(High Server Loa​d) Maze: Kill players on walls"
if (generateStep == 6)
{
    foreach (define player in FilteredArray(AllPlayers(), !ArrayElement().isWorkingDummy))
    if (!IsButtonHeld(player, Button.Crouch))
    {
        define px = XOf(PositionOf(player));
        define pz = ZOf(PositionOf(player));
        if (     IsTrueForAny(xAxisWalls, AbsoluteValue(pz - ZOf(ArrayElement())) < 1.5 && px > XOf(ArrayElement()) && YOf(ArrayElement()) > px))
            Kill(player, null);
        else if (IsTrueForAny(zAxisWalls, AbsoluteValue(px - ZOf(ArrayElement())) < 1.5 && pz > XOf(ArrayElement()) && YOf(ArrayElement()) > pz))
        {
            Kill(player, null);
        }

        Wait(0.025);
    }
    LoopIfConditionIsTrue();
}

globalvar define navigator;
globalvar define navigateTo;
globalvar define walkPath = [];
globalvar define isGettingPath ! = false;

rule: "Maze: Hunter Nav: Get path"
if (generateStep == 6)
if (IsCommunicating(HostPlayer(), Communication.UltimateStatus))
{
    navigateTo = mazePos(PositionOf(HostPlayer()));
    isGettingPath = true;

    define navigateToX ! = RoundToInteger(XOf(navigateTo), Rounding.Nearest);
    define navigateToZ ! = RoundToInteger(ZOf(navigateTo), Rounding.Nearest);

    define originX ! = RoundToInteger(XOf(mazePos(PositionOf(navigator))), Rounding.Nearest);
    define originZ ! = RoundToInteger(ZOf(mazePos(PositionOf(navigator))), Rounding.Nearest);

    define aStarCheck = [];
    ModifyVariable(aStarCheck, Operation.AppendToArray, Vector(navigateToX, -1, navigateToZ));

    define found ! = -1;

    define visited = [];

    for (define i ! = 0; i < CountOf(aStarCheck) && found == -1; i++)
    {
        define x ! = XOf(aStarCheck[i]);
        define z ! = ZOf(aStarCheck[i]);
        define cellCheck ! = cellStates[indexFromCoord(x,z)] - 16;
        visited[indexFromCoord(x,z)] = true;

        if (x == originX && z == originZ)
        {
            found = i;
        }
        else
        {
            // Left wall
            if (x > 0 && !hasLeftWall(cellCheck) && !visited[indexFromCoord(x - 1,z)])
            {
                ModifyVariable(aStarCheck, Operation.AppendToArray, Vector(x - 1, i, z));
                visited[indexFromCoord(x-1,z)] = true;
            }
            
            // Bottom wall
            if (z > 0 && !hasBottomWall(cellCheck) && !visited[indexFromCoord(x,z - 1)])
            {
                ModifyVariable(aStarCheck, Operation.AppendToArray, Vector(x, i, z - 1));
                visited[indexFromCoord(x,z-1)] = true;
            }

            MinWait();
            
            if (x < mazeWidth() - 1 && !hasRightWall(cellCheck) && !visited[indexFromCoord(x + 1,z)])
            {
                ModifyVariable(aStarCheck, Operation.AppendToArray, Vector(x + 1, i, z));
                visited[indexFromCoord(x+1,z)] = true;
            }
            
            // Top wall
            if (z < mazeHeight() - 1 && !hasTopWall(cellCheck) && !visited[indexFromCoord(x,z + 1)])
            {
                ModifyVariable(aStarCheck, Operation.AppendToArray, Vector(x, i, z + 1));
                visited[indexFromCoord(x,z+1)] = true;
            }
        }
    }
    visited = [];

    walkPath = [];
    while (found != -1)
    {
        ModifyGlobalVariable(walkPath, Operation.AppendToArray, Vector(
            XOf(buildMazeAt()) + (XOf(aStarCheck[found]) * Scale()),
            YOf(buildMazeAt()),
            ZOf(buildMazeAt()) + (ZOf(aStarCheck[found]) * Scale())
        ));
        found = YOf(aStarCheck[found]);
    }

    aStarCheck = [];
    isGettingPath = false;
}
macro hasTopWall(define cell): cell % 2 > 0;
macro hasRightWall(define cell): cell >= 2 && (cell - 2) % 4 <= 1;
macro hasBottomWall(define cell): cell >= 4 && (cell - 4) % 8 <= 3;
macro hasLeftWall(define cell): cell >= 8;

rule: "Maze: Hunter Nav: Start moving"
if (generateStep == 6)
if (!isGettingPath)
if (CountOf(walkPath) > 0)
{
    StartThrottleInDirection(
        navigator,
        DirectionTowards(PositionOf(navigator), FirstOf(walkPath)),
        1,
        Relative.ToWorld,
        ThrottleBehavior.ReplaceExistingThrottle,
        ThrottleRev.DirectionAndMagnitude
    );
    StartFacing(
        navigator,
        DirectionTowards(PositionOf(navigator), FirstOf(walkPath)),
        150,
        Relative.ToWorld,
        FacingRev.DirectionAndTurnRate
    );
}

rule: "Maze: Hunter Nav: Next node"
if (generateStep == 6)
if (!isGettingPath)
if (CountOf(walkPath) > 0)
if (DistanceBetween(navigator, FirstOf(walkPath)) < 1)
{
    ModifyGlobalVariable(walkPath, Operation.RemoveFromArrayByIndex, 0);
}

rule: "Maze: Hunter Nav: Stop"
if (generateStep == 6)
if (!isGettingPath)
if (CountOf(walkPath) == 0)
{
    StopThrottleInDirection(navigator);
    StopFacing(navigator);
}