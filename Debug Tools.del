disabled rule: "Debug"
{
    CreateHudText(HostPlayer(), null, "Eye Position:", EyePosition(HostPlayer()), Location.Left, 0, Color.White, Color.White, Color.Blue);
    CreateHudText(HostPlayer(), null, "Position:", PositionOf(HostPlayer()), Location.Left, 1, Color.White, Color.White, Color.Blue);
    CreateHudText(HostPlayer(), null, "Throttle:", ThrottleOf(HostPlayer()), Location.Left, 2, Color.White, Color.White, Color.Blue);
    CreateHudText(HostPlayer(), null, "Facing:", <"<0> (<1>, <2>)", FacingDirectionOf(HostPlayer()), HorizontalFacingAngleOf(HostPlayer()), VerticalFacingAngleOf(HostPlayer())>, Location.Left, 3, Color.White, Color.White, Color.Blue);
    CreateHudText(HostPlayer(), null, "Ray Cast Hit Position:",
        RayCastHitPosition(
            EyePosition(HostPlayer()),
            Destination(EyePosition(HostPlayer()), FacingDirectionOf(HostPlayer()), 100),
            AllPlayers(),
            HostPlayer(),
            true
        ), Location.Left, 4, Color.White, Color.White, Color.Blue
    );
    CreateHudText(HostPlayer(), null, "Ray Cast Hit Normal:",
        RayCastHitNormal(
            EyePosition(HostPlayer()),
            Destination(EyePosition(HostPlayer()), FacingDirectionOf(HostPlayer()), 100),
            AllPlayers(),
            HostPlayer(),
            true
        ), Location.Left, 5, Color.White, Color.White, Color.Blue
    );
    CreateHudText(HostPlayer(), null, "Ray Cast Hit Player:",
        RayCastHitPlayer(
            EyePosition(HostPlayer()),
            Destination(EyePosition(HostPlayer()), FacingDirectionOf(HostPlayer()), 100),
            AllPlayers(),
            HostPlayer(),
            true
        ), Location.Left, 6, Color.White, Color.White, Color.Blue
    );

    // CreateHudText(HostPlayer(), null, "Camera Pos:", <"<0> (<1>)", cameraPos, Destination(cameraPos, FacingDirectionOf(), 1)>, Location.Left, 3, Color.White, Color.White, Color.Blue);

    CreateHudText(HostPlayer(), null, "Server Load:", ServerLoad(), Location.Left, 7, Color.White, Color.White, Color.Blue);
    CreateHudText(HostPlayer(), null, "Server Load Average:", ServerLoadAverage(), Location.Left, 8, Color.White, Color.White, Color.Blue);
    CreateHudText(HostPlayer(), null, "Server Load Peak:", ServerLoadPeak(), Location.Left, 9, Color.White, Color.White, Color.Blue);

    CreateHudText(HostPlayer(), null, "Class Memory:", ClassMemory(), Location.Left, 10, Color.White, Color.White, Color.Blue);
    CreateHudText(HostPlayer(), null, "Class Memory Used:", ClassMemoryUsed(), Location.Left, 11, Color.White, Color.White, Color.Blue);
    CreateHudText(HostPlayer(), null, "Class Memory Created:", ClassMemoryRemaining(), Location.Left, 12, Color.White, Color.White, Color.Blue);
}

define playervar cam = false;
define playervar cameraPos;

disabled rule: "Free cam"
Event.OngoingPlayer
if (HostPlayer() == EventPlayer())
if (IsCommunicating(EventPlayer(), Communication.VoiceLineDown))
{
    cam = !cam;
}

disabled rule: "Start Camera"
Event.OngoingPlayer
if (HostPlayer() == EventPlayer())
if (cam)
{
    cameraPos = EyePosition();
    StartCamera(EventPlayer(), cameraPos, cameraPos + FacingDirectionOf(), 25);
    SetMoveSpeed(EventPlayer(), 0);
}

disabled rule: "Stop Camera"
Event.OngoingPlayer
if (HostPlayer() == EventPlayer())
if (!cam)
{
    StopCamera(EventPlayer());
    SetMoveSpeed(EventPlayer(), 100);
}

disabled rule: "TP to camera"
Event.OngoingPlayer
if (HostPlayer() == EventPlayer())
if (cam)
if (IsCommunicating(EventPlayer(), Communication.VoiceLineLeft))
{
    cam = false;
    define storeFacing = FacingDirectionOf();
    Teleport(EventPlayer(), cameraPos);
    SetFacing(EventPlayer(), storeFacing, Relative.ToWorld);
}

disabled rule: "Move camera"
Event.OngoingPlayer
if (HostPlayer() == EventPlayer())
if (cam)
if (DistanceBetween(Vector(), ThrottleOf(EventPlayer())) > 0)
{
    define x = XOf(ThrottleOf());
    define z = ZOf(ThrottleOf());

    define right = CrossProduct(FacingDirectionOf(), Up());

    if (x < 0)
        cameraPos += right / 2;
    else if (x > 0)
        cameraPos += -right / 2;
    
    if (z > 0)
        cameraPos += FacingDirectionOf() / 2;
    else if (z < 0)
        cameraPos -= FacingDirectionOf() / 2;

    MinWait();
    LoopIfConditionIsTrue();
}

disabled rule: "Move camera down"
Event.OngoingPlayer
if (HostPlayer() == EventPlayer())
if (cam)
if (IsButtonHeld(EventPlayer(), Button.Crouch))
{
    cameraPos += Down() / 2;
    MinWait();
    LoopIfConditionIsTrue();
}

disabled rule: "Move camera up"
Event.OngoingPlayer
if (HostPlayer() == EventPlayer())
if (cam)
if (IsButtonHeld(EventPlayer(), Button.Jump))
{
    cameraPos += Up() / 2;
    MinWait();
    LoopIfConditionIsTrue();
}

// CreateHudText(AllPlayers(), <"<0><1><2><3>",
    //     IconString(Icon.ArrowDown),
    //     IconString(Icon.ArrowLeft),
    //     IconString(Icon.ArrowRight),
    //     IconString(Icon.ArrowUp)>);
    // CreateHudText(AllPlayers(), <"<0><1><2><3>",
    //     IconString(Icon.Asterisk),
    //     IconString(Icon.Bolt),
    //     IconString(Icon.Checkmark),
    //     IconString(Icon.Circle)>);
    // CreateHudText(AllPlayers(), <"<0><1><2><3>",
    //     IconString(Icon.Club),
    //     IconString(Icon.Diamond),
    //     IconString(Icon.Dizzy),
    //     IconString(Icon.ExclamationMark)>);
    // CreateHudText(AllPlayers(), <"<0><1><2><3>",
    //     IconString(Icon.Eye),
    //     IconString(Icon.Fire),
    //     IconString(Icon.Flag),
    //     IconString(Icon.Halo)>);
    // CreateHudText(AllPlayers(), <"<0><1><2><3>",
    //     IconString(Icon.Happy),
    //     IconString(Icon.Heart),
    //     IconString(Icon.Moon),
    //     IconString(Icon.No)>);
    // CreateHudText(AllPlayers(), <"<0><1><2><3>",
    //     IconString(Icon.Plus),
    //     IconString(Icon.Poison),
    //     IconString(Icon.Poison2),
    //     IconString(Icon.QuestionMark)>);
    // CreateHudText(AllPlayers(), <"<0><1><2><3>",
    //     IconString(Icon.Radioactive),
    //     IconString(Icon.Recycle),
    //     IconString(Icon.RingThick),
    //     IconString(Icon.RingThin)>);
    // CreateHudText(AllPlayers(), <"<0><1><2><3>",
    //     IconString(Icon.Sad),
    //     IconString(Icon.Skull),
    //     IconString(Icon.Spade),
    //     IconString(Icon.Spiral)>);
    // CreateHudText(AllPlayers(), <"<0><1><2><3>",
    //     IconString(Icon.Stop),
    //     IconString(Icon.Trashcan),
    //     IconString(Icon.Warning),
    //     IconString(Icon.X)>);