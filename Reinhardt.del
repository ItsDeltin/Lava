import "Lava.del";

playervar define chargeStart = null;

globalvar define defaultMoveSpeed! = 150;
globalvar define fireStrikeSpeed! = 100;
globalvar define chargeSpeed! = 200;
globalvar define maxHealth! = 100;
globalvar define gravity! = 100;

rule: "Player: Setup"
Event.OngoingPlayer
Player.Reinhardt
{
    SetMoveSpeed(EventPlayer(), defaultMoveSpeed);
    SetProjectileSpeed(EventPlayer(), fireStrikeSpeed);
    SetMaxHealth(EventPlayer(), maxHealth);
    SetGravity(EventPlayer(), gravity);
}

rule: "Player: Charge Speed Boost"
Event.OngoingPlayer
Player.Reinhardt
if (IsUsingAbility1())
{
    chargeStart = TotalTimeElapsed();
    SetMoveSpeed(EventPlayer(), chargeSpeed);
}

rule: "Player: Charge Speed Boost Revert"
Event.OngoingPlayer
Player.Reinhardt
if (!IsUsingAbility1())
{
    SetMoveSpeed(EventPlayer(), defaultMoveSpeed);
}

rule: "Player: Hit pole"
Event.OngoingPlayer
Player.Reinhardt
if (!IsUsingAbility1())
if (IsAlive())
if (TotalTimeElapsed() - chargeStart <= 4)
if (DistanceBetween(EventPlayer(), PolePos()) < 3)
{
    chargeStart = 0;
    SmallMessage(EventPlayer(), "KA-DONG!");
    PlayEffect(AllPlayers(), PlayEffect.RingExplosionSound, Color.White, PolePos(), 200);
    PlayEffect(AllPlayers(), PlayEffect.RingExplosion, Color.SkyBlue, PolePos(), 50);

    // Apply momentum to the player who hit the pole
    ApplyImpulse(EventPlayer(), DirectionTowards(PolePos(), PositionOf() + Vector(0, 0.5, 0)), 30, Relative.ToWorld, ContraryMotion.Cancel);

    // Apply momentum to the ball
    if (ballIsOnStand)
    {
        ApplyImpulse(ball1, DirectionTowards(EventPlayer(), PolePos() + Vector(0, 0.5, 0)), 30, Relative.ToWorld, ContraryMotion.Cancel);
        ApplyImpulse(ball2, DirectionTowards(EventPlayer(), PolePos() + Vector(0, 0.5, 0)), 30, Relative.ToWorld, ContraryMotion.Cancel);
        OffStand();
    }
}

define shieldIsOut(define player): IsFiringSecondary(player) && HeroOf(player) == Hero.Reinhardt;

define isRamp(define player): shieldIsOut(player) && VerticalFacingAngleOf(player) < -40;

rule: "Player: Shield Surf"
Event.OngoingPlayer
Player.Reinhardt
if (IsUsingAbility1())
if (IsTrueForAny(
        AllPlayers(),
        isRamp(ArrayElement())
        && ArrayElement() != EventPlayer()
        && DistanceBetween(EventPlayer(), ArrayElement()) <= 5
        && IsInViewAngle(ArrayElement(), PositionOf(EventPlayer()), 100)
    ))
{
    SmallMessage(EventPlayer(), "Stylish!");
    Teleport(EventPlayer(), PositionOf(EventPlayer()) + Vector(0, 2, 0));
    ApplyImpulse(EventPlayer(), Up(), 15, Relative.ToWorld, ContraryMotion.Incorporate);
}

rule: "Player: Shield and brake HUD"
{
    CreateHudText(
        VisibleTo  : FilteredArray(PlayersOnHero(Hero.Reinhardt), shieldIsOut(ArrayElement()) && VerticalFacingAngleOf(ArrayElement()) > -40),
        Header     : IconString(Icon.ArrowUp),
        HeaderColor: Color.Orange,
        Text       : "Look up to become a ramp!",
        TextColor  : Color.Yellow,
        Location   : Location.Top,
        SortOrder  : 3,
        Spectators : Spectators.VisibleNever
    );
    CreateHudText(
        VisibleTo  : FilteredArray(PlayersOnHero(Hero.Reinhardt), shieldIsOut(ArrayElement()) && VerticalFacingAngleOf(ArrayElement()) <= -40),
        Header     : IconString(Icon.Moon),
        HeaderColor: Color.Aqua,
        Text       : "You are now a ramp.",
        TextColor  : Color.Yellow,
        Location   : Location.Top,
        SortOrder  : 3,
        Spectators : Spectators.VisibleNever
    );
    CreateHudText(
        VisibleTo  : FilteredArray(PlayersOnHero(Hero.Reinhardt), IsUsingAbility1(ArrayElement()) && IsOnGround(ArrayElement())),
        Header     : IconString(Icon.ArrowDown),
        HeaderColor: Color.Orange,
        Text       : "Crouch to brake!",
        TextColor  : Color.Yellow,
        Location   : Location.Top,
        SortOrder  : 4,
        Spectators : Spectators.VisibleNever
    );
}

playervar define arrowAnimation = 0;
playervar define arrowAnimation2 = 0;
playervar define arrowEffects;
define arrowDestination: 1.6;

rule: "Player: Shield Arrow"
Event.OngoingPlayer
Player.Reinhardt
if (isRamp(EventPlayer()))
{
    arrowAnimation = 0;
    arrowAnimation2 = 0.8;
    ChaseVariableAtRate(arrowAnimation, arrowDestination, 0.6, RateChaseReevaluation.None);
    ChaseVariableAtRate(arrowAnimation2, arrowDestination, 0.6, RateChaseReevaluation.None);

    CreateBeamEffect(FilteredArray(AllPlayers(), arrowAnimation <= 1), BeamType.GoodBeam, ArrowNodeBase(arrowAnimation, 1), ArrowNodeTip(arrowAnimation, 1), Color.Green);
    arrowEffects[0] = LastCreatedEntity();
    CreateBeamEffect(FilteredArray(AllPlayers(), arrowAnimation <= 1), BeamType.GoodBeam, ArrowNodeBase(arrowAnimation, -1), ArrowNodeTip(arrowAnimation, -1), Color.Green);
    arrowEffects[1] = LastCreatedEntity();

    CreateBeamEffect(FilteredArray(AllPlayers(), arrowAnimation2 <= 1), BeamType.GoodBeam, ArrowNodeBase(arrowAnimation2, 1), ArrowNodeTip(arrowAnimation2, 1), Color.Green);
    arrowEffects[2] = LastCreatedEntity();
    CreateBeamEffect(FilteredArray(AllPlayers(), arrowAnimation2 <= 1), BeamType.GoodBeam, ArrowNodeBase(arrowAnimation2, -1), ArrowNodeTip(arrowAnimation2, -1), Color.Green);
    arrowEffects[3] = LastCreatedEntity();
}

rule: "Player: Destroy Shield Arrow"
Event.OngoingPlayer
if (!isRamp(EventPlayer()))
{
    StopChasingVariable(arrowAnimation);
    DestroyEffect(arrowEffects[0]);
    DestroyEffect(arrowEffects[1]);
    DestroyEffect(arrowEffects[2]);
    DestroyEffect(arrowEffects[3]);
}

define ArrowNodeBase(define f, define x): Local(EyePosition(), FacingDirectionOf(), 0.75, Min(f, 0.2) * 5 * x, Min(Max(f - 0.2, 0), 1) * 5 - 2.25);
define ArrowNodeTip(define f, define x): Local(EyePosition(), FacingDirectionOf(), 0.75, Min(Max(f - 0.8, 0), 0.2) * 5 * x, Min(f, 0.8) * 5 - 2.25);

define Local(Vector pos, Vector dir, define forward, define right, define up): pos
    + dir * forward
    + Normalize(dir.CrossProduct(Up())) * right
    + -Normalize(dir.CrossProduct(CrossProduct(dir, Up()))) * up;

rule: "Reset arrow"
Event.OngoingPlayer
if (arrowAnimation == arrowDestination)
{
    arrowAnimation = 0;
}
rule: "Reset arrow 2"
Event.OngoingPlayer
if (arrowAnimation2 == arrowDestination)
{
    arrowAnimation2 = 0;
}

rule: "Player: Start braking"
Event.OngoingPlayer
Player.Reinhardt
if (IsUsingAbility1())
if (IsButtonHeld(EventPlayer(), Button.Crouch))
if (IsOnGround())
{
    StartAccelerating(EventPlayer(), Backward(), 750, 90, Relative.ToPlayer);
    PlayEffect(AllPlayers(), PlayEffect.BadExplosion, Color.White, PositionOf(), 0.5);
    PlayEffect(EventPlayer(), PlayEffect.DebuffImpactSound, Color.White, EyePosition(), 100);
    Wait(0.8);
    CancelPrimaryAction(EventPlayer());
    StopAccelerating(EventPlayer());
}

define chargingPlayer(define player):
    FirstOf(
        FilteredArray(
            AllPlayers(),
            HasStatus(ArrayElement(), Status.Stunned) && DistanceBetween(ArrayElement(), player) < 3
        )
    );

playervar define knockedFrom = null;
playervar define force;
playervar define heightOffset;

rule: "Player: Knocked from"
Event.OngoingPlayer
if (knockedFrom != null)
if (!isWorkingDummy)
{
    ApplyImpulse(EventPlayer(), DirectionTowards(knockedFrom, PositionOf() + Vector(0, heightOffset, 0)), force, Relative.ToWorld, ContraryMotion.Incorporate);
    knockedFrom = null;
}

// disabled rule: "Ability: Throw ball"
// Event.OngoingPlayer
// Player.Reinhardt
// if (ball)
// if (IsButtonHeld(EventPlayer(), Button.Jump))
// if (DistanceBetween(EventPlayer(), rootBall) < 3)
// if (IsOnGround(rootBall))
// {
//     define a ! = [ball1,ball2];
//     ApplyImpulse(a, Up(), 15, Relative.ToWorld, ContraryMotion.Cancel);
// }

playervar define inputEnabled ! = true;

rule: "Disable Input"
Event.OngoingPlayer
if (!inputEnabled)
if (!isWorkingDummy)
{
    StartThrottleInDirection(EventPlayer(), Vector(), 0, Relative.ToWorld, ThrottleBehavior.ReplaceExistingThrottle);
    DisallowButton(EventPlayer(), Button.Ability1);
    DisallowButton(EventPlayer(), Button.Ability2);
    DisallowButton(EventPlayer(), Button.Crouch);
    DisallowButton(EventPlayer(), Button.Interact);
    DisallowButton(EventPlayer(), Button.Jump);
    DisallowButton(EventPlayer(), Button.Ultimate);
}

rule: "Enable Input"
Event.OngoingPlayer
if (inputEnabled)
if (!isWorkingDummy)
{
    StopThrottleInDirection(EventPlayer());
    AllowButton(EventPlayer(), Button.Ability1);
    AllowButton(EventPlayer(), Button.Ability2);
    AllowButton(EventPlayer(), Button.Crouch);
    AllowButton(EventPlayer(), Button.Interact);
    AllowButton(EventPlayer(), Button.Jump);
    AllowButton(EventPlayer(), Button.Ultimate);
}

playervar define healOverTime;
globalvar define healWait = 10;
globalvar define healRate = 100;

rule: "Heal"
Event.OnDamageTaken
Player.Reinhardt
{
    StopHealOverTime(healOverTime);
    Wait(healWait, WaitBehavior.RestartWhenTrue);
    StartHealOverTime(EventPlayer(), null, 9999, healRate);
    healOverTime = LastHealOverTime();
}

rule: "Ultimate"
Event.OngoingPlayer
Player.Reinhardt
if (!PowerHammerMode.Value)
if (IsButtonHeld(EventPlayer(), Button.Ultimate))
if (!IsUsingAbility1())
if (!IsUsingAbility2())
if (!isUsingPowerHammer)
{
    SlamImpulse();
    isUsingPowerHammer = true;
}

rule: "Power Hammer"
Event.OngoingPlayer
Player.Reinhardt
if (PowerHammerMode.Value)
if (IsButtonHeld(EventPlayer(), Button.PrimaryFire))
if (!IsFiringSecondary())
if (!IsUsingAbility1())
if (!IsUsingAbility2())
if (!isUsingPowerHammer)
{
    SetUltimateCharge(EventPlayer(), 100);
    PressButton(EventPlayer(), Button.Ultimate);
    SlamImpulse();
    isUsingPowerHammer = true;
}

void SlamImpulse()
{
    ApplyImpulse(EventPlayer(), Up(), IsInAir() ? 5 : 8, Relative.ToWorld, ContraryMotion.Incorporate);
}

rule: "Reset Power Hammer"
Event.OngoingPlayer
Player.Reinhardt
if (isUsingPowerHammer)
if (IsOnGround())
{
    Wait(0.25, WaitBehavior.AbortWhenFalse);
    UltimateHandler();
    Wait(0.20);
    isUsingPowerHammer = false;
}

playervar define isUsingPowerHammer! = false;

void UltimateHandler() "Reinhardt Ultimate Handler"
{
    define hitPos = PositionOf() + DirectionFromAngles(HorizontalFacingAngleOf(), 0) * 2.75;

    define affectPlayers = FilteredArray(AllPlayers(OppositeTeamOf(TeamOf(EventPlayer()))), !ArrayElement().isWorkingDummy);
    foreach (define dmg in affectPlayers)
    {
        define damage = 300 * Min(-DistanceBetween(dmg, hitPos) + 3.5, 1);
        Damage(dmg, EventPlayer(), damage);
    }

    ModifyVariable(affectPlayers, Operation.AppendToArray, [ball1, ball2]);
    foreach (define dmg in affectPlayers)
    {
        define impulse = (dmg.isBall ? 70 : 50) * Min(-DistanceBetween(dmg, hitPos) + 4, 1);
        define direction = DirectionTowards(hitPos * Vector(1,0,1), PositionOf(dmg) * Vector(1,0,1)) + Vector(0,0.25,0);
        if (impulse > 0)
        {
            ApplyImpulse(dmg, direction, impulse, Relative.ToWorld, ContraryMotion.Cancel);
            if (rootBall == dmg)
            {
                thrower = EventPlayer();
                throwType = 4;
            }
        }
    }
}

playervar define fireStrikeDirection!;

rule: "Fire strike direction"
Player.Reinhardt
if (IsUsingAbility2())
{
    Wait(0.48);
    fireStrikeDirection = FacingDirectionOf();
    Wait(0.64);
    SetAbilityCooldown(EventPlayer(), ButtonValue(Button.Ability2), FireStrikeCooldownTime.Value);
}