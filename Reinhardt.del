import "Lava.del";

playervar define chargeStart = null;

globalvar define defaultMoveSpeed ! = 150;

rule: "Player: Setup"
Event.OngoingPlayer
Player.Reinhardt
{
    SetMoveSpeed(EventPlayer(), defaultMoveSpeed);
    DisallowButton(EventPlayer(), Button.Ultimate);
}

rule: "Player: Charge Speed Boost"
Event.OngoingPlayer
Player.Reinhardt
if (IsUsingAbility1())
{
    chargeStart = TotalTimeElapsed();
    SetMoveSpeed(EventPlayer(), 200);
}

rule: "Player: Charge Speed Boost Revert"
Event.OngoingPlayer
Player.Reinhardt
if (!IsUsingAbility1())
{
    SetMoveSpeed(EventPlayer(), defaultMoveSpeed);
}

rule: "Player: Hit pole"
Event.OngoingPlayer
Player.Reinhardt
if (!IsUsingAbility1())
if (IsAlive())
if (TotalTimeElapsed() - chargeStart <= 4)
if (DistanceBetween(EventPlayer(), PolePos()) < 3)
{
    chargeStart = 0;
    SmallMessage(EventPlayer(), "KA-DONG!");
    PlayEffect(AllPlayers(), PlayEffect.RingExplosionSound, Color.White, PolePos(), 200);
    PlayEffect(AllPlayers(), PlayEffect.RingExplosion, Color.SkyBlue, PolePos(), 50);

    // Apply momentum to the player who hit the pole
    ApplyImpulse(EventPlayer(), DirectionTowards(PolePos(), PositionOf() + Vector(0, 0.5, 0)), 30, Relative.ToWorld, ContraryMotion.Cancel);

    // Apply momentum to the ball
    if (ballIsOnStand)
    {
        ApplyImpulse(ball1, DirectionTowards(EventPlayer(), PolePos() + Vector(0, 0.5, 0)), 30, Relative.ToWorld, ContraryMotion.Cancel);
        ApplyImpulse(ball2, DirectionTowards(EventPlayer(), PolePos() + Vector(0, 0.5, 0)), 30, Relative.ToWorld, ContraryMotion.Cancel);
        OffStand();
    }
}

define shieldIsOut(define player): IsButtonHeld(player, Button.SecondaryFire)
    && !HasStatus(player, Status.Stunned)
    && !IsUsingAbility1(player)
    && !IsUsingAbility2(player)
    && HeroOf(player) == Hero.Reinhardt;

define isRamp(define player): shieldIsOut(player) && VerticalFacingAngleOf(player) < -40;

rule: "Player: Shield Surf"
Event.OngoingPlayer
Player.Reinhardt
if (IsUsingAbility1())
if (IsTrueForAny(
        AllPlayers(),
        isRamp(ArrayElement())
        && ArrayElement() != EventPlayer()
        && DistanceBetween(EventPlayer(), ArrayElement()) <= 5
        && IsInViewAngle(ArrayElement(), PositionOf(EventPlayer()), 100)
    ))
{
    SmallMessage(EventPlayer(), "Stylish!");
    Teleport(EventPlayer(), PositionOf(EventPlayer()) + Vector(0, 2, 0));
    ApplyImpulse(EventPlayer(), Up(), 15, Relative.ToWorld, ContraryMotion.Incorporate);
}

rule: "Player: Shield and brake HUD"
{
    CreateHudText(
        VisibleTo  : FilteredArray(PlayersOnHero(Hero.Reinhardt), shieldIsOut(ArrayElement()) && VerticalFacingAngleOf(ArrayElement()) > -40),
        Header     : IconString(Icon.ArrowUp),
        HeaderColor: Color.Orange,
        Text       : "Look up to become a ramp!",
        TextColor  : Color.Yellow,
        Location   : Location.Top,
        SortOrder  : 3,
        Spectators : Spectators.VisibleNever
    );
    CreateHudText(
        VisibleTo  : FilteredArray(PlayersOnHero(Hero.Reinhardt), shieldIsOut(ArrayElement()) && VerticalFacingAngleOf(ArrayElement()) <= -40),
        Header     : IconString(Icon.Moon),
        HeaderColor: Color.Aqua,
        Text       : "You are now a ramp.",
        TextColor  : Color.Yellow,
        Location   : Location.Top,
        SortOrder  : 3,
        Spectators : Spectators.VisibleNever
    );
    CreateHudText(
        VisibleTo  : FilteredArray(PlayersOnHero(Hero.Reinhardt), IsUsingAbility1(ArrayElement()) && IsOnGround(ArrayElement())),
        Header     : IconString(Icon.ArrowDown),
        HeaderColor: Color.Orange,
        Text       : "Crouch to brake!",
        TextColor  : Color.Yellow,
        Location   : Location.Top,
        SortOrder  : 4,
        Spectators : Spectators.VisibleNever
    );
}

playervar define arrowAnimation = 0;
playervar define arrowAnimation2 = 0;
playervar define arrowEffects;
define arrowDestination: 1.6;

rule: "Player: Shield Arrow"
Event.OngoingPlayer
Player.Reinhardt
if (isRamp(EventPlayer()))
{
    arrowAnimation = 0;
    arrowAnimation2 = 0.8;
    ChaseVariableAtRate(arrowAnimation, arrowDestination, 0.6, RateChaseReevaluation.None);
    ChaseVariableAtRate(arrowAnimation2, arrowDestination, 0.6, RateChaseReevaluation.None);

    CreateBeamEffect(FilteredArray(AllPlayers(), arrowAnimation <= 1), BeamType.GoodBeam, ArrowNodeBase(arrowAnimation, 1), ArrowNodeTip(arrowAnimation, 1), Color.Green);
    arrowEffects[0] = LastCreatedEntity();
    CreateBeamEffect(FilteredArray(AllPlayers(), arrowAnimation <= 1), BeamType.GoodBeam, ArrowNodeBase(arrowAnimation, -1), ArrowNodeTip(arrowAnimation, -1), Color.Green);
    arrowEffects[1] = LastCreatedEntity();

    CreateBeamEffect(FilteredArray(AllPlayers(), arrowAnimation2 <= 1), BeamType.GoodBeam, ArrowNodeBase(arrowAnimation2, 1), ArrowNodeTip(arrowAnimation2, 1), Color.Green);
    arrowEffects[2] = LastCreatedEntity();
    CreateBeamEffect(FilteredArray(AllPlayers(), arrowAnimation2 <= 1), BeamType.GoodBeam, ArrowNodeBase(arrowAnimation2, -1), ArrowNodeTip(arrowAnimation2, -1), Color.Green);
    arrowEffects[3] = LastCreatedEntity();
}

rule: "Player: Destroy Shield Arrow"
Event.OngoingPlayer
if (!isRamp(EventPlayer()))
{
    StopChasingVariable(arrowAnimation);
    DestroyEffect(arrowEffects[0]);
    DestroyEffect(arrowEffects[1]);
    DestroyEffect(arrowEffects[2]);
    DestroyEffect(arrowEffects[3]);
}

define ArrowNodeBase(define f, define x): Local(EyePosition(), FacingDirectionOf(), 0.75, Min(f, 0.2) * 5 * x, Min(Max(f - 0.2, 0), 1) * 5 - 2.25);
define ArrowNodeTip(define f, define x): Local(EyePosition(), FacingDirectionOf(), 0.75, Min(Max(f - 0.8, 0), 0.2) * 5 * x, Min(f, 0.8) * 5 - 2.25);

define Local(Vector pos, Vector dir, define forward, define right, define up): pos
    + dir * forward
    + Normalize(dir.CrossProduct(Up())) * right
    + -Normalize(dir.CrossProduct(CrossProduct(dir, Up()))) * up;

rule: "Reset arrow"
Event.OngoingPlayer
if (arrowAnimation == arrowDestination)
{
    arrowAnimation = 0;
}
rule: "Reset arrow 2"
Event.OngoingPlayer
if (arrowAnimation2 == arrowDestination)
{
    arrowAnimation2 = 0;
}

rule: "Player: Start braking"
Event.OngoingPlayer
Player.Reinhardt
if (IsUsingAbility1())
if (IsButtonHeld(EventPlayer(), Button.Crouch))
if (IsOnGround())
{
    StartAccelerating(EventPlayer(), Backward(), 750, 90, Relative.ToPlayer);
    PlayEffect(AllPlayers(), PlayEffect.BadExplosion, Color.White, PositionOf(), 0.5);
    PlayEffect(EventPlayer(), PlayEffect.DebuffImpactSound, Color.White, EyePosition(), 100);
    Wait(0.8);
    CancelPrimaryAction(EventPlayer());
    StopAccelerating(EventPlayer());
}

define chargingPlayer(define player):
    FirstOf(
        FilteredArray(
            AllPlayers(),
            HasStatus(ArrayElement(), Status.Stunned) && DistanceBetween(ArrayElement(), player) < 3
        )
    );

playervar define knockedFrom = null;
playervar define force;
playervar define heightOffset;

rule: "Player: Knocked from"
Event.OngoingPlayer
if (knockedFrom != null)
if (!isWorkingDummy)
{
    ApplyImpulse(EventPlayer(), DirectionTowards(knockedFrom, PositionOf() + Vector(0, heightOffset, 0)), force, Relative.ToWorld, ContraryMotion.Incorporate);
    knockedFrom = null;
}

/*
globalvar define FloorPoint = Vector(0, 154.88, 0);
globalvar define FloorNormal = Vector(0, 1, 0);

playervar define usingWallAbility ! = false;
playervar define wallMarker ! = false;
playervar define wallBuilder ! = null;

// Wall Powerup
rule: "Ability: Wall: Marker"
Event.OngoingPlayer
Player.Reinhardt
if (IsButtonHeld(EventPlayer(), Button.Interact))
// if (UltimateChargePercent() == 100)
if (!usingWallAbility)
{
    // DestroyEffect(wallMarker);
    CreateEffect(
        EventPlayer(),
        Effect.LightShaft,
        Color.SkyBlue,
        LineIntersectingPlane(EyePosition(), FacingDirectionOf(), FloorNormal, FloorPoint),
        0.75
    );
    wallMarker = LastCreatedEntity();
    usingWallAbility = true;
}

rule: "Ability: Wall: Input"
Event.OngoingPlayer
Player.Reinhardt
if (!IsButtonHeld(EventPlayer(), Button.Interact))
if (usingWallAbility)
{
    // Create the Mei dummy bot
    CreateDummyBot(
        Hero.Mei,
        TeamWithAvailableSlots(TeamOf()),
        -1,
        LineIntersectingPlane(EyePosition(), FacingDirectionOf(), FloorNormal, FloorPoint) + Vector(0, 10, 0),
        Vector()
    );
    wallBuilder = LastCreatedEntity(); // Store the dummy bot as a variable.
    wallBuilder.isWorkingDummy = true; // Make the dummy bot as a working dummy so other systems don't interact with it.
    SetInvisible(wallBuilder, InvisibleTo.All); // Make the dummy invisible.
    MinWait(); // Wait for the game to process.
    SetFacing(wallBuilder, DirectionFromAngles(HorizontalFacingAngleOf(), 89), Relative.ToWorld); // Force the mei to face the ground in the same direction as the event player.
    PressButton(wallBuilder, Button.Ability2); // Use wall.
    PressButton(wallBuilder, Button.PrimaryFire); // Place wall.
    DestroyEffect(wallMarker);
    Wait(0.05); // Wait for the game to process.
    Teleport(wallBuilder, ObjectivePosition(0)); // Teleport the mei away.
    Wait(5, WaitBehavior.AbortWhenFalse); // Wait for the wall.
    DestroyDummyBot(TeamOf(wallBuilder), SlotOf(wallBuilder)); // Destroy the mei.
    wallBuilder = null;
    usingWallAbility = false;
}

rule: "Ability: Wall: Destroy"
Event.OngoingPlayer
Player.Reinhardt
if (IsButtonHeld(EventPlayer(), Button.Interact))
if (usingWallAbility)
if (wallBuilder != null)
{
    DestroyDummyBot(TeamOf(wallBuilder), SlotOf(wallBuilder)); // Destroy the mei.
    wallBuilder = null;
    usingWallAbility = false;
}

define LineIntersectingPlane(define pos, define dir, define planeNormal, define planePos):
    pos + Normalize(dir) * ((DotProduct(planeNormal, planePos) - DotProduct(planeNormal, pos)) / DotProduct(planeNormal, Normalize(dir)));
define TeamWithAvailableSlots(define preferTeam): NumberOfPlayers(preferTeam) < 6 ? preferTeam : OppositeTeamOf(preferTeam);
*/

// rule: "Ability: Ball Shield"
// Event.OngoingPlayer
// Player.Reinhardt
// if (ball)
// if (IsButtonHeld(EventPlayer(), Button.SecondaryFire))
// if (IsInAir(rootBall))
// if (DistanceBetween(EyePosition(), rootBall) < 3)
// if (IsInViewAngle(EventPlayer(), PositionOf(rootBall), 50))
// {
//     define a ! = [ball1,ball2];
//     ApplyImpulse(a, FacingDirectionOf(), 20, Relative.ToWorld, ContraryMotion.Cancel);
// }

// rule: "Ability: Throw ball"
// Event.OngoingPlayer
// Player.Reinhardt
// if (ball)
// if (IsButtonHeld(EventPlayer(), Button.Jump))
// if (DistanceBetween(EventPlayer(), rootBall) < 3)
// {
//     define a ! = [ball1,ball2];
//     ApplyImpulse(a, Up(), 15, Relative.ToWorld, ContraryMotion.Cancel);
// }

playervar define inputEnabled ! = true;

rule: "Disable Input"
Event.OngoingPlayer
if (!inputEnabled)
if (!isWorkingDummy)
{
    StartThrottleInDirection(EventPlayer(), Vector(), 0, Relative.ToWorld, ThrottleBehavior.ReplaceExistingThrottle);
    DisallowButton(EventPlayer(), Button.Ability1);
    DisallowButton(EventPlayer(), Button.Ability2);
    DisallowButton(EventPlayer(), Button.Crouch);
    DisallowButton(EventPlayer(), Button.Interact);
    DisallowButton(EventPlayer(), Button.Jump);
    DisallowButton(EventPlayer(), Button.Ultimate);
}

rule: "Enable Input"
Event.OngoingPlayer
if (inputEnabled)
if (!isWorkingDummy)
{
    StopThrottleInDirection(EventPlayer());
    AllowButton(EventPlayer(), Button.Ability1);
    AllowButton(EventPlayer(), Button.Ability2);
    AllowButton(EventPlayer(), Button.Crouch);
    AllowButton(EventPlayer(), Button.Interact);
    AllowButton(EventPlayer(), Button.Jump);
    AllowButton(EventPlayer(), Button.Ultimate);
}

playervar define healOverTime;

rule: "Heal"
Event.OnDamageTaken
Player.Reinhardt
{
    StopHealOverTime(healOverTime);
    Wait(10, WaitBehavior.RestartWhenTrue);
    StartHealOverTime(EventPlayer(), null, 9999, 100);
    healOverTime = LastHealOverTime();
}

playervar define fireStrikeDirection!;

rule: "Fire strike direction"
Player.Reinhardt
if (IsUsingAbility2())
{
    fireStrikeDirection = FacingDirectionOf();
}