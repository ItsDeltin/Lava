import "Lava.del";
import "Ball.del";

define playervar chargeStart = null;

macro defaultMoveSpeed(): 150;

rule: "Setup"
Event.OngoingPlayer
Player.Reinhardt
{
    SetMoveSpeed(EventPlayer(), defaultMoveSpeed());
}

rule: "Charge Speed Boost"
Event.OngoingPlayer
Player.Reinhardt
if (IsUsingAbility1())
{
    chargeStart = TotalTimeElapsed();
    SetMoveSpeed(EventPlayer(), 200);
}

rule: "Charge Speed Boost Revert"
Event.OngoingPlayer
Player.Reinhardt
if (!IsUsingAbility1())
{
    SetMoveSpeed(EventPlayer(), defaultMoveSpeed());
}

rule: "Hit pole"
Event.OngoingPlayer
Player.Reinhardt
if (!IsUsingAbility1())
if (TotalTimeElapsed() - chargeStart <= 4)
if (DistanceBetween(EventPlayer(), PolePos()) < 3)
{
    chargeStart = 0;
    SmallMessage(EventPlayer(), "KA-DONG!");
    PlayEffect(AllPlayers(), PlayEffect.RingExplosionSound, Color.White, PolePos(), 200);
    PlayEffect(AllPlayers(), PlayEffect.RingExplosion, Color.SkyBlue, PolePos(), 50);

    // Apply momentum to the player who hit the pole
    ApplyImpulse(EventPlayer(), DirectionTowards(PolePos(), PositionOf() + Vector(0, 0.5, 0)), 30, Relative.ToWorld, ContraryMotion.Cancel);

    // Apply momentum to the ball
    if (ballIsOnStand)
    {
        ApplyImpulse(ball1, DirectionTowards(EventPlayer(), PolePos() + Vector(0, 0.5, 0)), 30, Relative.ToWorld, ContraryMotion.Cancel);
        ApplyImpulse(ball2, DirectionTowards(EventPlayer(), PolePos() + Vector(0, 0.5, 0)), 30, Relative.ToWorld, ContraryMotion.Cancel);
        ballIsOnStand = false;
    }
}

rule: "Shield Surf"
Event.OngoingPlayer
Player.Reinhardt
if (IsUsingAbility1())
if (IsTrueForAny(
        AllPlayers(),
        IsButtonHeld(ArrayElement(), Button.SecondaryFire)
        && HeroOf(ArrayElement()) == Hero.Reinhardt
        && VerticalFacingAngleOf(ArrayElement()) < -40
        && DistanceBetween(EventPlayer(), ArrayElement()) <= 5
        && IsInViewAngle(ArrayElement(), PositionOf(EventPlayer()), 100)
    ))
{
    SmallMessage(EventPlayer(), "Stylish!");
    Teleport(EventPlayer(), PositionOf(EventPlayer()) + Vector(0, 2, 0));
    ApplyImpulse(EventPlayer(), Up(), 15, Relative.ToWorld, ContraryMotion.Incorporate);
}

rule: "Start breaking"
Event.OngoingPlayer
Player.Reinhardt
if (IsUsingAbility1())
if (IsButtonHeld(EventPlayer(), Button.Crouch))
if (IsOnGround())
{
    StartAccelerating(EventPlayer(), Backward(), 750, 90, Relative.ToPlayer);
    PlayEffect(AllPlayers(), PlayEffect.BadExplosion, Color.White, PositionOf(), 0.5);
    PlayEffect(EventPlayer(), PlayEffect.DebuffImpactSound, Color.White, EyePosition(), 100);
    Wait(0.8);
    SetStatus(EventPlayer(), null, Status.Frozen, 0.04);
    StopAccelerating(EventPlayer());
}

macro chargingPlayer(define player):
    FirstOf(
        FilteredArray(
            AllPlayers(),
            HasStatus(ArrayElement(), Status.Stunned) && DistanceBetween(ArrayElement(), player) < 3
        )
    );

define playervar knockedFrom = null;
define playervar force;
define playervar heightOffset;

rule: "Knocked"
Event.OngoingPlayer
if (knockedFrom != null)
if (!isBall)
{
    ApplyImpulse(EventPlayer(), DirectionTowards(knockedFrom, PositionOf() + Vector(0, heightOffset, 0)), force, Relative.ToWorld, ContraryMotion.Incorporate);
    knockedFrom = null;
}

rule: "debug spawn"
Event.OngoingPlayer
if (IsButtonHeld(EventPlayer(), Button.Interact))
{
    CreateDummyBot(Hero.Reinhardt, NumberOfPlayers(Team.Team1) < 6 ? Team.Team1 : Team.Team2, -1, PositionOf(EventPlayer()), Vector());
    // define dummy = LastCreatedEntity();
    // Wait(2);
    // Teleport(dummy, EventPlayer());

    // StartHoldingButton(dummy, Button.SecondaryFire);
    // SetFacing(dummy, DirectionFromAngles(HorizontalFacingAngleOf(), -45));
}