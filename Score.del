import "Ball.del";

globalvar define blueGoalEffect !;
globalvar define redGoalEffect !;

globalvar define blueScore = 0;
globalvar define redScore = 0;
globalvar define totalScore = 0;

define blueGoal(): Vector(123, 165, 150);
define redGoal(): Vector(-123, 165, 150);

rule: "Switch gamemode"
if (totalScore != 0)
if (totalScore % 3 == 0)
{
    if (gamemode == Mode.Volleyball) gamemode = Mode.SoccerCountdown;
    else gamemode = Mode.Volleyball;
}

rule: "Football: Countdown"
if (gamemode == 1)
{
    AllPlayers().inputEnabled = false;

    InitSpawns();

    AllPlayers().doRespawn = true;
    respawnBall();
    for (define i = 5; i > 0; i--)
    {
        SmallMessage(AllPlayers(), i);
        Wait(1);
    }
    BigMessage(AllPlayers(), "Start!");
    AllPlayers().inputEnabled = true;

    gamemode = 2;
}

void InitSpawns()
{
    Heal(AllPlayers(), null, 9999);
    for (define i = 0; i < 5; i++)
    {
        Teleport(PlayersInSlot(i, Team.Team1), Vector(60, 154.88, (150 - 30) + (((150 + 30) - (150 - 30))/5)*i));
        Teleport(PlayersInSlot(i, Team.Team2), Vector(-60, 154.88, (150 - 30) + (((150 + 30) - (150 - 30))/5)*i));
    }
}

rule: "Football: Start/Stop"
if (IsCommunicating(HostPlayer(), Communication.VoiceLineUp))
{
    if (gamemode != 1)
        gamemode = 1;
    else gamemode = 0;
}


globalvar define blueGoalSize;
globalvar define redGoalSize;
define considerBallPos: PositionOf(rootBall);
define goalMod(define goalPos): Max(1 - (DistanceBetween(rootBall, goalPos) / 15), 0) * 10;
Vector nearestPlanePoint(define pointPosition, define planePosition, define planeNormal): pointPosition + (-DotProduct(planeNormal, pointPosition - planePosition) / DotProduct(planeNormal, planeNormal)) * planeNormal;
Vector rightOf(Vector dir): Normalize(dir.CrossProduct(Up()));
Vector upOf(Vector dir): Normalize(dir.CrossProduct(dir.CrossProduct(Up())));
Vector signedDistance(define pointPosition, define planePoint, define planeNormal): DotProduct(planeNormal, (pointPosition - planePoint));
// blue
Vector blueNearest: nearestPlanePoint(considerBallPos, bluePos, blueNormal);
Vector bluePos: Vector(115.69, 156.68, 148.52);
Vector blueNormal: Vector(-0.90, 0.43, 0);
// red
Vector redNearest: nearestPlanePoint(considerBallPos, redPos, redNormal);
Vector redPos: Vector(-115.69, 156.68, 148.52);
Vector redNormal: Vector(0.90, 0.43, 0);

define g_down(define p, define d, define size): p + upOf(d) * size;
define g_right(define p, define d, define size): p - rightOf(d) * size;
define g_up(define p, define d, define size): p - upOf(d) * size;
define g_left(define p, define d, define size): p + rightOf(d) * size;

define MakeBeam(Color color, ref define s, ref define e)
{
    CreateBeamEffect(AllPlayers(), BeamType.GoodBeam, s, e, color, EffectRev.VisibleToPositionAndRadius);
    return LastCreatedEntity();
}

void MakeBeams(Color color, ref define nearest, ref define normal, ref define size)
{
    MakeBeam(color, g_up(nearest, normal, size), g_right(nearest, normal, size));
    MakeBeam(color, g_right(nearest, normal, size), g_down(nearest, normal, size));
    MakeBeam(color, g_down(nearest, normal, size), g_left(nearest, normal, size));
    MakeBeam(color, g_left(nearest, normal, size), g_up(nearest, normal, size));
}

void ChaseGoalEffects() "Chase Goal Effects"
{
    blueGoalSize = 0;
    redGoalSize = 0;
    ChaseVariableAtRate(blueGoalSize, goalMod(blueNearest), 10, RateChaseReevaluation.DestinationAndRate);
    ChaseVariableAtRate(redGoalSize, goalMod(redNearest), 10, RateChaseReevaluation.DestinationAndRate);
}

rule: "Football: Spawn goals"
if (gamemode == Mode.SoccerCountdown || gamemode == Mode.Soccer)
{
    ChaseGoalEffects();
    MakeBeams(Color.Team1, blueNearest, blueNormal, blueGoalSize);
    MakeBeams(Color.Team2, redNearest, redNormal, redGoalSize);

    // CreateEffect(AllPlayers(), Effect.Orb, Color.Yellow, blueNearest, 0.5, EffectRev.VisibleToPositionAndRadius); // For debugging
    // CreateEffect(AllPlayers(), Effect.Orb, Color.Yellow, redNearest, 0.5, EffectRev.VisibleToPositionAndRadius); // For debugging
}

rule: "Football: Destroy goals"
if (gamemode != Mode.SoccerCountdown)
if (gamemode != Mode.Soccer)
{
    DestroyEffect(blueGoalEffect);
    DestroyEffect(redGoalEffect);
}

rule: "Football: Blue score"
if (ballReady)
if (gamemode == Mode.Soccer)
if (signedDistance(considerBallPos, redPos, redNormal) < 0)
{
    PlayEffect(AllPlayers(Team.Team1), PlayEffect.BuffExplosionSound, Color.White, blueGoal(), 1000);
    PlayEffect(AllPlayers(Team.Team2), PlayEffect.DebuffImpactSound, Color.White, blueGoal(), 1000);

    blueScore++;
    totalScore++;

    ChaseVariableOverTime(redGoalSize, 0, 0.35, TimeChaseReevaluation.None);
    Wait(0.35);
    PlayEffect(AllPlayers(), PlayEffect.RingExplosion, Color.Team2, blueNearest, 100);

    messageThrower(Team.Team1);

    Wait(5);
    ChaseGoalEffects();
}

rule: "Football: Red score"
if (ballReady)
if (gamemode == Mode.Soccer)
if (signedDistance(considerBallPos, bluePos, blueNormal) < 0)
{
    PlayEffect(AllPlayers(Team.Team2), PlayEffect.BuffExplosionSound, Color.White, blueGoal(), 1000);
    PlayEffect(AllPlayers(Team.Team1), PlayEffect.DebuffImpactSound, Color.White, blueGoal(), 1000);

    redScore++;
    totalScore++;

    ChaseVariableOverTime(blueGoalSize, 0, 0.35, TimeChaseReevaluation.None);
    Wait(0.35);
    PlayEffect(AllPlayers(), PlayEffect.RingExplosion, Color.Team2, redNearest, 100);

    messageThrower(Team.Team2);

    Wait(5);
    ChaseGoalEffects();
}

void messageThrower(define team)
{
    if (TeamOf(thrower) != team)
    {
        BigMessage(AllPlayers(), <"Wrong goal, <0>!", thrower>);
    }
    else if (throwType == 0)
    {
        BigMessage(AllPlayers(), <"<0> scored a hammer shot!", thrower>);
    }
    else if (throwType == 1)
    {
        BigMessage(AllPlayers(), <"<0> scored a bump shot!", thrower>);
    }
    else if (throwType == 2)
    {
        BigMessage(AllPlayers(), <"<0> scored a charge shot!", thrower>);
    }
}