import "Lava.del";

globalvar define hostMenuOpened! = false;
globalvar define hostMenuHuds!;
globalvar define currentMenuHuds!;
globalvar define hostMenuCategory = 0;
globalvar define hostMenuSelected = 0;

globalvar BooleanOption FootballEnabled = new BooleanOption("Football Enabled", true);
globalvar BooleanOption VolleyballEnabled = new BooleanOption("Volleyball Enabled", true);
globalvar BooleanOption DodgeballEnabled = new BooleanOption("Dodgeball Enabled", true);
globalvar SelectOption PointSwitch = new SelectOption("Switch gamemode when number of points is reached", ["Off", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10"], 5);

globalvar HostMenuOption[][] options = [
    [
        new ArenaTypeOption(),
        new ArenaColorOption()
    ],
    [
        new ActionButton("Switch To Football", 0),
        new ActionButton("Switch To Volleyball", 1),
        new ActionButton("Switch To Dodgeball", 2)
    ],
    [
        PointSwitch,
        FootballEnabled,
        VolleyballEnabled,
        DodgeballEnabled
    ],
    [
        new NumberOption("Move Speed", 0, 1000, 150, 20, 1),
        new NumberOption("Charge Speed", 0, 1000, 200, 20, 2),
        new NumberOption("Fire strike speed", 0, 1000, 100, 20, 3)
    ]
];

rule: "Host Menu: Toggle Host Menu"
if (IsButtonHeld(HostPlayer(), Button.Interact))
{
    if (!hostMenuOpened)
    {
        MakeHostHud(text: " \n\n\n\n\n\n", sortOrder: 5);
        MakeHostHud(subheader: "Host Settings", sortOrder: 6);
        MakeHostHud(text: <"<1> <0> <2>", ["Arena", "Sports", "Cycle", "Player"][hostMenuCategory], hostMenuSelected == 0 ? "◀" : "", hostMenuSelected == 0 ? "▶" : "">, sortOrder: 7);
        RenderOptions();
    }
    else
    {
        foreach (define hud in hostMenuHuds) DestroyHudText(hud);
        foreach (define hud in currentMenuHuds) DestroyHudText(hud);
        currentMenuHuds = [];
        hostMenuHuds = [];
    }

    hostMenuOpened = !hostMenuOpened;
}

void RenderOptions() "Host Menu: Render Options"
{
    foreach (define hud in currentMenuHuds) DestroyHudText(hud);
    currentMenuHuds = [];

    for (define i = 0; i < options[hostMenuCategory].Length; i++)
    {
        CreateHudText(HostPlayer(), Text:options[hostMenuCategory][i].RenderedLine(i == hostMenuSelected - 1), TextColor: Color.SkyBlue, SortOrder: i + 8, Location: Location.Top, Reevaluation: HudTextRev.VisibleTo);
        ModifyVariable(currentMenuHuds, Operation.AppendToArray, LastTextID());
        MinWait();
    }
}

void MakeHostHud(ref define visibleTo = HostPlayer(), ref define text = null, ref define subheader = null, ref define sortOrder = 0)
{
    CreateHudText(HostPlayer(), Text:text, Subheader: subheader, Location: Location.Top, SortOrder: sortOrder);
    ModifyVariable(hostMenuHuds, Operation.AppendToArray, LastTextID());
}

rule: "Host Menu: Previous Option"
if (hostMenuOpened)
if (ThrottleOf(HostPlayer()).Z > 0)
{
    hostMenuSelected--;
    if (hostMenuSelected < 0) hostMenuSelected = options[hostMenuCategory].Length;
    RenderOptions();
}

rule: "Host Menu: Next Option"
if (hostMenuOpened)
if (ThrottleOf(HostPlayer()).Z < 0)
{
    hostMenuSelected++;
    if (hostMenuSelected > options[hostMenuCategory].Length) hostMenuSelected = 0;
    RenderOptions();
}

rule: "Host Menu: Select Previous"
if (hostMenuOpened)
if (ThrottleOf(HostPlayer()).X > 0)
{
    if (hostMenuSelected == 0)
    {
        hostMenuCategory--;
        if (hostMenuCategory < 0)
            hostMenuCategory = options.Length - 1;
        RenderOptions();
    }
    else
        options[hostMenuCategory][hostMenuSelected - 1].OnLeft();
}

rule: "Host Menu: Select Next"
if (hostMenuOpened)
if (ThrottleOf(HostPlayer()).X < 0)
{
    if (hostMenuSelected == 0)
    {
        hostMenuCategory++;
        if (hostMenuCategory >= options.Length)
            hostMenuCategory = 0;
        RenderOptions();
    }
    else
        options[hostMenuCategory][hostMenuSelected - 1].OnRight();
}

rule: "Host Menu: Press"
if (hostMenuOpened)
if (IsButtonHeld(HostPlayer(), Button.Jump))
{
    if (hostMenuSelected > 0)
        options[hostMenuCategory][hostMenuSelected - 1].OnSelect();
}

class HostMenuOption
{
    public define Name;
    public define Value;
    protected virtual define ValueString: Value;
    public virtual define RenderedLine(define selected): selected ? <"• <0>: <1> •", Name, ValueString> : <"<0>: <1>", Name, ValueString>;
    public virtual void OnLeft() {}
    public virtual void OnRight() {}
    public virtual void OnSelect() {}
}
class SelectOption : HostMenuOption
{
    protected define[] Options;
    protected override define ValueString: Options[Value];

    public SelectOption(ref define name, ref define[] options, ref define defaultSelected = 0)
    {
        Name = name;
        Options = options;
        Value = defaultSelected;
    }

    public override void OnLeft()
    {
        Value--;
        if (Value < 0) Value = Options.Length - 1;
        root.RenderOptions();
        Update();
    }

    public override void OnRight()
    {
        Value++;
        if (Value >= Options.Length) Value = 0;
        root.RenderOptions();
        Update();
    }

    protected virtual void Update() "Host Menu: Update Select Option" {}
}
class ArenaTypeOption : SelectOption
{
    public ArenaTypeOption()
    {
        Name = "Arena Type";
        Options = ["Grid", "Minimal"];
    }

    protected override void Update()
    {
        root.arenaType = Value;
        root.MakeFloor();
    }
}
class ArenaColorOption : SelectOption
{
    public ArenaColorOption()
    {
        Name = "Arena Color";
        Options = ["Grapple", "White", "Orange", "Green", "Aqua"];
    }

    protected override void Update()
    {
        root.arenaColor = Value;
        root.MakeFloor();
    }
}
class BooleanOption : HostMenuOption
{
    protected override define ValueString: Value ? "On" : "Off";

    public BooleanOption(ref define name, ref define defaultValue)
    {
        Name = name;
        Value = defaultValue;
    }

    protected override void OnLeft()
    {
        Value = !Value;
        root.RenderOptions();
    }
    protected override void OnRight()
    {
        Value = !Value;
        root.RenderOptions();
    }
    protected override void OnSelect()
    {
        Value = !Value;
        root.RenderOptions();
    }
}
class ActionButton : HostMenuOption
{
    private define Action;

    public ActionButton(ref define name, ref define action)
    {
        Name = name;
        Action = action;
    }

    public override define RenderedLine(define selected): selected ? <"• <0> •", Name> : Name;

    public override void OnSelect()
    {
        if (Action == 0)
        {
            root.gamemode = Mode.Soccer;
            root.SpawnPlayers();
        }
        else if (Action == 1)
        {
            root.gamemode = Mode.Volleyball;
            root.SpawnPlayers();
        }
        else if (Action == 2)
        {
            root.gamemode = Mode.Dodgeball;
            root.SpawnPlayers();
        }
    }
}
class NumberOption : HostMenuOption
{
    private define Min;
    private define Max;
    private define DefaultValue;
    private define Step;
    private define Action;

    public NumberOption(ref define name, ref define min, ref define max, ref define defaultValue, ref define step, ref define action)
    {
        Name = name;
        Min = min;
        Max = max;
        Value = defaultValue;
        DefaultValue = defaultValue;
        Step = step;
        Action = action;
    }

    public override void OnSelect()
    {
        Value = DefaultValue;
        root.RenderOptions();
        Action();
    }

    public override void OnLeft()
    {
        Value = Max(Value - Step, Min);
        root.RenderOptions();
        Action();

        Wait(0.25, WaitBehavior.AbortWhenFalse);
        Loop();
    }

    public override void OnRight()
    {
        Value = Min(Value + Step, Max);
        root.RenderOptions();
        Action();

        Wait(0.25, WaitBehavior.AbortWhenFalse);
        Loop();
    }

    private void Action() "Host Menu: Number Action"
    {
        if (Action == 1)
        {
            root.defaultMoveSpeed = Value;
            SetMoveSpeed(FilteredArray(AllPlayers(), HeroOf(ArrayElement()) == Hero.Reinhardt && !IsUsingAbility1(ArrayElement())), Value);
        }
        else if (Action == 2)
        {
            root.chargeSpeed = Value;
        }
        else if (Action == 3)
        {
            root.fireStrikeSpeed = Value;
            SetProjectileSpeed(FilteredArray(AllPlayers(), HeroOf(ArrayElement()) == Hero.Reinhardt), root.fireStrikeSpeed);
        }
    }
}