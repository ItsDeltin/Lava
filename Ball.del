import "Lava.del";

globalvar define ball1;
globalvar define ball2;
playervar define isBall;
globalvar define ballIsOnStand = true;
globalvar define tpFrom;
globalvar define tpTo;
globalvar define rootBall;

globalvar define thrower = null;
globalvar define throwType = 0;

globalvar define blueScoreText !;
globalvar define redScoreText !;
globalvar define ballEffect !;

globalvar define ball;
globalvar define ballReady;

rule: "Ball: Setup"
if (gamemode == Mode.SoccerCountdown || gamemode == Mode.Soccer || gamemode == Mode.Volleyball)
{
    ball = true;
    // Blue's score text
    CreateHudText(
        VisibleTo      : AllPlayers(Team.Team1),
        Header         : IconString(Icon.Dizzy),
        HeaderColor    : Color.SkyBlue,
        Subheader      : <"Enemy score: <0>", redScore>,
        SubheaderColor : Color.Red,
        Text           : <"Your team's score: <0>", blueScore>,
        TextColor      : Color.SkyBlue,
        Location       : Location.Top,
        SortOrder      : 1,
        Spectators     : Spectators.VisibleAlways
    );
    blueScoreText = LastTextID();

    // Red's score text
    CreateHudText(
        VisibleTo      : AllPlayers(Team.Team2),
        Header         : IconString(Icon.Dizzy),
        HeaderColor    : Color.SkyBlue,
        Subheader      : <"Enemy score: <0>", blueScore>,
        SubheaderColor : Color.Red,
        Text           : <"Your team's score: <0>", redScore>,
        TextColor      : Color.SkyBlue,
        Location       : Location.Top,
        SortOrder      : 1,
        Spectators     : Spectators.VisibleAlways
    );
    redScoreText = LastTextID();

    CreateDummyBot(Hero.Torbjorn, Team.Team1, 5, TopPolePos());
    ball1 = LastCreatedEntity();
    ball1.isBall = true;
    ball1.isWorkingDummy = true;
    rootBall = ball1;

    CreateDummyBot(Hero.Torbjorn, Team.Team2, 5, TopPolePos() + Vector(0, 1, 0));
    ball2 = LastCreatedEntity();
    ball2.isBall = true;
    ball2.isWorkingDummy = true;

    SetStatus(ball1, null, Status.Unkillable, 9999);
    SetStatus(ball2, null, Status.Unkillable, 9999);
    SetInvisible(ball1, InvisibleTo.All);
    SetInvisible(ball2, InvisibleTo.All);

    CreateEffect(AllPlayers(), Effect.Sphere, Color.Turquoise, ballLocation(), 1.25, EffectRev.VisibleToPositionAndRadius);
    ballEffect = LastCreatedEntity();

    ballReady = true;
}

rule: "Ball: Clean up"
if (gamemode != Mode.SoccerCountdown)
if (gamemode != Mode.Soccer)
if (gamemode != Mode.Volleyball)
{
    ball = false;
    ballReady = false;
    DestroyHudText(blueScoreText);
    DestroyHudText(redScoreText);
    DestroyEffect(ballEffect);
    DestroyDummyBot(TeamOf(ball1), SlotOf(ball1));
    DestroyDummyBot(TeamOf(ball2), SlotOf(ball2));
    tpFrom = null;
    tpTo = null;
    rootBall = null;
}

define ballLocation(): tpTo != null ? tpTo + Vector(0, 1, 0) : Midpoint(ball1,ball2) + Vector(0, 0.5, 0);
define ballSpeed(): SpeedOf(rootBall);

rule: "Ball: (High Server Loaâ€‹d) Link"
if (ball)
{
    if (isStunned(ball1))
    {
        tpFrom = ball2;
        tpTo = ball1;
    }
    else if (isStunned(ball2))
    {
        tpFrom = ball1;
        tpTo = ball2;
    }
    else if (IsInAir(ball1) || IsInAir(ball2))
    {
        if (tpTo == null || AbsoluteValue(SpeedOf(ball1) - SpeedOf(ball2)) > 2)
        {
            if (SpeedOf(ball1) >= SpeedOf(ball2))
            {
                tpFrom = ball2;
                tpTo = ball1;
            }
            else
            {
                tpFrom = ball1;
                tpTo = ball2;
            }
        }
    }
    else
    {
        tpFrom = null;
        tpTo = null;
    }

    if (tpTo != null) rootBall = tpTo;

    Teleport(tpFrom, PositionOf(tpTo) + Vector(0, 1 + Max(YOf(VelocityOf(tpTo)) * 0.025, 0), 0));

    Wait(0.1);
    LoopIfConditionIsTrue();
}
define isStunned(define player): HasStatus(player, Status.Stunned);

rule: "Ball: Respawn ball"
if (ball)
if (IsDead(ball1) || IsDead(ball2) || YOf(PositionOf(rootBall)) < 140 || ZOf(PositionOf(rootBall)) > 217)
{
    SmallMessage(AllPlayers(), "Respawning Ball");
    respawnBall();   
}

rule: "Ball: Bounce back ball"
if (ball)
if (!ballIsOnStand)
if (!HasStatus(rootBall, Status.Stunned))
if (ballSpeed() < 1)
if (isOnWall(rootBall))
{
    ApplyImpulse(rootBall, DirectionTowards(PositionOf(rootBall), TopPolePos() + Vector(0, 20, 0)), 15, Relative.ToWorld, ContraryMotion.Cancel);
}

void respawnBall()
{
    ballIsOnStand = true;

    Respawn(ball1);
    Respawn(ball2);

    MinWait();

    Teleport(ball1, TopPolePos());
    Teleport(ball2, TopPolePos() + Vector(0, 1, 0));
}

rule: "Ball: On Ball Hit"
Event.OnDamageTaken
if (isBall)
if (!IsInSpawnRoom(ball1) && !IsInSpawnRoom(ball2))
{
    Heal(EventPlayer(), null, EventDamage());

    // Hammer hit
    if (EventDamage() == 70)
    {
        ApplyImpulse(EventPlayer(), Vector(0, 1, 0), 20, Relative.ToWorld, ContraryMotion.Incorporate);
        thrower = Attacker();
        throwType = 0;
    }
    // Charge bump
    else if (EventDamage() == 45)
    {
        thrower = Attacker();
        throwType = 1;
    }
}

globalvar define fuse;

rule: "Ball: On Fire Strike"
Event.OnDamageTaken
if (isBall)
if (EventDamage() == 95)
{
    fuse = 0;
    ChaseVariableOverTime(fuse, 2, 3, TimeChaseReevaluation.None);

    CreateEffect(AllPlayers(), Effect.BadAura, Color.Orange, ballLocation(), fuse, EffectRev.VisibleToPositionAndRadius);
    define fuseEffect = LastCreatedEntity();
    Wait(3, WaitBehavior.IgnoreCondition);
    DestroyEffect(fuseEffect);

    StopChasingVariable(fuse);

    PlayEffect(AllPlayers(), PlayEffect.GoodExplosion, Color.Orange, ballLocation(), ExplosionRange());
    PlayEffect(AllPlayers(), PlayEffect.ExplosionSound, Color.Orange, ballLocation(), 100);

    define inExplosionRange = FilteredArray(AllPlayers(), DistanceBetween(ArrayElement(), ballLocation()) < ExplosionRange() && !ArrayElement().isBall);

    Damage(inExplosionRange, Attacker(), 200);
    inExplosionRange.knockedFrom = ballLocation();
    inExplosionRange.force = 30;
    inExplosionRange.heightOffset = 1.5;
}
define ExplosionRange(): 10;

rule: "Ball: Getting charged"
Event.OngoingPlayer
if (isBall)
if (HasStatus(EventPlayer(), Status.Stunned))
{
    define closest = 
        FirstOf(FilteredArray(
            AllPlayers(),
            HeroOf(ArrayElement()) == Hero.Reinhardt && DistanceBetween(ArrayElement(), EventPlayer()) < 3 && IsUsingAbility1(ArrayElement())
        ));

    if (closest != null)
    {
        thrower = closest;
        throwType = 2;
    }
}

rule: "Ball: Effect when ball hits ground"
if (ball)
if (IsOnGround(rootBall))
{
    PlayEffect(AllPlayers(), PlayEffect.RingExplosion, Color.Turquoise, PositionOf(rootBall), 5);
}

rule: "Ball: Fast ball effect"
if (ball)
if (!ballIsOnStand)
if (ballSpeed() >= 10 || IsInAir(rootBall))
{
    PlayEffect(FilteredArray(AllPlayers(), DistanceBetween(ArrayElement(), rootBall) > 6), PlayEffect.BadExplosion, Color.Turquoise, ballLocation(), 0.3);
    MinWait();
    LoopIfConditionIsTrue();
}

globalvar define lastCrutchAction ! = 0;

disabled rule: "Ball: Shoot At Team"
if (AbsoluteValue(blueScore - redScore) >= 2)
if (!HasStatus(ball1, Status.Stunned))
if (!HasStatus(ball2, Status.Stunned))
if (!IsInAir(rootBall))
if (TotalTimeElapsed() - lastCrutchAction > 10)
{
    define shootingAtTeam ! = blueScore > redScore ? Team.Team1 : Team.Team2;
    define shootingBall ! = shootingAtTeam == Team.Team1 ? ball2 : ball1;

    // Start the ultimate
    SetUltimateCharge(shootingBall, 100);
    PressButton(shootingBall, Button.Ultimate);
    SetDamageDealt(shootingBall, 300);

    // Fire at closest enemy player for 3 seconds
    StartFacing(
        shootingBall,
        DirectionTowards(EyePosition(shootingBall), EyePosition(FirstOf(SortedArray(
            FilteredArray(AllPlayers(), !ArrayElement().isWorkingDummy && TeamOf(ArrayElement()) == shootingAtTeam),
            DistanceBetween(ArrayElement(), shootingBall)
        )))),
        750,
        Relative.ToWorld,
        FacingRev.DirectionAndTurnRate
    );
    StartHoldingButton(shootingBall, Button.PrimaryFire);
    Wait(3);

    StopHoldingButton(shootingBall);
    SetDamageDealt(shootingBall, 100);
    StopFacing(shootingBall);

    lastCrutchAction = TotalTimeElapsed();
}