import "Lava.del";

define globalvar ball1;
define globalvar ball2;
define globalvar balls;
define playervar isBall;
define globalvar ballIsOnStand = true;
define globalvar status;
define globalvar tpFrom;
define globalvar tpTo;

rule: "Setup balls"
{
    CreateDummyBot(Hero.Torbjorn, Team.Team1, 5, TopPolePos());
    ball1 = LastCreatedEntity();
    ball1.isBall = true;

    CreateDummyBot(Hero.Torbjorn, Team.Team2, 5, TopPolePos() + Vector(0, 1, 0));
    ball2 = LastCreatedEntity();
    ball2.isBall = true;

    balls = [ball1,ball2];
    SetStatus(ball1, null, Status.Unkillable, 9999);
    SetStatus(ball2, null, Status.Unkillable, 9999);
    SetInvisible(ball1, InvisibleTo.All);
    SetInvisible(ball2, InvisibleTo.All);

    CreateEffect(AllPlayers(), Effect.Sphere, Color.Turquoise, ballLocation(), 1.25, EffectRev.VisibleToPositionAndRadius);

    CreateHudText(AllPlayers(), "Priority", null, TeamOf(tpTo), Location.Top);
    CreateHudText(AllPlayers(), "Ball Speed", null, ballSpeed(), Location.Top);
}

macro ballLocation(): tpTo != null ? tpTo + Vector(0, 1, 0) : Midpoint(ball1,ball2) + Vector(0, 0.5, 0);
macro ballSpeed(): Max(SpeedOf(ball1), SpeedOf(ball2));

rule: "Setup ball status"
Event.OngoingPlayer
if (isBall)
{
    
}

rule: "Link"
{
    if ((IsInAir(ball1) || IsInAir(ball2)))
    {
        if (tpTo == null)
        {
            if (SpeedOf(ball1) >= SpeedOf(ball2))
            {
                tpFrom = ball2;
                tpTo = ball1;
            }
            else
            {
                tpFrom = ball1;
                tpTo = ball2;
            }
        }
    }
    else
    {
        if (isStunned(ball1))
        {
            tpFrom = ball2;
            tpTo = ball1;
        }
        else if (isStunned(ball2))
        {
            tpFrom = ball1;
            tpTo = ball2;
        }
        else
        {
            tpFrom = null;
            tpTo = null;
        }
    }

    Teleport(tpFrom, PositionOf(tpTo) + Vector(0, 1, 0));
    Wait(0.025);
    Loop();
}
macro isStunned(define player): HasStatus(player, Status.Stunned);

rule: "Kill if on boundary"
Event.OngoingPlayer
if (isBall)
if (YOf(PositionOf()) == 158.44)
if (IsOnGround())
{
    Kill();
}

rule: "Respawn ball"
if (IsDead(ball1) || IsDead(ball2))
{
    Respawn(ball1);
    Respawn(ball2);

    Wait(5);

    Teleport(ball1, TopPolePos());
    Teleport(ball2, TopPolePos() + Vector(0, 1, 0));
    ballIsOnStand = true;
}

rule: "On Ball Hit"
Event.OnDamageTaken
if (isBall)
if (!IsInSpawnRoom())
{
    SmallMessage(AllPlayers(), EventDamage());
    Heal(EventPlayer(), null, EventDamage());
}

rule: "On Hammer Hit"
Event.OnDamageTaken
if (isBall)
if (EventDamage() == 72) // 75 for no armor
if (!IsInSpawnRoom())
{
    ApplyImpulse(EventPlayer(), Vector(0, 1, 0), 15, Relative.ToWorld, ContraryMotion.Incorporate);
}

define playervar knockedFrom = null;

rule: "On Fire Strike"
Event.OnDamageTaken
if (isBall)
if (EventDamage() == 97) // 100 for no armor
if (!IsInSpawnRoom())
{
    Wait(3, WaitBehavior.IgnoreCondition);

    PlayEffect(AllPlayers(), PlayEffect.GoodExplosion, Color.Orange, EyePosition(), ExplosionRange());
    PlayEffect(AllPlayers(), PlayEffect.ExplosionSound, Color.Orange, EyePosition(), 100);
    Damage(NotBall(), Attacker(), 200);
    NotBall().knockedFrom = PositionOf();
}
macro NotBall(): FilteredArray(AllPlayers(), !ArrayElement().isBall && DistanceBetween(ArrayElement(), balls[0]) < ExplosionRange());
macro ExplosionRange(): 10;

rule: "Knocked"
Event.OnDamageTaken
if (knockedFrom != null)
{
    ApplyImpulse(EventPlayer(), DirectionTowards(knockedFrom, PositionOf() + Vector(0, 0.3, 0)), 30, Relative.ToWorld, ContraryMotion.Incorporate);
    knockedFrom = null;
}