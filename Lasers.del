import "Lava.del";

rule: "Debug Toggle"
Event.OngoingPlayer
if (IsCommunicating(EventPlayer(), Communication.VoiceLineLeft))
{
    doingLasers = !doingLasers;
    rotateLasers = true;
}

define globalvar doingLasers ! = false;
define globalvar lasersReady ! = false;

define globalvar rotateLasers = false;
define globalvar rotationSpeed = 0; // Number of degrees per second
define globalvar length = 0;

define globalvar laser1Effect !;
define globalvar laser2Effect !;
define globalvar laser3Effect !;

define globalvar midpoint;

define globalvar laser1Rot;
define globalvar laser2Rot;
define globalvar laser3Rot;

rule: "Setup laser game"
if (doingLasers)
{
    SetGravity(AllPlayers(), 90);

    midpoint = PolePos();

    CreateBeamEffect(
        AllPlayers(),
        BeamType.BadBeam,
        rot(midpoint + Vector(0, 0.5, 0), laser1Rot),
        inverseRot(midpoint + Vector(0, 0.5, 0), laser1Rot),
        Color.Red,
        EffectRev.VisibleToPositionAndRadius
    );
    laser1Effect = LastCreatedEntity();

    CreateBeamEffect(
        AllPlayers(),
        BeamType.BadBeam,
        rot(midpoint + Vector(0, 2, 0), laser2Rot),
        inverseRot(midpoint + Vector(0, 2, 0), laser2Rot),
        Color.Red,
        EffectRev.VisibleToPositionAndRadius
    );
    laser2Effect = LastCreatedEntity();

    CreateBeamEffect(
        AllPlayers(),
        BeamType.BadBeam,
        rot(midpoint + Vector(0, 3.5, 0), laser3Rot),
        inverseRot(midpoint + Vector(0, 3.5, 0), laser3Rot),
        Color.Red,
        EffectRev.VisibleToPositionAndRadius
    );
    laser3Effect = LastCreatedEntity();

    ChaseGlobalVariableOverTime(length, 150, 5, TimeChaseReevaluation.None);
    Wait(5);
    StopChasingGlobalVariable(length);

    lasersReady = true;
}

rule: "Clean up lasers"
if (!doingLasers)
if (lasersReady)
{
    lasersReady = false;

    ChaseGlobalVariableOverTime(length, 0, 5, TimeChaseReevaluation.None);
    Wait(5);
    StopChasingGlobalVariable(length);

    DestroyEffect(laser1Effect);
    DestroyEffect(laser2Effect);
    DestroyEffect(laser3Effect);
}

macro rot(define pos, define angle): Destination(pos, DirectionFromAngles(angle, 0), length);
macro inverseRot(define pos, define angle): Destination(pos, DirectionFromAngles(angle + 180, 0), length);

macro intersectingFrom(define rotation, define height): RayCastHitPlayer(rotation, midpoint + height, AllLivingPlayers(), null, false);

macro intersectingRot(define rotation, define height)       : intersectingFrom(       rot(midpoint + Vector(0, height, 0), rotation), Vector(0, height, 0));
macro inverseIntersectingRot(define rotation, define height): intersectingFrom(inverseRot(midpoint + Vector(0, height, 0), rotation), Vector(0, height, 0));

define playervar lastDamage;

rule: "Kill intersecting players"
Event.OngoingGlobal
if (doingLasers)
{
    define intersecting = [];

    // laser 1
    intersecting = Append(intersecting, intersectingRot(laser1Rot, 0.5));
    intersecting = Append(intersecting, inverseIntersectingRot(laser1Rot, 0.5));

    // laser 2
    intersecting = Append(intersecting, intersectingRot(laser2Rot, 2));
    MinWait();
    intersecting = Append(intersecting, inverseIntersectingRot(laser2Rot, 2));

    // laser 3
    intersecting = Append(intersecting, intersectingRot(laser3Rot, 3.5));
    intersecting = Append(intersecting, inverseIntersectingRot(laser3Rot, 3.5));

    intersecting = FilteredArray(intersecting, ArrayElement() != null && TotalTimeElapsed() - ArrayElement().lastDamage > 1);

    Damage(intersecting, null, 170);

    intersecting.lastDamage = TotalTimeElapsed();

    MinWait();
    LoopIfConditionIsTrue();
}

rule: "Do rotate"
if (doingLasers)
if (lasersReady)
if (rotateLasers)
{
    ChaseGlobalVariableAtRate(laser1Rot, 360 * 4, rotationSpeed, RateChaseReevaluation.DestinationAndRate);
    ChaseGlobalVariableAtRate(laser2Rot, -(360 * 4), rotationSpeed * 1.25, RateChaseReevaluation.DestinationAndRate);
    ChaseGlobalVariableAtRate(laser3Rot, 360 * 3, rotationSpeed * 0.85, RateChaseReevaluation.DestinationAndRate);

    ChaseGlobalVariableOverTime(rotationSpeed, 45, 5, TimeChaseReevaluation.None);
    Wait(5);
    StopChasingGlobalVariable(rotationSpeed);
}

rule: "Finished rotating"
Event.OngoingPlayer
if (doingLasers)
if (lasersReady)
if (rotateLasers)
if (laser1Rot == 360 * 4)
if (laser2Rot == -(360 * 4))
if (laser3Rot == 360 * 3)
{
    StopChasingGlobalVariable(laser1Rot);
    StopChasingGlobalVariable(laser2Rot);
    StopChasingGlobalVariable(laser3Rot);
    SmallMessage(AllPlayers(), "Finished rotating");
    rotateLasers = false;
}