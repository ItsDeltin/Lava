//import "Debug.del";
import "Trigger.del";

define Gravity: 20;

globalvar define ballPositions = [];
globalvar define ballVelocitys = [];
globalvar define ballTeams = [];

globalvar Trigger[] ballBounce = [];

rule: "[BallPhysics] Do physics calculations for all balls"
Event.OngoingGlobal
{   
    for(define i = 0; i < CountOf(ballPositions); i++){

        //If the ball is touching the floor
        if(YOf(ballPositions[i]) <= 0.5){
            ballPositions[i] = Vector(XOf(ballPositions[i]), 0.6, ZOf(ballPositions[i]));
            ballVelocitys[i] = Vector(XOf(ballVelocitys[i]), -YOf(ballVelocitys[i])/2, ZOf(ballVelocitys[i])); 


            //If the ball has run out of bounces
            if(AbsoluteValue(YOf(ballVelocitys[i])) <= 3)
            {
                ballVelocitys[i] = Vector(XOf(ballVelocitys[i]), 0, ZOf(ballVelocitys[i]));
            }
            ballBounce[i].Activate();
        }
        //Otherwise, as long as the ball is off the ground, apply gravity
        else if(YOf(ballPositions[i]) > 0.6){
            ballVelocitys[i] -= Vector(0, Gravity/60, 0);
        }

        ballPositions[i] += ballVelocitys[i]/60;
    }
    MinWait();
    Loop();
}

